<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20110701" xmlns:xmi="http://www.omg.org/spec/XMI/20110701" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/4.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_1Kx54KkFEeK3oZB5eR7Ndw" name="Labyrinth">
    <eAnnotations xmi:id="_1UkIAKkFEeK3oZB5eR7Ndw" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_1UkIAakFEeK3oZB5eR7Ndw" source="codegen">
        <details xmi:id="_1UkIAqkFEeK3oZB5eR7Ndw" key="codegenDirectory" value="/Labyrinth/src"/>
        <details xmi:id="_2c0wkKkFEeK3oZB5eR7Ndw" key="AssociatedSourceCode" value="/Labyrinth/src/com/labyrinth/Labyrinth.java;3787203076/1;/Labyrinth/src/com/labyrinth/game/Board.java;748834920/1;/Labyrinth/src/com/labyrinth/game/ComputerPlayer.java;206531633/1;/Labyrinth/src/com/labyrinth/game/Direction.java;2324479450/1;/Labyrinth/src/com/labyrinth/game/GameManager.java;185757232/1;/Labyrinth/src/com/labyrinth/game/IllegalMoveException.java;3849805425/1;/Labyrinth/src/com/labyrinth/game/Leaderboard.java;3878719323/1;/Labyrinth/src/com/labyrinth/game/Player.java;974042836/1;/Labyrinth/src/com/labyrinth/game/RotationAngle.java;2617409998/1;/Labyrinth/src/com/labyrinth/game/SettingsManager.java;1760983277/1;/Labyrinth/src/com/labyrinth/game/Tile.java;2954101586/1;/Labyrinth/src/com/labyrinth/game/TileType.java;4135073508/1;/Labyrinth/src/com/labyrinth/game/modes/GameMode.java;1481242702/1;/Labyrinth/src/com/labyrinth/game/modes/TreasureChase.java;2613205526/1;/Labyrinth/src/com/labyrinth/ui/CharacterElements.java;3382691404/1;/Labyrinth/src/com/labyrinth/ui/GameView.java;3594547885/1;/Labyrinth/src/com/labyrinth/ui/Window.java;1720058199/1;/Labyrinth/src/com/labyrinth/ui/interfaces/LoadUI.java;581643405/1;/Labyrinth/src/com/labyrinth/ui/interfaces/MainMenuUI.java;2203590300/1;/Labyrinth/src/com/labyrinth/ui/interfaces/OptionsUI.java;737100062/1;/Labyrinth/src/com/labyrinth/ui/interfaces/UserInterface.java;3500506071/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_178REKkFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_178REakFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_178REqkFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_178RE6kFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_178RFKkFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_178RFakFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_178RFqkFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_1784IKkFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_1784IakFEeK3oZB5eR7Ndw">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_11YWEKkFEeK3oZB5eR7Ndw" name="com">
      <packagedElement xmi:type="uml:Package" xmi:id="_11ayUKkFEeK3oZB5eR7Ndw" name="labyrinth">
        <packagedElement xmi:type="uml:Package" xmi:id="_11bZYKkFEeK3oZB5eR7Ndw" name="ui">
          <packagedElement xmi:type="uml:Package" xmi:id="_11cngKkFEeK3oZB5eR7Ndw" name="interfaces">
            <packagedElement xmi:type="uml:Class" xmi:id="_1-kuUKkFEeK3oZB5eR7Ndw" name="LoadUI">
              <ownedComment xmi:id="_2KzMcqkFEeK3oZB5eR7Ndw">
                <body>Represents the load game screen user interface.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.19042013&#xD;
 *</body>
              </ownedComment>
              <generalization xmi:id="_2Iuv4KkFEeK3oZB5eR7Ndw" general="_1-2bIKkFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JqkAKkFEeK3oZB5eR7Ndw" name="manager" visibility="private" type="_18XH0akFEeK3oZB5eR7Ndw" association="_2LQfcKkFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JrLEKkFEeK3oZB5eR7Ndw" name="gameUI" visibility="private" type="_1-TokKkFEeK3oZB5eR7Ndw" association="_2LQfc6kFEeK3oZB5eR7Ndw"/>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KcAEKkFEeK3oZB5eR7Ndw" name="LoadUI" specification="_1-lVYKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KcAEakFEeK3oZB5eR7Ndw" type="_1-kuUKkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>super(&quot;LOAD GAME&quot;);&#xD;
		manager = new GameManager();&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KcnIKkFEeK3oZB5eR7Ndw" name="parse" specification="_1-l8c6kFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KcnIakFEeK3oZB5eR7Ndw" name="args">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KcnIqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
                <language>java</language>
                <body>super.parse(args);&#xD;
		&#xD;
		if(isRunning()) {&#xD;
			GameMode newGame = null;&#xD;
			&#xD;
			// Attempt to load the save game&#xD;
			try {&#xD;
				newGame = manager.load(Labyrinth.LOAD_PATH + args[0]);&#xD;
			} catch(FileNotFoundException e) {&#xD;
				throw new IllegalArgumentException(&quot;Couldn't find: &quot; + Labyrinth.LOAD_PATH + args[0]);&#xD;
			} catch(IOException e) {&#xD;
				throw new IllegalArgumentException(&quot;Error parsing: &quot; + Labyrinth.LOAD_PATH + args[0]);&#xD;
			}&#xD;
			&#xD;
			// Assign the saved game to the active game and start the game ;)&#xD;
			if(newGame != null) {&#xD;
				gameUI = new GameView(newGame);&#xD;
				gameUI.run();&#xD;
			} else {&#xD;
				throw new IllegalArgumentException(&quot;Error parsing: &quot; + Labyrinth.LOAD_PATH + args[0]);&#xD;
			}&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KcnI6kFEeK3oZB5eR7Ndw" name="prompt" specification="_1-nxoKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KcnJKkFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KcnJakFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
                <language>java</language>
                <body>System.out.print(&quot;\n    Load Game: &quot;);&#xD;
		return super.prompt();&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KdOMKkFEeK3oZB5eR7Ndw" name="makeWindow" specification="_1-oYsKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>super.makeWindow();&#xD;
		&#xD;
		LinkedList&lt;String> loadFile = null;&#xD;
		&#xD;
		addContent(&quot;Available saved games to choose from:&quot;);&#xD;
		addContent(&quot;&quot;);&#xD;
		&#xD;
		try {&#xD;
			loadFile = processFile(Labyrinth.LOAD_PATH + &quot;list&quot;);&#xD;
		} catch(Exception e) {&#xD;
			addContent(&quot;    No saved games available&quot;);&#xD;
			return;&#xD;
		}&#xD;
		&#xD;
		// Add the available saved games to the window&#xD;
		if(loadFile == null) {&#xD;
			addContent(&quot;    No saved games available&quot;);&#xD;
		} else {&#xD;
			for(String line : loadFile) {&#xD;
				addContent(&quot;    * &quot; + line);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		addContent(&quot;&quot;);&#xD;
		addContent(&quot;------------------------------------------------------------------------&quot;);&#xD;
		addContent(&quot;Enter 'back' to go back                                                 &quot;);&#xD;
	</body>
              </ownedBehavior>
              <ownedOperation xmi:id="_1-lVYKkFEeK3oZB5eR7Ndw" name="LoadUI" method="_2KcAEKkFEeK3oZB5eR7Ndw">
                <eAnnotations xmi:id="_1-l8cKkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                  <details xmi:id="_1-l8cakFEeK3oZB5eR7Ndw" key="create"/>
                </eAnnotations>
                <ownedComment xmi:id="_2KzMc6kFEeK3oZB5eR7Ndw">
                  <body>Construct a load game interface.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-l8cqkFEeK3oZB5eR7Ndw" type="_1-kuUKkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1-l8c6kFEeK3oZB5eR7Ndw" name="parse" method="_2KcnIKkFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KzMdKkFEeK3oZB5eR7Ndw">
                  <body>Parse the name of the game to load.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-mjgKkFEeK3oZB5eR7Ndw" name="args">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-mjgakFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_1-nxoKkFEeK3oZB5eR7Ndw" name="prompt" method="_2KcnI6kFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KzMdakFEeK3oZB5eR7Ndw">
                  <body>Prompt the user for their option.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-nxoakFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-nxoqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_1-oYsKkFEeK3oZB5eR7Ndw" name="makeWindow" visibility="protected" method="_2KdOMKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KzMdqkFEeK3oZB5eR7Ndw">
                  <body>Initialise the load game window.</body>
                </ownedComment>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_1-qN4KkFEeK3oZB5eR7Ndw" name="MainMenuUI">
              <ownedComment xmi:id="_2KzzgKkFEeK3oZB5eR7Ndw">
                <body>Represents the main menu user interface.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.19042013&#xD;
 *</body>
              </ownedComment>
              <generalization xmi:id="_2Iv-AKkFEeK3oZB5eR7Ndw" general="_1-2bIKkFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JsZMKkFEeK3oZB5eR7Ndw" name="settings" visibility="private" type="_181B4KkFEeK3oZB5eR7Ndw" association="_2LRGgakFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JtAQKkFEeK3oZB5eR7Ndw" name="gameUI" visibility="private" type="_1-TokKkFEeK3oZB5eR7Ndw" association="_2LRtkakFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JtnUKkFEeK3oZB5eR7Ndw" name="loadUI" visibility="private" type="_1-kuUKkFEeK3oZB5eR7Ndw" association="_2LSUoakFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JtnUqkFEeK3oZB5eR7Ndw" name="optionsUI" visibility="private" type="_1-w7kKkFEeK3oZB5eR7Ndw" association="_2LS7sakFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2Ju1cKkFEeK3oZB5eR7Ndw" name="helpWindow" visibility="private" type="_1-eAoKkFEeK3oZB5eR7Ndw" association="_2LS7tKkFEeK3oZB5eR7Ndw"/>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kd1QKkFEeK3oZB5eR7Ndw" name="MainMenuUI" specification="_1-rcAKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2Kd1QakFEeK3oZB5eR7Ndw" type="_1-qN4KkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>super();&#xD;
		&#xD;
		// Load in settings&#xD;
		settings = new SettingsManager(Labyrinth.SETTINGS_FILE);&#xD;
		&#xD;
		// Set up UI's&#xD;
		gameUI = new GameView(new TreasureChase(settings));&#xD;
		loadUI = new LoadUI();&#xD;
		optionsUI = new OptionsUI(settings);&#xD;
		&#xD;
		// Set up windows&#xD;
		makeHelpWindow();&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kd1QqkFEeK3oZB5eR7Ndw" name="prompt" specification="_1-sDEKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2Kd1Q6kFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2Kd1RKkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
                <language>java</language>
                <body>System.out.print(&quot;\n    Option: &quot;);&#xD;
		return super.prompt();&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kd1RakFEeK3oZB5eR7Ndw" name="parse" specification="_1-sqIKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2Kd1RqkFEeK3oZB5eR7Ndw" name="args">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2Kd1R6kFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
                <language>java</language>
                <body>switch(Integer.parseInt(args[0])) {&#xD;
		case 1:&#xD;
			// Play game&#xD;
			System.out.println(&quot;\nStarting new Treasure Chase game...\n&quot;);&#xD;
			gameUI = new GameView(new TreasureChase(settings));&#xD;
			gameUI.run();&#xD;
			break;&#xD;
		case 2:&#xD;
			// Load game&#xD;
			System.out.println();&#xD;
			loadUI.run();&#xD;
			System.out.println();&#xD;
			break;&#xD;
		case 3:&#xD;
			// Options&#xD;
			System.out.println();&#xD;
			optionsUI.run();&#xD;
			System.out.println();&#xD;
			&#xD;
			// Reload settings&#xD;
			try {&#xD;
				settings.load(Labyrinth.SETTINGS_FILE);&#xD;
			} catch(Exception e) {&#xD;
				System.out.println(&quot;There was a problem reloading the settings!&quot;);&#xD;
			}&#xD;
			&#xD;
			break;&#xD;
		case 4:&#xD;
			// Help&#xD;
			System.out.println();&#xD;
			displayHelp();&#xD;
			break;&#xD;
		case 5:&#xD;
			// Exit&#xD;
			stop();&#xD;
			break;&#xD;
		default:&#xD;
			throw new IllegalArgumentException(&quot;Please enter an option between 1-5 (inclusive).&quot;);&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KecUKkFEeK3oZB5eR7Ndw" name="displayHelp" specification="_1-tRMakFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>helpWindow.display();&#xD;
		enterPrompt();&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KecUakFEeK3oZB5eR7Ndw" name="makeWindow" specification="_1-tRMqkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>super.makeWindow();&#xD;
		&#xD;
		setLayoutFile(&quot;media/window_menu&quot;);&#xD;
		&#xD;
		addContent(&quot;1. Play game&quot;);&#xD;
		addContent(&quot;2. Load game&quot;);&#xD;
		addContent(&quot;3. Options&quot;);&#xD;
		addContent(&quot;4. Help&quot;);&#xD;
		addContent(&quot;5. Exit&quot;);&#xD;
		&#xD;
		try {&#xD;
			refresh();&#xD;
		} catch (Exception e) {&#xD;
			System.out.println(&quot;Error: MainMenuUI.makeWindow(): Couldn't process layout file: &quot; + getLayoutFile());&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KecUqkFEeK3oZB5eR7Ndw" name="makeHelpWindow" specification="_1-t4QKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>LinkedList&lt;String> helpFile = null;&#xD;
		helpWindow = new Window(&quot;HELP&quot;);&#xD;
		&#xD;
		try {&#xD;
			helpFile = processFile(Labyrinth.HELP_FILE);&#xD;
		} catch(Exception e) {&#xD;
			helpWindow.addContent(&quot;Help file not available, sorry!&quot;);&#xD;
		}&#xD;
		&#xD;
		// Add the help file to the window&#xD;
		for(String line : helpFile) {&#xD;
			helpWindow.addContent(line);&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedOperation xmi:id="_1-rcAKkFEeK3oZB5eR7Ndw" name="MainMenuUI" method="_2Kd1QKkFEeK3oZB5eR7Ndw">
                <eAnnotations xmi:id="_1-rcAakFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                  <details xmi:id="_1-rcAqkFEeK3oZB5eR7Ndw" key="create"/>
                </eAnnotations>
                <ownedComment xmi:id="_2KzzgakFEeK3oZB5eR7Ndw">
                  <body>Construct a main menu interface.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-rcA6kFEeK3oZB5eR7Ndw" type="_1-qN4KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1-sDEKkFEeK3oZB5eR7Ndw" name="prompt" method="_2Kd1QqkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KzzgqkFEeK3oZB5eR7Ndw">
                  <body>Prompt the user for their menu option.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-sDEakFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-sDEqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_1-sqIKkFEeK3oZB5eR7Ndw" name="parse" method="_2Kd1RakFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2Kzzg6kFEeK3oZB5eR7Ndw">
                  <body>Parse a menu option.&#xD;
	 * &#xD;
	 * 1 - Play game&#xD;
	 * 2 - Load game&#xD;
	 * 3 - Options&#xD;
	 * 4 - Help&#xD;
	 * 5 - Exit&#xD;
	 * &#xD;
	 * @param args The input in a tokenized form.&#xD;
	 * @throws IllegalArgumentException When an invalid menu option is passed.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-sqIakFEeK3oZB5eR7Ndw" name="args">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-tRMKkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_1-tRMakFEeK3oZB5eR7Ndw" name="displayHelp" method="_2KecUKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KzzhKkFEeK3oZB5eR7Ndw">
                  <body>Display the help file.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_1-tRMqkFEeK3oZB5eR7Ndw" name="makeWindow" visibility="protected" method="_2KecUakFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KzzhakFEeK3oZB5eR7Ndw">
                  <body>Initialise the main menu window with custom layout and content.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_1-t4QKkFEeK3oZB5eR7Ndw" name="makeHelpWindow" visibility="private" method="_2KecUqkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2K0akKkFEeK3oZB5eR7Ndw">
                  <body>Initialise the help window.</body>
                </ownedComment>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_1-w7kKkFEeK3oZB5eR7Ndw" name="OptionsUI">
              <ownedComment xmi:id="_2K0akakFEeK3oZB5eR7Ndw">
                <body>Represents the options screen user interface.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.19042013&#xD;
 *</body>
              </ownedComment>
              <generalization xmi:id="_2IxMI6kFEeK3oZB5eR7Ndw" general="_1-2bIKkFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JwqoKkFEeK3oZB5eR7Ndw" name="settings" visibility="private" type="_181B4KkFEeK3oZB5eR7Ndw" association="_2LTiwakFEeK3oZB5eR7Ndw"/>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KfDYKkFEeK3oZB5eR7Ndw" name="OptionsUI" specification="_2IwlEKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KfDYakFEeK3oZB5eR7Ndw" name="settings" type="_181B4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KfDYqkFEeK3oZB5eR7Ndw" type="_1-w7kKkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>super(&quot;OPTIONS&quot;);&#xD;
		this.settings = settings;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KfqcKkFEeK3oZB5eR7Ndw" name="parse" specification="_1-yJsKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KfqcakFEeK3oZB5eR7Ndw" name="args">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KfqcqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
                <language>java</language>
                <body>super.parse(args);&#xD;
		&#xD;
		if(args[0].toLowerCase().equals(&quot;rows&quot;)) {&#xD;
			if(args.length != 2)&#xD;
				throw new IllegalArgumentException(&quot;Usage: rows &lt;no>&quot;);&#xD;
			&#xD;
			// Alter rows&#xD;
			int rows; &#xD;
			&#xD;
			try {&#xD;
				rows = Integer.parseInt(args[1]);&#xD;
			} catch(NumberFormatException e) {&#xD;
				throw new IllegalArgumentException(&quot;Please enter a valid integer between 5 and 15 (inclusive).&quot;);&#xD;
			}&#xD;
			&#xD;
			if(rows &lt; 5 || rows > 15)&#xD;
				throw new IllegalArgumentException(&quot;Please enter a valid integer between 5 and 15 (inclusive).&quot;);&#xD;
			&#xD;
			settings.setRows(rows);&#xD;
		} else if(args[0].toLowerCase().equals(&quot;columns&quot;)) {&#xD;
			if(args.length != 2)&#xD;
				throw new IllegalArgumentException(&quot;Usage: columns &lt;no>&quot;);&#xD;
			&#xD;
			// Alter columns&#xD;
			int columns; &#xD;
			&#xD;
			try {&#xD;
				columns = Integer.parseInt(args[1]);&#xD;
			} catch(NumberFormatException e) {&#xD;
				throw new IllegalArgumentException(&quot;Please enter a valid integer between 5 and 15 (inclusive).&quot;);&#xD;
			}&#xD;
			&#xD;
			if(columns &lt; 5 || columns > 15)&#xD;
				throw new IllegalArgumentException(&quot;Please enter a valid integer between 5 and 15 (inclusive).&quot;);&#xD;
			&#xD;
			settings.setColumns(columns);&#xD;
		} else if(args[0].toLowerCase().equals(&quot;leaderboard&quot;)) {&#xD;
			if(args.length != 2)&#xD;
				throw new IllegalArgumentException(&quot;Usage: leaderboard &lt;path>&quot;);&#xD;
			&#xD;
			settings.setLeaderboard(args[1]);&#xD;
		} else if(args[0].toLowerCase().equals(&quot;apply&quot;)) {&#xD;
			System.out.print(&quot;Applying settings to &quot; + Labyrinth.SETTINGS_FILE + &quot;... &quot;);&#xD;
			&#xD;
			try {&#xD;
				settings.save(Labyrinth.SETTINGS_FILE);&#xD;
			} catch(Exception e) {&#xD;
				System.out.println(&quot;failed!&quot;);&#xD;
				System.out.println();&#xD;
			}&#xD;
			&#xD;
			System.out.println(&quot;success!&quot;);&#xD;
			System.out.println();&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kfqc6kFEeK3oZB5eR7Ndw" name="prompt" specification="_1-ywwKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KfqdKkFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KfqdakFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
                <language>java</language>
                <body>System.out.print(&quot;\n    Option: &quot;);&#xD;
		return super.prompt();&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KgRgKkFEeK3oZB5eR7Ndw" name="makeWindow" specification="_1-zX0akFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>super.makeWindow();&#xD;
		&#xD;
		addContent(&quot;To alter an option, type &lt;option_name> &lt;new_value>. Current options:&quot;);&#xD;
		addContent(&quot;&quot;);&#xD;
		&#xD;
		// Add the options to the window&#xD;
		addContent(&quot;    * ROWS         &quot; + settings.getRows());&#xD;
		addContent(&quot;    * COLUMNS      &quot; + settings.getColumns());&#xD;
		addContent(&quot;    * LEADERBOARD  &quot; + settings.getLeaderboard());&#xD;
		&#xD;
		addContent(&quot;&quot;);&#xD;
		addContent(&quot;DETAILS&quot;);&#xD;
		addContent(&quot;------------------------------------------------------------------------&quot;);&#xD;
		addContent(&quot;&quot;);&#xD;
		addContent(&quot;    * VERSION      Labyrinth v0.1.19042013                              &quot;);&#xD;
		addContent(&quot;    * CHARSET      &quot; + CharacterElements.charSet);&#xD;
		addContent(&quot;&quot;);&#xD;
		addContent(&quot;------------------------------------------------------------------------&quot;);&#xD;
		addContent(&quot;Enter 'back' to go back                   Enter 'apply' to apply changes&quot;);&#xD;
	</body>
              </ownedBehavior>
              <ownedOperation xmi:id="_1-yJsKkFEeK3oZB5eR7Ndw" name="parse" method="_2KfqcKkFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2K0ak6kFEeK3oZB5eR7Ndw">
                  <body>Parse the option to manipulate.&#xD;
	 * &#xD;
	 * Supported options:&#xD;
	 * &#xD;
	 * 		ROWS &lt;no>&#xD;
	 * 		COLUMNS &lt;no>&#xD;
	 * 		LEADERBOARD &lt;path>&#xD;
	 * &#xD;
	 * The command 'apply' saves the changes.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-yJsakFEeK3oZB5eR7Ndw" name="args">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-yJsqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_1-ywwKkFEeK3oZB5eR7Ndw" name="prompt" method="_2Kfqc6kFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2K0alKkFEeK3oZB5eR7Ndw">
                  <body>Prompt the user for their option.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-ywwakFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-ywwqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_1-zX0akFEeK3oZB5eR7Ndw" name="makeWindow" visibility="protected" method="_2KgRgKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2K0alakFEeK3oZB5eR7Ndw">
                  <body>Initialise the options window.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_2IwlEKkFEeK3oZB5eR7Ndw" name="OptionsUI" method="_2KfDYKkFEeK3oZB5eR7Ndw">
                <eAnnotations xmi:id="_2IxMIKkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                  <details xmi:id="_2IxMIakFEeK3oZB5eR7Ndw" key="create"/>
                </eAnnotations>
                <ownedComment xmi:id="_2K0akqkFEeK3oZB5eR7Ndw">
                  <body>Construct an options interface.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IwlEakFEeK3oZB5eR7Ndw" name="settings" type="_181B4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IxMIqkFEeK3oZB5eR7Ndw" type="_1-w7kKkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_1-2bIKkFEeK3oZB5eR7Ndw" name="UserInterface" isAbstract="true">
              <ownedComment xmi:id="_2K0alqkFEeK3oZB5eR7Ndw">
                <body>Represents the outline of a text-based UI for a general purpose. It provides &#xD;
functionality for prompting the user for input via the standard input stream. &#xD;
This input is then returned in a 'tokenized' form. For example:&#xD;
&#xD;
		input: &quot;hello world&quot; -> output: [&quot;hello&quot;, &quot;world&quot;]&#xD;
&#xD;
It also provides basic functionality for parsing the input.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.19042013&#xD;
 *</body>
              </ownedComment>
              <generalization xmi:id="_2IyaQKkFEeK3oZB5eR7Ndw" general="_1-eAoKkFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2Jx4wKkFEeK3oZB5eR7Ndw" name="running" isReadOnly="true">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_2Jx4wakFEeK3oZB5eR7Ndw" name="input" visibility="protected" type="_2ITSEakFEeK3oZB5eR7Ndw" association="_2LUJ0akFEeK3oZB5eR7Ndw"/>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KgRgakFEeK3oZB5eR7Ndw" name="UserInterface" specification="_1-3pQKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KgRgqkFEeK3oZB5eR7Ndw" type="_1-2bIKkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>super();&#xD;
		&#xD;
		running = false;&#xD;
		input = new Scanner(System.in);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kg4kKkFEeK3oZB5eR7Ndw" name="UserInterface" specification="_1-43YKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2Kg4kakFEeK3oZB5eR7Ndw" name="title">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2Kg4kqkFEeK3oZB5eR7Ndw" type="_1-2bIKkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>super(title);&#xD;
		&#xD;
		running = false;&#xD;
		input = new Scanner(System.in);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kg4k6kFEeK3oZB5eR7Ndw" name="run" specification="_1-5ecKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>running = true;&#xD;
		&#xD;
		while(isRunning()) {&#xD;
			// Redraw the window in case of new data&#xD;
			makeWindow();&#xD;
			&#xD;
			display();&#xD;
			String[] choice = prompt();&#xD;
			&#xD;
			try {&#xD;
				parse(choice);&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				System.out.println(e.getMessage());&#xD;
				continue;&#xD;
			}&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kg4lKkFEeK3oZB5eR7Ndw" name="stop" specification="_1-5ecakFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>running = false;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KhfoKkFEeK3oZB5eR7Ndw" name="prompt" specification="_1-6FgKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KhfoakFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KhfoqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
                <language>java</language>
                <body>String in = input.nextLine();&#xD;
		return in.split(&quot; &quot;);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KiGsKkFEeK3oZB5eR7Ndw" name="parse" specification="_1-7ToKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KiGsakFEeK3oZB5eR7Ndw" name="args">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KiGsqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
                <language>java</language>
                <body>if(args[0].toLowerCase().equals(&quot;back&quot;) || args[0].toLowerCase().equals(&quot;exit&quot;))&#xD;
			stop();&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KiGs6kFEeK3oZB5eR7Ndw" name="makeWindow" specification="_1-76sKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>clearContents();&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KiGtKkFEeK3oZB5eR7Ndw" name="processFile" specification="_1-8hwKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KiGtakFEeK3oZB5eR7Ndw" name="path">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2KiGtqkFEeK3oZB5eR7Ndw" type="_2IsToKkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>LinkedList&lt;String> lines = new LinkedList&lt;String>();&#xD;
		BufferedReader reader = new BufferedReader(new FileReader(path));&#xD;
		String line = reader.readLine();&#xD;
			&#xD;
		while(line != null) {&#xD;
			lines.add(line);&#xD;
			line = reader.readLine();&#xD;
		}&#xD;
		reader.close();&#xD;
		&#xD;
		return lines;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KitwKkFEeK3oZB5eR7Ndw" name="enterPrompt" specification="_1--W8KkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>System.out.print(&quot;\nPlease press [ENTER] to continue... &quot;);&#xD;
		&#xD;
		input.nextLine();&#xD;
	</body>
              </ownedBehavior>
              <ownedOperation xmi:id="_1-3pQKkFEeK3oZB5eR7Ndw" name="UserInterface" method="_2KgRgakFEeK3oZB5eR7Ndw">
                <eAnnotations xmi:id="_1-4QUKkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                  <details xmi:id="_1-4QUakFEeK3oZB5eR7Ndw" key="create"/>
                </eAnnotations>
                <ownedParameter xmi:id="_1-4QUqkFEeK3oZB5eR7Ndw" type="_1-2bIKkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1-43YKkFEeK3oZB5eR7Ndw" name="UserInterface" method="_2Kg4kKkFEeK3oZB5eR7Ndw">
                <eAnnotations xmi:id="_1-43YqkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                  <details xmi:id="_1-43Y6kFEeK3oZB5eR7Ndw" key="create"/>
                </eAnnotations>
                <ownedParameter xmi:id="_1-43YakFEeK3oZB5eR7Ndw" name="title">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedParameter>
                <ownedParameter xmi:id="_1-43ZKkFEeK3oZB5eR7Ndw" type="_1-2bIKkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1-5ecKkFEeK3oZB5eR7Ndw" name="run" method="_2Kg4k6kFEeK3oZB5eR7Ndw"/>
              <ownedOperation xmi:id="_1-5ecakFEeK3oZB5eR7Ndw" name="stop" method="_2Kg4lKkFEeK3oZB5eR7Ndw"/>
              <ownedOperation xmi:id="_1-6FgKkFEeK3oZB5eR7Ndw" name="prompt" method="_2KhfoKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_1-6FgakFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-6FgqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_1-7ToKkFEeK3oZB5eR7Ndw" name="parse" method="_2KiGsKkFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_1-7ToakFEeK3oZB5eR7Ndw" name="args">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                  <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-7ToqkFEeK3oZB5eR7Ndw" value="*"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_1-76sKkFEeK3oZB5eR7Ndw" name="makeWindow" visibility="protected" method="_2KiGs6kFEeK3oZB5eR7Ndw"/>
              <ownedOperation xmi:id="_1-8hwKkFEeK3oZB5eR7Ndw" name="processFile" method="_2KiGtKkFEeK3oZB5eR7Ndw" raisedException="_2IQOwakFEeK3oZB5eR7Ndw _2ISD8akFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_1-8hwakFEeK3oZB5eR7Ndw" name="path">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2JEuIKkFEeK3oZB5eR7Ndw" type="_2IsToKkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1--W8KkFEeK3oZB5eR7Ndw" name="enterPrompt" method="_2KitwKkFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LQfcKkFEeK3oZB5eR7Ndw" name="" memberEnd="_2LQfcakFEeK3oZB5eR7Ndw _2JqkAKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LQfcakFEeK3oZB5eR7Ndw" name="" type="_1-kuUKkFEeK3oZB5eR7Ndw" association="_2LQfcKkFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LQfc6kFEeK3oZB5eR7Ndw" name="" memberEnd="_2LQfdKkFEeK3oZB5eR7Ndw _2JrLEKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LQfdKkFEeK3oZB5eR7Ndw" name="" type="_1-kuUKkFEeK3oZB5eR7Ndw" association="_2LQfc6kFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LRGgakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LRGgqkFEeK3oZB5eR7Ndw _2JsZMKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LRGgqkFEeK3oZB5eR7Ndw" name="" type="_1-qN4KkFEeK3oZB5eR7Ndw" association="_2LRGgakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LRtkakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LRtkqkFEeK3oZB5eR7Ndw _2JtAQKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LRtkqkFEeK3oZB5eR7Ndw" name="" type="_1-qN4KkFEeK3oZB5eR7Ndw" association="_2LRtkakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LSUoakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LSUoqkFEeK3oZB5eR7Ndw _2JtnUKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LSUoqkFEeK3oZB5eR7Ndw" name="" type="_1-qN4KkFEeK3oZB5eR7Ndw" association="_2LSUoakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LS7sakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LS7sqkFEeK3oZB5eR7Ndw _2JtnUqkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LS7sqkFEeK3oZB5eR7Ndw" name="" type="_1-qN4KkFEeK3oZB5eR7Ndw" association="_2LS7sakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LS7tKkFEeK3oZB5eR7Ndw" name="" memberEnd="_2LS7takFEeK3oZB5eR7Ndw _2Ju1cKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LS7takFEeK3oZB5eR7Ndw" name="" type="_1-qN4KkFEeK3oZB5eR7Ndw" association="_2LS7tKkFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LTiwakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LTiwqkFEeK3oZB5eR7Ndw _2JwqoKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LTiwqkFEeK3oZB5eR7Ndw" name="" type="_1-w7kKkFEeK3oZB5eR7Ndw" association="_2LTiwakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LUJ0akFEeK3oZB5eR7Ndw" name="" memberEnd="_2LUJ0qkFEeK3oZB5eR7Ndw _2Jx4wakFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LUJ0qkFEeK3oZB5eR7Ndw" name="" type="_1-2bIKkFEeK3oZB5eR7Ndw" association="_2LUJ0akFEeK3oZB5eR7Ndw"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_1-Nh8KkFEeK3oZB5eR7Ndw" name="CharacterElements">
            <ownedComment xmi:id="_2KwwM6kFEeK3oZB5eR7Ndw">
              <body>Represents all the available character elements for use within&#xD;
the text-based user interface. The characters are initialised in&#xD;
relation to the in use character set so as to ensure compatibility.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.17032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_2Jb6gKkFEeK3oZB5eR7Ndw" name="charSet" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_2Jb6gakFEeK3oZB5eR7Ndw" value="Charset.defaultCharset().toString().toLowerCase()"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2Jb6gqkFEeK3oZB5eR7Ndw" name="charBlock" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JchkakFEeK3oZB5eR7Ndw" name="charImmovable" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JdIoKkFEeK3oZB5eR7Ndw" name="charToken" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JdIoqkFEeK3oZB5eR7Ndw" name="charTreasure" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JdvsakFEeK3oZB5eR7Ndw" name="charBorderVertical" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JeWwKkFEeK3oZB5eR7Ndw" name="charBorderHorizontal" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JeWwqkFEeK3oZB5eR7Ndw" name="charBorderCornerTopLeft" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2Je90akFEeK3oZB5eR7Ndw" name="charBorderCornerTopRight" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2Jfk4KkFEeK3oZB5eR7Ndw" name="charBorderCornerBottomLeft" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2Jfk4qkFEeK3oZB5eR7Ndw" name="charBorderCornerBottomRight" isStatic="true" type="_2I_1oKkFEeK3oZB5eR7Ndw"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KVSYKkFEeK3oZB5eR7Ndw" name="initCharacters" specification="_1-PXIKkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>// Initialise the tile characters in accordance to the charset&#xD;
		if(charSet.contains(&quot;utf&quot;)) {&#xD;
			// UTF charset available&#xD;
			charBlock = '\u2588'; // Solid block&#xD;
			charImmovable = '\u2592'; // Light black block&#xD;
			charToken = 'O';&#xD;
			charTreasure = 'T';&#xD;
			charBorderVertical = '\u2551';&#xD;
			charBorderHorizontal = '\u2550';&#xD;
			charBorderCornerTopLeft = '\u2554';&#xD;
			charBorderCornerTopRight = '\u2557';&#xD;
			charBorderCornerBottomLeft = '\u255A';&#xD;
			charBorderCornerBottomRight = '\u255D';&#xD;
		} else {&#xD;
			// Most likely ASCII on Windows CMD&#xD;
			charBlock = (char) 219; // Solid block&#xD;
			charImmovable = (char) 177; // Light black block&#xD;
			charToken = 'O';&#xD;
			charTreasure = 'T';&#xD;
			charBorderVertical = (char) 186;&#xD;
			charBorderHorizontal = (char) 205;&#xD;
			charBorderCornerTopLeft = (char) 201;&#xD;
			charBorderCornerTopRight = (char) 187;&#xD;
			charBorderCornerBottomLeft = (char) 200;&#xD;
			charBorderCornerBottomRight = (char) 188;&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_1-PXIKkFEeK3oZB5eR7Ndw" name="initCharacters" isStatic="true" method="_2KVSYKkFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_1-TokKkFEeK3oZB5eR7Ndw" name="GameView">
            <ownedComment xmi:id="_2KxXQKkFEeK3oZB5eR7Ndw">
              <body>Represents a text based user interface for use as a front-end for the Labyrinth game.&#xD;
This user interface works with a valid conforming GameMode object (e.g. TreasureChase).&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.19042013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_2JhaEKkFEeK3oZB5eR7Ndw" name="game" visibility="private" type="_19cF4KkFEeK3oZB5eR7Ndw" association="_2LODMakFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JiBIakFEeK3oZB5eR7Ndw" name="running" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JioMKkFEeK3oZB5eR7Ndw" name="input" visibility="private" type="_2ITSEakFEeK3oZB5eR7Ndw" association="_2LOqQKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JjPQKkFEeK3oZB5eR7Ndw" name="manager" visibility="private" type="_18XH0akFEeK3oZB5eR7Ndw" association="_2LOqQ6kFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2Jj2UKkFEeK3oZB5eR7Ndw" name="makeTokenMove" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KWggKkFEeK3oZB5eR7Ndw" name="GameView" specification="_2IqecKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KWggakFEeK3oZB5eR7Ndw" name="game" type="_19cF4KkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2KWggqkFEeK3oZB5eR7Ndw" type="_1-TokKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this.game = game;&#xD;
		this.input = new Scanner(System.in);&#xD;
		this.running = true;&#xD;
		this.manager = new GameManager();&#xD;
		this.makeTokenMove = false;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KXHkKkFEeK3oZB5eR7Ndw" name="run" specification="_1-VdwKkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>while(running) {&#xD;
			// Main game loop&#xD;
			update();&#xD;
			&#xD;
			// Check just in case tile move is first - this can happen from a saved game&#xD;
			if(game.getCurrentMove().equals(&quot;token&quot;)) {&#xD;
				startTokenMove();&#xD;
				startComputerMove();&#xD;
				continue;&#xD;
			}&#xD;
			&#xD;
			startTileMove();&#xD;
			&#xD;
			// Update interface to reflect move&#xD;
			update();&#xD;
			&#xD;
			startTokenMove();&#xD;
			startComputerMove();&#xD;
		}&#xD;
		&#xD;
		// Game loop closed, call clean up code&#xD;
		input.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KXHkakFEeK3oZB5eR7Ndw" name="startTileMove" specification="_1-VdwakFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>// Process player tile move&#xD;
		while(running) {&#xD;
			try {&#xD;
				promptTileMove();&#xD;
				break;&#xD;
			} catch(IllegalArgumentException e ) {&#xD;
				System.out.println(e.getMessage());&#xD;
				enterPrompt();&#xD;
				continue;&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		game.setCurrentMove(&quot;token&quot;);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KXHkqkFEeK3oZB5eR7Ndw" name="startTokenMove" specification="_1-VdwqkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>// Process player token move&#xD;
		makeTokenMove = true;&#xD;
		&#xD;
		while(makeTokenMove) {&#xD;
			try {&#xD;
				promptTokenMove();&#xD;
				&#xD;
				// Premature update to reflect new token position&#xD;
				update();&#xD;
				&#xD;
				// Check if token has landed on treasure&#xD;
				if(game.hasWon()) {&#xD;
					onTreasureChaseWin();&#xD;
					return;&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				// Invalid command passed, reset loop&#xD;
				System.out.println(e.getMessage());&#xD;
				enterPrompt();&#xD;
				continue;&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		game.setCurrentMove(&quot;computer&quot;);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KXHk6kFEeK3oZB5eR7Ndw" name="startComputerMove" specification="_1-WE0KkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>// Advance to next round by checking win, processing computer move, etc.&#xD;
		game.nextRound();&#xD;
		game.setCurrentMove(&quot;tile&quot;);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KXuoKkFEeK3oZB5eR7Ndw" name="promptTileMove" specification="_1-WE0akFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>System.out.println(&quot;Tile Move Commands:&quot;);&#xD;
		System.out.println(&quot;\trotate &lt;degrees>&quot;);&#xD;
		System.out.println(&quot;\tinsert row &lt;left/right> &lt;no>&quot;);&#xD;
		System.out.println(&quot;\tinsert column &lt;top/bottom> &lt;no>&quot;);&#xD;
		System.out.println(&quot;\thelp&quot;);&#xD;
		System.out.print(&quot;\nTile Move > &quot;);&#xD;
		&#xD;
		String in = input.nextLine();&#xD;
		String[] tokens = in.split(&quot; &quot;);&#xD;
		&#xD;
		// A tile move is either rotate, insert, save or exit&#xD;
		if(tokens[0].equals(&quot;rotate&quot;) || tokens[0].equals(&quot;save&quot;) || tokens[0].equals(&quot;help&quot;)) {&#xD;
			// When the player does a rotation, it does not count as a move, so ask for another tile move&#xD;
			// Likewise with save and help&#xD;
			parse(tokens);&#xD;
			update();&#xD;
			promptTileMove();&#xD;
		} else if(tokens[0].equals(&quot;insert&quot;) || tokens[0].equals(&quot;exit&quot;)) {&#xD;
			parse(tokens);&#xD;
		} else {&#xD;
			throw new IllegalArgumentException(&quot;Invalid tile move command: only rotate and insert allowed&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KXuoakFEeK3oZB5eR7Ndw" name="promptTokenMove" specification="_1-Wr4KkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>System.out.println(&quot;Token Move Commands:&quot;);&#xD;
		System.out.println(&quot;\tmove &lt;up/down/left/right>&quot;);&#xD;
		System.out.println(&quot;\tdone (end token move)&quot;);&#xD;
		System.out.println(&quot;\thelp&quot;);&#xD;
		System.out.print(&quot;\nToken Move > &quot;);&#xD;
		&#xD;
		String in = input.nextLine();&#xD;
		String[] tokens = in.split(&quot; &quot;);&#xD;
		&#xD;
		// A token move is move, save or exit&#xD;
		if(tokens[0].equals(&quot;save&quot;) || tokens[0].equals(&quot;help&quot;)) {&#xD;
			// When a player calls save or help, it doesn't take up a move&#xD;
			parse(tokens);&#xD;
			update();&#xD;
			promptTokenMove();&#xD;
		} else if(tokens[0].equals(&quot;move&quot;) || tokens[0].equals(&quot;done&quot;) || tokens[0].equals(&quot;exit&quot;)) {&#xD;
			parse(tokens);&#xD;
		} else {&#xD;
			throw new IllegalArgumentException(&quot;Invalid token move command: only move allowed&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KXuoqkFEeK3oZB5eR7Ndw" name="parse" specification="_1-XS8KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KXuo6kFEeK3oZB5eR7Ndw" name="inputArgs">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KXupKkFEeK3oZB5eR7Ndw" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>if(inputArgs[0].toLowerCase().equals(&quot;insert&quot;)) {&#xD;
			// Insertion command called&#xD;
			if(inputArgs.length &lt; 4) {&#xD;
				throw new IllegalArgumentException(&quot;Usage:\tinsert column &lt;top/bottom> &lt;no>\n\tinsert row &lt;left/right> &lt;no>&quot;);&#xD;
			}&#xD;
			&#xD;
			// Check if insertion into row or column&#xD;
			if(inputArgs[1].equals(&quot;column&quot;)) {&#xD;
				int column_no = 0;&#xD;
				&#xD;
				try {&#xD;
					column_no = Integer.parseInt(inputArgs[3]);&#xD;
				} catch(NumberFormatException e) {&#xD;
					throw new IllegalArgumentException(&quot;Invalid column number entered&quot;);&#xD;
				}&#xD;
				&#xD;
				// Check whether to push in from top or bottom&#xD;
				try {&#xD;
					if(inputArgs[2].equals(&quot;top&quot;)) {&#xD;
						game.updatePlayer(game.insertColumn(column_no, Direction.TOP, game.getPlayer()));&#xD;
					} else if(inputArgs[2].equals(&quot;bottom&quot;)) {&#xD;
						game.updatePlayer(game.insertColumn(column_no, Direction.BOTTOM, game.getPlayer()));&#xD;
					}&#xD;
				} catch(IllegalMoveException e) {&#xD;
					throw new IllegalArgumentException(e.getMessage());&#xD;
				}&#xD;
			} else if(inputArgs[1].equals(&quot;row&quot;)) {&#xD;
				int row_no = 0;&#xD;
				&#xD;
				try {&#xD;
					row_no = Integer.parseInt(inputArgs[3]);&#xD;
				} catch(NumberFormatException e) {&#xD;
					throw new IllegalArgumentException(&quot;Invalid row number entered&quot;);&#xD;
				}&#xD;
				&#xD;
				// Check whether to push in from left or right&#xD;
				try {&#xD;
					if(inputArgs[2].equals(&quot;left&quot;)) {&#xD;
						game.updatePlayer(game.insertRow(row_no, Direction.LEFT, game.getPlayer()));&#xD;
					} else if(inputArgs[2].equals(&quot;right&quot;)) {&#xD;
						game.updatePlayer(game.insertRow(row_no, Direction.RIGHT, game.getPlayer()));&#xD;
					}&#xD;
				} catch(IllegalMoveException e) {&#xD;
					throw new IllegalArgumentException(e.getMessage());&#xD;
				}&#xD;
			} else {&#xD;
				// Invalid argument passed&#xD;
				throw new IllegalArgumentException(&quot;Usage:\tinsert column &lt;top/bottom> &lt;no>\n\tinsert row &lt;left/right> &lt;no>&quot;);&#xD;
			}&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;rotate&quot;)) {&#xD;
			// Rotation command called&#xD;
			if(inputArgs.length == 2) {&#xD;
				// Rotate spare tile&#xD;
				try {&#xD;
					game.rotateTile(Integer.parseInt(inputArgs[1]));&#xD;
				} catch(NumberFormatException e) {&#xD;
					System.out.println(e.getMessage());&#xD;
					enterPrompt();&#xD;
				}&#xD;
			} else {&#xD;
				throw new IllegalArgumentException(&quot;Usage: rotate &lt;degrees>, where degrees is 90, 180 or 270&quot;);&#xD;
			}&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;move&quot;)) {&#xD;
			// Move command called&#xD;
			if(inputArgs.length &lt; 2) {&#xD;
				System.out.println(&quot;Usage: move &lt;up/down/left/right>&quot;);&#xD;
				enterPrompt();&#xD;
			} else {&#xD;
				try {&#xD;
					if(inputArgs[1].equals(&quot;up&quot;)) {&#xD;
						// Move up&#xD;
						game.moveTokenUp();&#xD;
					} else if(inputArgs[1].equals(&quot;down&quot;)) {&#xD;
						// Move down&#xD;
						game.moveTokenDown();&#xD;
					} else if(inputArgs[1].equals(&quot;left&quot;)) {&#xD;
						// Move left&#xD;
						game.moveTokenLeft();&#xD;
					} else if(inputArgs[1].equals(&quot;right&quot;)) {&#xD;
						// Move token right&#xD;
						game.moveTokenRight();&#xD;
					} else {&#xD;
						throw new IllegalArgumentException(&quot;Usage: move &lt;up/down/left/right>&quot;);&#xD;
					}&#xD;
				} catch(IllegalMoveException e) {&#xD;
					throw new IllegalArgumentException(e.getMessage());&#xD;
				}&#xD;
			}&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;done&quot;)) {&#xD;
			// User is done making token move&#xD;
			makeTokenMove = false;&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;save&quot;)) {&#xD;
			String gameName = inputArgs[1];&#xD;
			&#xD;
			try {&#xD;
				manager.save(Labyrinth.LOAD_PATH + gameName, game);&#xD;
				manager.addGameEntry(gameName);&#xD;
			} catch(IOException e) {&#xD;
				System.out.println(&quot;Couldn't save file: &quot; + e.getMessage());&#xD;
				enterPrompt();&#xD;
			}&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;help&quot;)) {&#xD;
			// Help command called, display available commands&#xD;
			System.out.println(&quot;All Command (all not neccessarily available):&quot;);&#xD;
			System.out.println(&quot;\trotate &lt;degrees>&quot;);&#xD;
			System.out.println(&quot;\tinsert row &lt;left/right> &lt;no>&quot;);&#xD;
			System.out.println(&quot;\tinsert column &lt;top/bottom> &lt;no>&quot;);&#xD;
			System.out.println(&quot;\tmove &lt;up/down/left/right>&quot;);&#xD;
			System.out.println(&quot;\tdone (end token move)&quot;);&#xD;
			System.out.println(&quot;\tsave &lt;game_name>&quot;);&#xD;
			System.out.println(&quot;\texit&quot;);&#xD;
			&#xD;
			enterPrompt();&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;exit&quot;)) {&#xD;
			// Exit command called&#xD;
			setRunning(false);&#xD;
			input.close();&#xD;
			System.exit(0);&#xD;
		} else {&#xD;
			throw new IllegalArgumentException(&quot;Invalid command passed: &quot; + inputArgs[0]);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KYVsKkFEeK3oZB5eR7Ndw" name="setRunning" specification="_1-X6AKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KYVsakFEeK3oZB5eR7Ndw" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>running = state;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KYVsqkFEeK3oZB5eR7Ndw" name="enterPrompt" specification="_1-X6AqkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>System.out.print(&quot;\nPlease press [ENTER] to continue... &quot;);&#xD;
		&#xD;
		input.nextLine();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KYVs6kFEeK3oZB5eR7Ndw" name="displayGameBoard" specification="_1-YhEKkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>// Get board details from game&#xD;
		int width = game.getBoard().getWidth();&#xD;
		int height = game.getBoard().getHeight();&#xD;
		&#xD;
		// Get the tiles from the board&#xD;
		Tile[][] tiles = game.getBoard().getTiles();&#xD;
		&#xD;
		// Form horizontal top border&#xD;
		String borderTop = &quot;   &quot; + Character.toString(CharacterElements.charBorderCornerTopLeft) +&#xD;
				new String(new char[9]).replace('\0', CharacterElements.charBorderHorizontal);&#xD;
		&#xD;
		for(int i = 1; i &lt; width; i++)&#xD;
			borderTop += new String(new char[7]).replace('\0', CharacterElements.charBorderHorizontal);&#xD;
		&#xD;
		borderTop += Character.toString(CharacterElements.charBorderCornerTopRight);&#xD;
		&#xD;
		// Display top border&#xD;
		System.out.println(borderTop);&#xD;
		&#xD;
		// Display each tile&#xD;
		for(int i = 0; i &lt; height; i++) {&#xD;
			// Form the row by concatenating each tile on the row together&#xD;
			// A tile is 7x5, so therefore consists of 5 row sections&#xD;
			&#xD;
			String number = &quot;&quot;;&#xD;
			&#xD;
			if((height - i) &lt; 10) {&#xD;
				number = Integer.toString(height - i) + &quot; &quot;;&#xD;
			}&#xD;
			else {&#xD;
				number = Integer.toString(height - i);&#xD;
			}&#xD;
			&#xD;
			String rowTop    = &quot;   &quot; + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			String rowTM     = &quot;   &quot; + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			String rowMiddle = &quot; &quot; + number + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			String rowMB     = &quot;   &quot; + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			String rowBottom = &quot;   &quot; + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			&#xD;
			for(int j = 0; j &lt; width; j++) {&#xD;
				// Split the tile up into its relevant sections&#xD;
				// tile[0] = top, tile[1] = top-middle&#xD;
				// tile[2] = middle, tile[3] = middle-bottom&#xD;
				// tile[4] = bottom&#xD;
				&#xD;
				String[] tile = tiles[i][j].getTileString();&#xD;
				&#xD;
				// Check which tile it is for correct border placement&#xD;
				if(j == (width - 1)) {&#xD;
					// Last tile on row requires a border&#xD;
					rowTop    += tile[0] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
					rowTM     += tile[1] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
					rowMiddle += tile[2] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
					rowMB     += tile[3] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
					rowBottom += tile[4] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
				}&#xD;
				else {&#xD;
					// A tile will be placed to the right of this tile, so skip border&#xD;
					rowTop    += tile[0];&#xD;
					rowTM     += tile[1];&#xD;
					rowMiddle += tile[2];&#xD;
					rowMB     += tile[3];&#xD;
					rowBottom += tile[4];&#xD;
				}&#xD;
			}&#xD;
			&#xD;
			// Output full row now&#xD;
			System.out.println(rowTop);&#xD;
			System.out.println(rowTM);&#xD;
			System.out.println(rowMiddle);&#xD;
			System.out.println(rowMB);&#xD;
			System.out.println(rowBottom);&#xD;
		}&#xD;
		&#xD;
		// Display bottom border&#xD;
		String numberBottom = &quot;        &quot;;&#xD;
		&#xD;
		for(int i = 0; i &lt; width; i++)&#xD;
			if((i + 1) &lt; 10)&#xD;
				numberBottom += Integer.toString(i + 1) + &quot;      &quot;;&#xD;
			else&#xD;
				numberBottom += Integer.toString(i + 1) + &quot;     &quot;;&#xD;
		&#xD;
		String borderBottom = borderTop.replace(CharacterElements.charBorderCornerTopLeft, CharacterElements.charBorderCornerBottomLeft);&#xD;
		borderBottom = borderBottom.replace(CharacterElements.charBorderCornerTopRight, CharacterElements.charBorderCornerBottomRight);&#xD;
		&#xD;
		System.out.println(borderBottom);&#xD;
		System.out.println(numberBottom);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KY8wKkFEeK3oZB5eR7Ndw" name="displayHUB" specification="_1-YhEakFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>Tile spareTile = game.getPlayer().getSpareTile();&#xD;
		String[] tileRows = spareTile.getTileString();&#xD;
		&#xD;
		String roundString = Integer.toString(game.getRound());&#xD;
		&#xD;
		// Determine rounding padding&#xD;
		if(game.getRound() &lt; 10)&#xD;
			// Prepend 4 zeros&#xD;
			roundString = &quot;0000&quot; + roundString;&#xD;
		else if(game.getRound() &lt; 100)&#xD;
			// Prepend 3 zeros&#xD;
			roundString = &quot;000&quot; + roundString;&#xD;
		else if(game.getRound() &lt; 1000)&#xD;
			// Prepend 2 zeros&#xD;
			roundString = &quot;00&quot; + roundString;&#xD;
		&#xD;
		// Score in Treasure Chase is rounds&#xD;
		System.out.println();&#xD;
		System.out.println(&quot;    ------------------- --------------- ---------------&quot;);&#xD;
		System.out.println(&quot;   |    SPARE  TILE    |     ROUND     |     SCORE     |&quot;);&#xD;
		System.out.println(&quot;   |===================|===============|===============|&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[0] + &quot;      |               |               |&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[1] + &quot;      |               |               |&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[2] + &quot;      |     &quot; + roundString + &quot;     |     &quot; + roundString + &quot;     |&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[3] + &quot;      |               |               |&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[4] + &quot;      |               |               |&quot;);&#xD;
		System.out.println(&quot;    ------------------- --------------- ---------------&quot;);&#xD;
		System.out.println(&quot;   |    LAST COMPUTER MOVE                             |&quot;);&#xD;
		System.out.println(&quot;   |===================================================|&quot;);&#xD;
		System.out.println(&quot;     &quot; + game.getComputerPlayer().getLastMove());&#xD;
		System.out.println(&quot;   |___________________________________________________|&quot;);&#xD;
		System.out.println();&#xD;
		&#xD;
		&#xD;
		System.out.println(&quot;DEBUG INFO:&quot;);&#xD;
		System.out.println(&quot;\tToken Position: (&quot; + game.getBoard().getTokenPos()[0] + &quot;,&quot; + game.getBoard().getTokenPos()[1] + &quot;)&quot;);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KY8wakFEeK3oZB5eR7Ndw" name="update" specification="_1-ZIIKkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>// Display the game board&#xD;
		displayGameBoard();&#xD;
		&#xD;
		// Display the HUB&#xD;
		displayHUB();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KY8wqkFEeK3oZB5eR7Ndw" name="onTreasureChaseWin" specification="_1-ZIIakFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>System.out.println(&quot;__   __             __                      _   _   _            _                                              \n&quot; +&#xD;
                        &quot;\\ \\ / /            / _|                    | | | | | |          | |                                           \n&quot; +&#xD;
                        &quot; \\ V /___  _   _  | |_ ___  _   _ _ __   __| | | |_| |__   ___  | |_ _ __ ___  __ _ ___ _   _ _ __ ___         \n&quot; +&#xD;
                        &quot;  \\ // _ \\| | | | |  _/ _ \\| | | | '_ \\ / _` | | __| '_ \\ / _ \\ | __| '__/ _ \\/ _` / __| | | | '__/ _ \\ \n&quot; +&#xD;
                        &quot;  | | (_) | |_| | | || (_) | |_| | | | | (_| | | |_| | | |  __/ | |_| | |  __/ (_| \\__ \\ |_| | | |  __/_ _ _  \n&quot; +&#xD;
                        &quot;  \\_/\\___/ \\__,_| |_| \\___/ \\__,_|_| |_|\\__,_|  \\__|_| |_|\\___|  \\__|_|  \\___|\\__,_|___/\\__,_|_|  \\___(_|_|_) \n&quot;);&#xD;
                                                                                                          &#xD;
                                                                                                          &#xD;
		&#xD;
		// Wait 2 seconds before final congratulation message&#xD;
		try { Thread.sleep(2000); } catch(InterruptedException e) {}&#xD;
		&#xD;
		System.out.println(&quot;     _____ _____ _   _ _____ ______  ___ _____ _   _ _       ___ _____ _____ _____ _   _  _____ _ _           \n&quot; +&#xD;
                        &quot;    /  __ \\  _  | \\ | |  __ \\| ___ \\/ _ \\_   _| | | | |     / _ \\_   _|_   _|  _  | \\ | |/  ___| | |   \n&quot; +&#xD;
                        &quot;    | /  \\/ | | |  \\| | |  \\/| |_/ / /_\\ \\| | | | | | |    / /_\\ \\| |   | | | | | |  \\| |\\ `--.| | | \n&quot; +&#xD;
                        &quot;    | |   | | | | . ` | | __ |    /|  _  || | | | | | |    |  _  || |   | | | | | | . ` | `--. \\ | |         \n&quot; +&#xD;
                        &quot;    | \\__/\\ \\_/ / |\\  | |_\\ \\| |\\ \\| | | || | | |_| | |____| | | || |  _| |_\\ \\_/ / |\\  |/\\__/ /_|_| \n&quot; +&#xD;
                        &quot;     \\____/\\___/\\_| \\_/\\____/\\_| \\_\\_| |_/\\_/  \\___/\\_____/\\_| |_/\\_/  \\___/ \\___/\\_| \\_/\\____/(_|_)  \n&quot;);&#xD;
                                                                                             &#xD;
                                                                                             &#xD;
		&#xD;
		System.out.println();&#xD;
		System.out.println(&quot;Your final score: &quot; + game.getPlayer().getScore());&#xD;
		System.out.println();&#xD;
		&#xD;
		// Leaderboard code&#xD;
		promptLeaderboard();&#xD;
		enterPrompt();&#xD;
		&#xD;
		System.out.println(&quot;Thanks for playing, goodbye!&quot;);&#xD;
		System.exit(0);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KY8w6kFEeK3oZB5eR7Ndw" name="promptLeaderboard" specification="_1-ZIIqkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>String name;&#xD;
		String choice;&#xD;
		&#xD;
		System.out.print(&quot;Do you want to submit score (Y/N)? &quot;);&#xD;
		choice = input.nextLine().toLowerCase();&#xD;
		&#xD;
		if(choice.equals(&quot;y&quot;)) {&#xD;
			System.out.print(&quot;Enter name: &quot;);&#xD;
			name = input.nextLine();&#xD;
			&#xD;
			while(name.length() > 14) {&#xD;
				System.out.println(&quot;Name must not exceed 14 characters!&quot;);&#xD;
				System.out.print(&quot;Enter name: &quot;);&#xD;
				name = input.nextLine();&#xD;
			}&#xD;
			&#xD;
			game.getLeaderboard().submit(name, game.getPlayer().getScore());&#xD;
			System.out.println(&quot;Score submitted! Here is the current top 10 now: \n&quot;);&#xD;
			&#xD;
			displayLeaderboard(10);&#xD;
			&#xD;
			try {&#xD;
				game.getLeaderboard().save();&#xD;
			} catch(Exception e) {&#xD;
				System.out.println(&quot;Couldn't save score to leaderboard file. Score will NOT be saved.&quot;);&#xD;
			}&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KZj0KkFEeK3oZB5eR7Ndw" name="displayLeaderboard" specification="_1-ZvMKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KZj0akFEeK3oZB5eR7Ndw" name="entries">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>Leaderboard l = game.getLeaderboard();&#xD;
		ArrayList&lt;String> names = l.getNames();&#xD;
		ArrayList&lt;Integer> scores = l.getScores();&#xD;
		&#xD;
		System.out.println(&quot; -------------------- ------------- &quot;);&#xD;
		System.out.println(&quot;|        NAME        |    SCORE    |&quot;);&#xD;
		System.out.println(&quot;|====================|=============|&quot;);&#xD;
		&#xD;
		if(names.size() &lt; entries)&#xD;
			entries = names.size();&#xD;
		&#xD;
		for(int i = 0; i &lt; entries; i++) {&#xD;
			// Form name entry&#xD;
			String entry = &quot;| &quot; + (i + 1) + &quot;. &quot; + names.get(i);&#xD;
			&#xD;
			while(entry.length() &lt; 21) {&#xD;
				// Pad the name out to 21 characters to fit in field&#xD;
				entry += &quot; &quot;;&#xD;
			}&#xD;
			&#xD;
			entry += &quot;|&quot;;&#xD;
			&#xD;
			// Form score entry&#xD;
			entry += &quot; &quot; + scores.get(i);&#xD;
			&#xD;
			while(entry.length() &lt; (21 + 14)) {&#xD;
				// Pad the score out to 21 further characters to fit in field&#xD;
				entry += &quot; &quot;;&#xD;
			}&#xD;
			&#xD;
			entry += &quot;|&quot;;&#xD;
			&#xD;
			System.out.println(entry);&#xD;
		}&#xD;
		&#xD;
		// Form bottom&#xD;
		System.out.println(&quot; -------------------- ------------- &quot;);&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_1-VdwKkFEeK3oZB5eR7Ndw" name="run" method="_2KXHkKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KxXQqkFEeK3oZB5eR7Ndw">
                <body>Run the user interface.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-VdwakFEeK3oZB5eR7Ndw" name="startTileMove" method="_2KXHkakFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KxXQ6kFEeK3oZB5eR7Ndw">
                <body>Start the tile move.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-VdwqkFEeK3oZB5eR7Ndw" name="startTokenMove" method="_2KXHkqkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KxXRKkFEeK3oZB5eR7Ndw">
                <body>Start the token move.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-WE0KkFEeK3oZB5eR7Ndw" name="startComputerMove" method="_2KXHk6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KxXRakFEeK3oZB5eR7Ndw">
                <body>Start the computer move.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-WE0akFEeK3oZB5eR7Ndw" name="promptTileMove" method="_2KXuoKkFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KxXRqkFEeK3oZB5eR7Ndw">
                <body>Prompt the user for their tile move input.&#xD;
	 * &#xD;
	 * @throws IllegalArgumentException Thrown when an invalid command is passed as a value.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-Wr4KkFEeK3oZB5eR7Ndw" name="promptTokenMove" method="_2KXuoakFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-UKkFEeK3oZB5eR7Ndw">
                <body>Prompt the user for their token move input.&#xD;
	 * &#xD;
	 * @throws IllegalArgumentException Thrown when an invalid command is passed as a value.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-XS8KkFEeK3oZB5eR7Ndw" name="parse" method="_2KXuoqkFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-UakFEeK3oZB5eR7Ndw">
                <body>Parse user input and perform appropriate operation(s).&#xD;
	 * &#xD;
	 * @param inputArgs The list of arguments the user passed.&#xD;
	 * @throws IllegalArgumentException Thrown when an invalid argument is passed with a command.</body>
              </ownedComment>
              <ownedParameter xmi:id="_1-XS8akFEeK3oZB5eR7Ndw" name="inputArgs">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_1-XS8qkFEeK3oZB5eR7Ndw" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_1-X6AKkFEeK3oZB5eR7Ndw" name="setRunning" method="_2KYVsKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-UqkFEeK3oZB5eR7Ndw">
                <body>Set whether or not the user interface is running.</body>
              </ownedComment>
              <ownedParameter xmi:id="_1-X6AakFEeK3oZB5eR7Ndw" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_1-X6AqkFEeK3oZB5eR7Ndw" name="enterPrompt" method="_2KYVsqkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-U6kFEeK3oZB5eR7Ndw">
                <body>Display and wait for enter. Useful to pause states until user is ready.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-YhEKkFEeK3oZB5eR7Ndw" name="displayGameBoard" method="_2KYVs6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-VKkFEeK3oZB5eR7Ndw">
                <body>Draw the game board.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-YhEakFEeK3oZB5eR7Ndw" name="displayHUB" method="_2KY8wKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-VakFEeK3oZB5eR7Ndw">
                <body>Display the game HUB.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-ZIIKkFEeK3oZB5eR7Ndw" name="update" method="_2KY8wakFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-VqkFEeK3oZB5eR7Ndw">
                <body>Update the interface.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-ZIIakFEeK3oZB5eR7Ndw" name="onTreasureChaseWin" method="_2KY8wqkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-V6kFEeK3oZB5eR7Ndw">
                <body>Called in the event the player has won (i.e. completed the game mode objective(s)).</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-ZIIqkFEeK3oZB5eR7Ndw" name="promptLeaderboard" method="_2KY8w6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kx-WKkFEeK3oZB5eR7Ndw">
                <body>Prompt the user for leaderboard entry.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-ZvMKkFEeK3oZB5eR7Ndw" name="displayLeaderboard" method="_2KZj0KkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KylYKkFEeK3oZB5eR7Ndw">
                <body>Display the leaderboard.</body>
              </ownedComment>
              <ownedParameter xmi:id="_1-ZvMakFEeK3oZB5eR7Ndw" name="entries">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_2IqecKkFEeK3oZB5eR7Ndw" name="GameView" method="_2KWggKkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_2IrFgKkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_2IrFgakFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2KxXQakFEeK3oZB5eR7Ndw">
                <body>Construct a new user interface to interface with a valid&#xD;
	 * game mode.&#xD;
	 * &#xD;
	 * @param game The game mode object to manipulate.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2IqecakFEeK3oZB5eR7Ndw" name="game" type="_19cF4KkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2IrFgqkFEeK3oZB5eR7Ndw" type="_1-TokKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_1-eAoKkFEeK3oZB5eR7Ndw" name="Window">
            <ownedComment xmi:id="_2KylYakFEeK3oZB5eR7Ndw">
              <body>Represents a basic text-based graphical window with no&#xD;
user interaction.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.19042013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_2JmSkKkFEeK3oZB5eR7Ndw" name="title" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2Jm5oKkFEeK3oZB5eR7Ndw" name="layoutFile">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2Jm5oakFEeK3oZB5eR7Ndw" name="window" visibility="private" type="_2IsToKkFEeK3oZB5eR7Ndw" association="_2LPRUakFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JoHwakFEeK3oZB5eR7Ndw" name="contents" visibility="protected" type="_2IsToKkFEeK3oZB5eR7Ndw" association="_2LP4YakFEeK3oZB5eR7Ndw"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KaK4KkFEeK3oZB5eR7Ndw" name="Window" specification="_1-fOwKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KaK4akFEeK3oZB5eR7Ndw" type="_1-eAoKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>title = &quot;&quot;;&#xD;
		layoutFile = &quot;media/window_default&quot;;&#xD;
		window = new LinkedList&lt;String>();&#xD;
		contents = new LinkedList&lt;String>();&#xD;
		&#xD;
		try {&#xD;
			refresh();&#xD;
		} catch(Exception e) {&#xD;
			System.out.println(&quot;Fatal Error: Couldn't load default window layout.&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kax8KkFEeK3oZB5eR7Ndw" name="Window" specification="_1-f10KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2Kax8akFEeK3oZB5eR7Ndw" name="title">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2Kax8qkFEeK3oZB5eR7Ndw" type="_1-eAoKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this();&#xD;
		this.title = title;&#xD;
		clearContents();&#xD;
		&#xD;
		try {&#xD;
			refresh();&#xD;
		} catch(Exception e) {&#xD;
			System.out.println(&quot;Fatal Error: Couldn't load default window layout.&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2Kax86kFEeK3oZB5eR7Ndw" name="display" specification="_1-gc4KkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>for(String line : window) {&#xD;
			if(line.contains(&quot;%&quot;)) {&#xD;
				// Content starts wherever the % symbol is&#xD;
				for(String content : contents) {&#xD;
					// Add each entry in content to the window by adding it into the line&#xD;
					String[] split = line.split(&quot;%&quot;);&#xD;
					&#xD;
					int offset = content.length() - 1;&#xD;
					String newLine = split[0] + content + split[1].substring(offset, split[1].length());&#xD;
					System.out.println(newLine);&#xD;
				}&#xD;
			} else {&#xD;
				System.out.println(line);&#xD;
			}&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KbZAKkFEeK3oZB5eR7Ndw" name="refresh" specification="_1-gc4akFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>BufferedReader reader = new BufferedReader(new FileReader(layoutFile));&#xD;
		String line = reader.readLine();&#xD;
		window = new LinkedList&lt;String>();&#xD;
		&#xD;
		while(line != null) {&#xD;
			// Do some replacements&#xD;
			// [W] = wall block&#xD;
			line = line.replace(&quot;[W]&quot;, Character.toString(CharacterElements.charBlock));&#xD;
			window.add(line);&#xD;
			&#xD;
			line = reader.readLine();&#xD;
		}&#xD;
		reader.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KbZAakFEeK3oZB5eR7Ndw" name="addContent" specification="_1-hD8KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KbZAqkFEeK3oZB5eR7Ndw" name="content">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>if(content.length() > 72)&#xD;
			throw new IllegalArgumentException(&quot;Content must not exceed 72 characters.&quot;);&#xD;
		&#xD;
		if(content.isEmpty())&#xD;
			contents.add(&quot; &quot;);&#xD;
		else&#xD;
			contents.add(content);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KbZA6kFEeK3oZB5eR7Ndw" name="clearContents" specification="_1-hrAakFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>contents = new LinkedList&lt;String>();&#xD;
		&#xD;
		// Add title to contents&#xD;
		if(!title.isEmpty()) {&#xD;
			contents.add(title);&#xD;
			contents.add(&quot;------------------------------------------------------------------------&quot;);&#xD;
			contents.add(&quot; &quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_1-fOwKkFEeK3oZB5eR7Ndw" name="Window" method="_2KaK4KkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_1-fOwakFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_1-fOwqkFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2KylYqkFEeK3oZB5eR7Ndw">
                <body>Construct a default window.</body>
              </ownedComment>
              <ownedParameter xmi:id="_1-fOw6kFEeK3oZB5eR7Ndw" type="_1-eAoKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_1-f10KkFEeK3oZB5eR7Ndw" name="Window" method="_2Kax8KkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_1-f10qkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_1-f106kFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2KylY6kFEeK3oZB5eR7Ndw">
                <body>Construct a window with a custom title.&#xD;
	 * &#xD;
	 * @param title The title of the window.</body>
              </ownedComment>
              <ownedParameter xmi:id="_1-f10akFEeK3oZB5eR7Ndw" name="title">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_1-f11KkFEeK3oZB5eR7Ndw" type="_1-eAoKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_1-gc4KkFEeK3oZB5eR7Ndw" name="display" method="_2Kax86kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KylZKkFEeK3oZB5eR7Ndw">
                <body>Displays the contents of the window.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-gc4akFEeK3oZB5eR7Ndw" name="refresh" method="_2KbZAKkFEeK3oZB5eR7Ndw" raisedException="_2IQOwakFEeK3oZB5eR7Ndw _2ISD8akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KylZakFEeK3oZB5eR7Ndw">
                <body>Refresh the window contents by internally redrawing the window.&#xD;
	 * This should be called after setting a new layout path.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_1-hD8KkFEeK3oZB5eR7Ndw" name="addContent" method="_2KbZAakFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KzMcKkFEeK3oZB5eR7Ndw">
                <body>Add a line of content to the window. Maximum length should be 72 characters to ensure &#xD;
	 * consistency.&#xD;
	 * &#xD;
	 * @param content The line of content to add to the window.&#xD;
	 * @throws IllegalArgumentException If the content passed is greater than 72 characters.</body>
              </ownedComment>
              <ownedParameter xmi:id="_1-hrAKkFEeK3oZB5eR7Ndw" name="content">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_1-hrAakFEeK3oZB5eR7Ndw" name="clearContents" method="_2KbZA6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KzMcakFEeK3oZB5eR7Ndw">
                <body>Clear the contents of the window.</body>
              </ownedComment>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LODMakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LODMqkFEeK3oZB5eR7Ndw _2JhaEKkFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LODMqkFEeK3oZB5eR7Ndw" name="" type="_1-TokKkFEeK3oZB5eR7Ndw" association="_2LODMakFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LOqQKkFEeK3oZB5eR7Ndw" name="" memberEnd="_2LOqQakFEeK3oZB5eR7Ndw _2JioMKkFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LOqQakFEeK3oZB5eR7Ndw" name="" type="_1-TokKkFEeK3oZB5eR7Ndw" association="_2LOqQKkFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LOqQ6kFEeK3oZB5eR7Ndw" name="" memberEnd="_2LOqRKkFEeK3oZB5eR7Ndw _2JjPQKkFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LOqRKkFEeK3oZB5eR7Ndw" name="" type="_1-TokKkFEeK3oZB5eR7Ndw" association="_2LOqQ6kFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LPRUakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LPRUqkFEeK3oZB5eR7Ndw _2Jm5oakFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LPRUqkFEeK3oZB5eR7Ndw" name="" type="_1-eAoKkFEeK3oZB5eR7Ndw" association="_2LPRUakFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LP4YakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LP4YqkFEeK3oZB5eR7Ndw _2JoHwakFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LP4YqkFEeK3oZB5eR7Ndw" name="" type="_1-eAoKkFEeK3oZB5eR7Ndw" association="_2LP4YakFEeK3oZB5eR7Ndw"/>
          </packagedElement>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_11lxcKkFEeK3oZB5eR7Ndw" name="game">
          <packagedElement xmi:type="uml:Package" xmi:id="_110a8akFEeK3oZB5eR7Ndw" name="modes">
            <packagedElement xmi:type="uml:Interface" xmi:id="_19cF4KkFEeK3oZB5eR7Ndw" name="GameMode">
              <ownedComment xmi:id="_2Kts5KkFEeK3oZB5eR7Ndw">
                <body>Represents a general game mode.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.01042013&#xD;
 *</body>
              </ownedComment>
              <ownedAttribute xmi:id="_19jaoKkFEeK3oZB5eR7Ndw" name="board" type="_18AigKkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LGHYKkFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_19kBsKkFEeK3oZB5eR7Ndw" name="player" type="_18rQ4KkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LGucakFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_19kowKkFEeK3oZB5eR7Ndw" name="round">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_19l24KkFEeK3oZB5eR7Ndw" name="settings" type="_181B4KkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LHVgakFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_19nFAakFEeK3oZB5eR7Ndw" name="currentMove" isReadOnly="true">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedAttribute>
              <ownedOperation xmi:id="_19cs8KkFEeK3oZB5eR7Ndw" name="moveTokenUp" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2Kts5akFEeK3oZB5eR7Ndw">
                  <body>Move the token up a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_19dUAKkFEeK3oZB5eR7Ndw" name="moveTokenDown" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2Kts5qkFEeK3oZB5eR7Ndw">
                  <body>Move the token down a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_19d7EKkFEeK3oZB5eR7Ndw" name="moveTokenLeft" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KuT8KkFEeK3oZB5eR7Ndw">
                  <body>Move the token left a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_19eiIKkFEeK3oZB5eR7Ndw" name="moveTokenRight" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KuT8akFEeK3oZB5eR7Ndw">
                  <body>Move the token right a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_19fJMKkFEeK3oZB5eR7Ndw" name="rotateTile" raisedException="_2I-AcKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KuT8qkFEeK3oZB5eR7Ndw">
                  <body>Rotate the spare tile by a particular angle.&#xD;
	 * &#xD;
	 * @param angle The angle to rotate the spare tile by.&#xD;
	 * @throws NumberFormatException When angle is not 90, 180 or 270.</body>
                </ownedComment>
                <ownedParameter xmi:id="_19fJMakFEeK3oZB5eR7Ndw" name="angle">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_19iMgKkFEeK3oZB5eR7Ndw" name="nextRound">
                <ownedComment xmi:id="_2KuT9qkFEeK3oZB5eR7Ndw">
                  <body>Transition to the next round.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_19izkKkFEeK3oZB5eR7Ndw" name="hasWon">
                <ownedComment xmi:id="_2KuT96kFEeK3oZB5eR7Ndw">
                  <body>Check if the user has won the game.</body>
                </ownedComment>
                <ownedParameter xmi:id="_19izkakFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_19kBsakFEeK3oZB5eR7Ndw" name="getComputerPlayer">
                <ownedComment xmi:id="_2Ku7AKkFEeK3oZB5eR7Ndw">
                  <body>Get the active computer player opponent.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IdqIqkFEeK3oZB5eR7Ndw" type="_18K6kKkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_19lP0KkFEeK3oZB5eR7Ndw" name="getLeaderboard">
                <ownedComment xmi:id="_2Ku7AakFEeK3oZB5eR7Ndw">
                  <body>Get the active leaderboard.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IdqI6kFEeK3oZB5eR7Ndw" type="_18hf4KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_19md8KkFEeK3oZB5eR7Ndw" name="setCurrentMove">
                <ownedComment xmi:id="_2Ku7AqkFEeK3oZB5eR7Ndw">
                  <body>Set the current move of the game.</body>
                </ownedComment>
                <ownedParameter xmi:id="_19nFAKkFEeK3oZB5eR7Ndw" name="move">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_2Ib08KkFEeK3oZB5eR7Ndw" name="insertRow" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KuT86kFEeK3oZB5eR7Ndw">
                  <body>Insert the spare tile into the specified row.&#xD;
	 * &#xD;
	 * @param row The row to insert the spare tile into.&#xD;
	 * @param direc The direction from which to insert the tile into.&#xD;
	 * @param performer The player who is performing the move.&#xD;
	 * @return The newly updated player with increased score/moves and spare tile based on performer.&#xD;
	 * @throws IllegalMoveException When the move cannot be accomplished due to immovable tiles, etc.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IccAKkFEeK3oZB5eR7Ndw" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2IccAakFEeK3oZB5eR7Ndw" name="direc" type="_18VSoKkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IccAqkFEeK3oZB5eR7Ndw" name="performer" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IccA6kFEeK3oZB5eR7Ndw" type="_18rQ4KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2IdDEKkFEeK3oZB5eR7Ndw" name="insertColumn" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KuT9KkFEeK3oZB5eR7Ndw">
                  <body>Insert the spare tile into the specified column.&#xD;
	 * &#xD;
	 * @param column The column to insert the spare tile into.&#xD;
	 * @param direc The direction from which to insert the tile into.&#xD;
	 * @param performer The player who is performing the move.&#xD;
	 * @return The newly updated player with increased score/moves and spare tile based on performer.&#xD;
	 * @throws IllegalMoveException When the move cannot be accomplished due to immovable tiles, etc.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IdDEakFEeK3oZB5eR7Ndw" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2IdDEqkFEeK3oZB5eR7Ndw" name="direc" type="_18VSoKkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IdDE6kFEeK3oZB5eR7Ndw" name="performer" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IdDFKkFEeK3oZB5eR7Ndw" type="_18rQ4KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2IdqIKkFEeK3oZB5eR7Ndw" name="updatePlayer">
                <ownedComment xmi:id="_2KuT9akFEeK3oZB5eR7Ndw">
                  <body>Update the player with a new player.&#xD;
	 * &#xD;
	 * @param p The new player.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IdqIakFEeK3oZB5eR7Ndw" name="p" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_19w2AKkFEeK3oZB5eR7Ndw" clientDependency="_2IgtcKkFEeK3oZB5eR7Ndw" name="TreasureChase">
              <ownedComment xmi:id="_2Ku7A6kFEeK3oZB5eR7Ndw">
                <body>Represents the Treasure Chase game mode.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.01042013&#xD;
 *</body>
              </ownedComment>
              <ownedAttribute xmi:id="_2JY3MKkFEeK3oZB5eR7Ndw" name="player" type="_18rQ4KkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LK_46kFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JY3MakFEeK3oZB5eR7Ndw" name="board" type="_18AigKkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LLm8akFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JZeQKkFEeK3oZB5eR7Ndw" name="leaderboard" visibility="private" type="_18hf4KkFEeK3oZB5eR7Ndw" association="_2LMOAakFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JZeQqkFEeK3oZB5eR7Ndw" name="round">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_2JaFUKkFEeK3oZB5eR7Ndw" name="settings" type="_181B4KkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LM1EKkFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JaFUakFEeK3oZB5eR7Ndw" name="computer" visibility="private" type="_18K6kKkFEeK3oZB5eR7Ndw" association="_2LM1E6kFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JasYKkFEeK3oZB5eR7Ndw" name="rand" visibility="private" type="_2IHE0KkFEeK3oZB5eR7Ndw" association="_2LNcIakFEeK3oZB5eR7Ndw"/>
              <ownedAttribute xmi:id="_2JasYqkFEeK3oZB5eR7Ndw" name="currentMove" isReadOnly="true">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedAttribute>
              <interfaceRealization xmi:id="_2IgtcKkFEeK3oZB5eR7Ndw" client="_19w2AKkFEeK3oZB5eR7Ndw" supplier="_19cF4KkFEeK3oZB5eR7Ndw" contract="_19cF4KkFEeK3oZB5eR7Ndw"/>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KPy0KkFEeK3oZB5eR7Ndw" name="TreasureChase" specification="_2Ih7kKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KPy0akFEeK3oZB5eR7Ndw" name="settings" type="_181B4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KPy0qkFEeK3oZB5eR7Ndw" type="_19w2AKkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>this.player = new Player();&#xD;
		this.leaderboard = new Leaderboard(settings.getLeaderboard());&#xD;
		this.settings = settings;&#xD;
		this.board = new Board(settings.getColumns(), settings.getRows());&#xD;
		this.computer = new ComputerPlayer(this.board);&#xD;
		&#xD;
		// Set a random tile on the board to contain treasure&#xD;
		this.rand = new Random();&#xD;
		int rCol = rand.nextInt(settings.getColumns()) + 1;&#xD;
		int rRow = rand.nextInt(settings.getRows()) + 1;&#xD;
		&#xD;
		// Do not include (1,1)&#xD;
		while(rCol == 1 &amp;&amp; rRow == 1) {&#xD;
			rCol = rand.nextInt(settings.getColumns()) + 1;&#xD;
			rRow = rand.nextInt(settings.getRows()) + 1; &#xD;
		}&#xD;
		&#xD;
		this.board.getTile(rCol, rRow).setTreasure(true);&#xD;
		this.board.setTreasurePos(rCol, rRow);&#xD;
		&#xD;
		this.currentMove = &quot;tile&quot;;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KQZ4KkFEeK3oZB5eR7Ndw" name="moveTokenUp" specification="_190gYKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>int newRow = 0;&#xD;
		int tokenPosCol = board.getTokenPos()[0];&#xD;
		int tokenPosRow = board.getTokenPos()[1];&#xD;
		&#xD;
		// Check if token will go over the board&#xD;
		if(tokenPosRow == board.getHeight()) {&#xD;
			// Make sure there isn't a wall blocking movement&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getNorth() ||&#xD;
					!board.getTile(tokenPosCol, 1).getSouth()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
			// Transition token over board Pacman style&#xD;
			newRow = 1;&#xD;
		}&#xD;
		else {&#xD;
			// Won't go over board, but we need to check if a wall is blocking movement&#xD;
			newRow = tokenPosRow + 1;&#xD;
			&#xD;
			// Check if current tile north entry is available, and new tile south&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getNorth() ||&#xD;
					!board.getTile(tokenPosCol, newRow).getSouth()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Move token :)&#xD;
		board.getTile(tokenPosCol, tokenPosRow).setToken(false);&#xD;
		board.setTokenPos(tokenPosCol, newRow);&#xD;
		board.getTile(board.getTokenPos()[0], board.getTokenPos()[1]).setToken(true);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KQZ4akFEeK3oZB5eR7Ndw" name="moveTokenDown" specification="_191HcKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>int newRow = 0;&#xD;
		int tokenPosCol = board.getTokenPos()[0];&#xD;
		int tokenPosRow = board.getTokenPos()[1];&#xD;
		&#xD;
		// Check if token will go over the board&#xD;
		if(tokenPosRow == 1) {&#xD;
			// Make sure there isn't a wall blocking movement&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getSouth() ||&#xD;
					!board.getTile(tokenPosCol, board.getHeight()).getNorth()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
			// Transition token over board Pacman style&#xD;
			newRow = board.getHeight();&#xD;
		}&#xD;
		else {&#xD;
			// Won't go over board, but we need to check if a wall is blocking movement&#xD;
			newRow = tokenPosRow - 1;&#xD;
			&#xD;
			// Check if current tile north entry is available, and new tile south&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getSouth() ||&#xD;
					!board.getTile(tokenPosCol, newRow).getNorth()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Move token :)&#xD;
		board.getTile(tokenPosCol, tokenPosRow).setToken(false);&#xD;
		board.setTokenPos(tokenPosCol, newRow);&#xD;
		board.getTile(board.getTokenPos()[0], board.getTokenPos()[1]).setToken(true);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KQZ4qkFEeK3oZB5eR7Ndw" name="moveTokenLeft" specification="_191ugKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>int newCol = 0;&#xD;
		int tokenPosCol = board.getTokenPos()[0];&#xD;
		int tokenPosRow = board.getTokenPos()[1];&#xD;
		&#xD;
		// Check if token will go over the board&#xD;
		if(tokenPosCol == 1) {&#xD;
			// Make sure there isn't a wall blocking movement&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getWest() ||&#xD;
					!board.getTile(board.getWidth(), tokenPosRow).getEast()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
			// Transition token over board Pacman style&#xD;
			newCol = board.getWidth();&#xD;
		}&#xD;
		else {&#xD;
			// Won't go over board, but we need to check if a wall is blocking movement&#xD;
			newCol = tokenPosCol - 1;&#xD;
			&#xD;
			// Check if current tile north entry is available, and new tile south&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getWest() ||&#xD;
					!board.getTile(newCol, tokenPosRow).getEast()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Move token :)&#xD;
		board.getTile(tokenPosCol, tokenPosRow).setToken(false);&#xD;
		board.setTokenPos(newCol, tokenPosRow);&#xD;
		board.getTile(board.getTokenPos()[0], board.getTokenPos()[1]).setToken(true);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KQZ46kFEeK3oZB5eR7Ndw" name="moveTokenRight" specification="_1928oKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>int newCol = 0;&#xD;
		int tokenPosCol = board.getTokenPos()[0];&#xD;
		int tokenPosRow = board.getTokenPos()[1];&#xD;
		&#xD;
		// Check if token will go over the board&#xD;
		if(tokenPosCol == board.getWidth()) {&#xD;
			// Make sure there isn't a wall blocking movement&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getEast() ||&#xD;
					!board.getTile(board.getWidth(), tokenPosRow).getWest()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
			// Transition token over board Pacman style&#xD;
			newCol = 1;&#xD;
		}&#xD;
		else {&#xD;
			// Won't go over board, but we need to check if a wall is blocking movement&#xD;
			newCol = tokenPosCol + 1;&#xD;
			&#xD;
			// Check if current tile north entry is available, and new tile south&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getEast() ||&#xD;
					!board.getTile(newCol, tokenPosRow).getWest()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Move token :)&#xD;
		board.getTile(tokenPosCol, tokenPosRow).setToken(false);&#xD;
		board.setTokenPos(newCol, tokenPosRow);&#xD;
		board.getTile(board.getTokenPos()[0], board.getTokenPos()[1]).setToken(true);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KRA8KkFEeK3oZB5eR7Ndw" name="rotateTile" specification="_193jsKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KRA8akFEeK3oZB5eR7Ndw" name="angle">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <language>java</language>
                <body>if(angle &lt; 0 || angle > 270)&#xD;
			// Angle is out of bounds&#xD;
			throw new NumberFormatException(&quot;Angle must either be 90, 180 or 270&quot;);&#xD;
		&#xD;
		if((angle % 90) != 0)&#xD;
			// Angle isn't divisible by 90&#xD;
			throw new NumberFormatException(&quot;Angle must either be 90, 180 or 270&quot;);&#xD;
		&#xD;
		int currAngle = RotationAngle.convertToInt(player.getSpareTile().getRotation());&#xD;
		RotationAngle newAngle = RotationAngle.convertFromInt((angle + currAngle) % 360);&#xD;
		player.getSpareTile().setRotation(newAngle);&#xD;
		&#xD;
		// Update player move&#xD;
		player.updateLastMove(&quot;rotate &quot; + angle);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KRA8qkFEeK3oZB5eR7Ndw" name="insertRow" specification="_2IiioKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KRA86kFEeK3oZB5eR7Ndw" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2KRA9KkFEeK3oZB5eR7Ndw" name="direc" type="_18VSoKkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KRA9akFEeK3oZB5eR7Ndw" name="performer" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KRA9qkFEeK3oZB5eR7Ndw" type="_18rQ4KkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>// Check first if move is inserting back into same place&#xD;
		String[] lastPlayerMove = performer.getLastMove().split(&quot; &quot;);&#xD;
		&#xD;
		if(lastPlayerMove.length == 4) {&#xD;
			// Valid insert move was last made, do some further checking&#xD;
			if(lastPlayerMove[0].equals(&quot;insert&quot;) &amp;&amp; &#xD;
					lastPlayerMove[1].equals(&quot;row&quot;) &amp;&amp; &#xD;
					lastPlayerMove[3].equals(Integer.toString(row))) {&#xD;
				if(direc == Direction.LEFT) {&#xD;
					// Can't insert from right this time&#xD;
					if(lastPlayerMove[2].equals(&quot;right&quot;)) {&#xD;
						throw new IllegalMoveException(&quot;Can't insert tile back into same position&quot;);&#xD;
					}&#xD;
				} else if(direc == Direction.RIGHT) {&#xD;
					// Can't insert from left this time&#xD;
					if(lastPlayerMove[2].equals(&quot;left&quot;)) {&#xD;
						throw new IllegalMoveException(&quot;Can't insert tile back into same position&quot;);&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
			&#xD;
		Tile newSpareTile = null;&#xD;
		&#xD;
		if(direc == Direction.LEFT)&#xD;
			newSpareTile = insertTileRowLeft(row, performer.getSpareTile());&#xD;
		else if(direc == Direction.RIGHT)&#xD;
			newSpareTile = insertTileRowRight(row, performer.getSpareTile());&#xD;
		else&#xD;
			throw new IllegalMoveException(&quot;Invalid direction specified&quot;);&#xD;
		&#xD;
		if(newSpareTile != null) {&#xD;
			// Success! New spare tile returned&#xD;
			performer.setSpareTile(newSpareTile);&#xD;
			&#xD;
			// Update player move&#xD;
			performer.updateLastMove(&quot;insert row &quot; + direc.toString().toLowerCase() + &quot; &quot; + row);&#xD;
		} else {&#xD;
			throw new IllegalMoveException(&quot;Could not retrieve new spare tile&quot;);&#xD;
		}&#xD;
		&#xD;
		return performer;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KRoAKkFEeK3oZB5eR7Ndw" name="insertTileRowLeft" specification="_2IjJsKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KRoAakFEeK3oZB5eR7Ndw" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2KRoAqkFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KRoA6kFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>// Check if any tiles on row are immovable/fixed&#xD;
		for(int i = 1; i &lt; board.getWidth(); i++) {&#xD;
			try {&#xD;
				if(!board.getTile(i, row).isMovable()) {&#xD;
					// Found an immovable tile&#xD;
					throw new IllegalMoveException(&quot;Specified row contains one or more immovable tiles&quot;);&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				throw new IllegalMoveException(e.getMessage());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set the spare tile to the tile that will fall off&#xD;
		Tile spareTile = board.getTile(board.getWidth(), row);&#xD;
		&#xD;
		if(spareTile.hasToken()) {&#xD;
			// The tile that is going to fall off contains the token, so set token to new tile&#xD;
			spareTile.setToken(false);&#xD;
			newTile.setToken(true);&#xD;
			board.setTokenPos(1, row);&#xD;
		}&#xD;
		else if(spareTile.hasTreasure()) {&#xD;
			// The tile that is going to fall off contains the treasure, so set treasure to new tile&#xD;
			spareTile.setTreasure(false);&#xD;
			newTile.setTreasure(true);&#xD;
			board.setTreasurePos(1, row);&#xD;
		}&#xD;
		&#xD;
		// Push all tiles across&#xD;
		for(int i = board.getWidth(); i > 1; i--) {&#xD;
			// Set tile to preceding tile&#xD;
			Tile t = board.getTile(i - 1, row);&#xD;
			&#xD;
			// Check if preceding tile contains token or treasure&#xD;
			if(t.hasToken()) {&#xD;
				// If so, set token position to new position&#xD;
				board.setTokenPos(i, row);&#xD;
			} else if(t.hasTreasure()) {&#xD;
				// If so, set treasure position to new position&#xD;
				board.setTreasurePos(i, row);&#xD;
			}&#xD;
			&#xD;
			board.setTile(i, row, t);&#xD;
		}&#xD;
		&#xD;
		// Set the first tile in row to new tile&#xD;
		board.setTile(1, row, newTile);&#xD;
		&#xD;
		return spareTile;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KRoBKkFEeK3oZB5eR7Ndw" name="insertTileRowRight" specification="_2IjwwKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KRoBakFEeK3oZB5eR7Ndw" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2KRoBqkFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KRoB6kFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>// Check if any tiles on row are immovable/fixed&#xD;
		for(int i = 1; i &lt; board.getWidth(); i++) {&#xD;
			try {&#xD;
				if(!board.getTile(i, row).isMovable()) {&#xD;
					// Found an immovable tile&#xD;
					throw new IllegalMoveException(&quot;Specified row contains one or more immovable tiles&quot;);&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				throw new IllegalMoveException(e.getMessage());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set the spare tile to the tile that will fall off&#xD;
		Tile spareTile = board.getTile(1, row);&#xD;
		&#xD;
		if(spareTile.hasToken()) {&#xD;
			// The tile that is going to fall off contains the token, so set token to new tile&#xD;
			spareTile.setToken(false);&#xD;
			newTile.setToken(true);&#xD;
			board.setTokenPos(board.getWidth(), row);&#xD;
		}&#xD;
		else if(spareTile.hasTreasure()) {&#xD;
			// The tile that is going to fall off contains the treasure, so set treasure to new tile&#xD;
			spareTile.setTreasure(false);&#xD;
			newTile.setTreasure(true);&#xD;
			board.setTreasurePos(board.getWidth(), row);&#xD;
		}&#xD;
		&#xD;
		// Push all tiles across&#xD;
		for(int i = 1; i &lt; board.getWidth(); i++) {&#xD;
			// Set tile to proceeding tile&#xD;
			Tile t = board.getTile(i + 1, row);&#xD;
			&#xD;
			// Check if proceeding tile contains token&#xD;
			if(t.hasToken()) {&#xD;
				// If so, set token position to new position&#xD;
				board.setTokenPos(i, row);&#xD;
			} else if(t.hasTreasure()) {&#xD;
				// If so, set treasure position to new position&#xD;
				board.setTreasurePos(i, row);&#xD;
			}&#xD;
			&#xD;
			board.setTile(i, row, t);&#xD;
		}&#xD;
		&#xD;
		// Set the last tile in row to new tile&#xD;
		board.setTile(board.getWidth(), row, newTile);&#xD;
		&#xD;
		return spareTile;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KSPEKkFEeK3oZB5eR7Ndw" name="insertColumn" specification="_2IjwxKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KSPEakFEeK3oZB5eR7Ndw" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2KSPEqkFEeK3oZB5eR7Ndw" name="direc" type="_18VSoKkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KSPE6kFEeK3oZB5eR7Ndw" name="performer" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KSPFKkFEeK3oZB5eR7Ndw" type="_18rQ4KkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>// Check first if move is inserting back into same place&#xD;
		String[] lastPlayerMove = performer.getLastMove().split(&quot; &quot;);&#xD;
		&#xD;
		if(lastPlayerMove.length == 4) {&#xD;
			// Valid insert move was last made, do some further checking&#xD;
			if(lastPlayerMove[0].equals(&quot;insert&quot;) &amp;&amp; &#xD;
					lastPlayerMove[1].equals(&quot;column&quot;) &amp;&amp; &#xD;
					lastPlayerMove[3].equals(Integer.toString(column))) {&#xD;
				if(direc == Direction.TOP) {&#xD;
					// Can't insert from bottom this time&#xD;
					if(lastPlayerMove[2].equals(&quot;bottom&quot;)) {&#xD;
						throw new IllegalMoveException(&quot;Can't insert tile back into same position&quot;);&#xD;
					}&#xD;
				} else if(direc == Direction.BOTTOM) {&#xD;
					// Can't insert from top this time&#xD;
					if(lastPlayerMove[2].equals(&quot;top&quot;)) {&#xD;
						throw new IllegalMoveException(&quot;Can't insert tile back into same position&quot;);&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		Tile newSpareTile = null;&#xD;
		&#xD;
		if(direc == Direction.BOTTOM)&#xD;
			newSpareTile = insertTileColumnBottom(column, performer.getSpareTile());&#xD;
		else if(direc == Direction.TOP)&#xD;
			newSpareTile = insertTileColumnTop(column, performer.getSpareTile());&#xD;
		else&#xD;
			throw new IllegalMoveException(&quot;Invalid direction specified&quot;);&#xD;
		&#xD;
		if(newSpareTile != null) {&#xD;
			// Success! New spare tile returned&#xD;
			performer.setSpareTile(newSpareTile);&#xD;
			&#xD;
			// Update player move&#xD;
			performer.updateLastMove(&quot;insert column &quot; + direc.toString().toLowerCase() + &quot; &quot; + column);&#xD;
		} else {&#xD;
			throw new IllegalMoveException(&quot;Could not retrieve new spare tile&quot;);&#xD;
		}&#xD;
		&#xD;
		return performer;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KSPFakFEeK3oZB5eR7Ndw" name="insertTileColumnBottom" specification="_2IkX06kFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KSPFqkFEeK3oZB5eR7Ndw" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2KSPF6kFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KSPGKkFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>// Check if any tiles in column are immovable/fixed&#xD;
		for(int i = 1; i &lt; board.getHeight(); i++) {&#xD;
			try {&#xD;
				if(!board.getTile(column, i).isMovable()) {&#xD;
					// Found an immovable tile&#xD;
					throw new IllegalMoveException(&quot;Specified column contains one or more immovable tiles&quot;);&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				throw new IllegalMoveException(e.getMessage());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set the spare tile to the tile that will fall off&#xD;
		Tile spareTile = board.getTile(column, board.getHeight());&#xD;
		&#xD;
		if(spareTile.hasToken()) {&#xD;
			// The tile that is going to fall off contains the token, so set token to new tile&#xD;
			spareTile.setToken(false);&#xD;
			newTile.setToken(true);&#xD;
			board.setTokenPos(column, 1);&#xD;
		}&#xD;
		else if(spareTile.hasTreasure()) {&#xD;
			// The tile that is going to fall off contains the treasure, so set treasure to new tile&#xD;
			spareTile.setTreasure(false);&#xD;
			newTile.setTreasure(true);&#xD;
			board.setTreasurePos(column, 1);&#xD;
		}&#xD;
		&#xD;
		// Push all tiles across&#xD;
		for(int i = board.getHeight(); i > 1; i--) {&#xD;
			// Set tile to preceding tile&#xD;
			Tile t = board.getTile(column, i - 1);&#xD;
			&#xD;
			// Check if preceding tile contains token&#xD;
			if(t.hasToken()) {&#xD;
				// If so, set token position to new position&#xD;
				board.setTokenPos(column, i);&#xD;
			} else if(t.hasTreasure()) {&#xD;
				// If so, set treasure position to new position&#xD;
				board.setTreasurePos(column, i);&#xD;
			}&#xD;
			&#xD;
			board.setTile(column, i, t);&#xD;
		}&#xD;
		&#xD;
		// Set the first tile in row to new tile&#xD;
		board.setTile(column, 1, newTile);&#xD;
		&#xD;
		return spareTile;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KS2IKkFEeK3oZB5eR7Ndw" name="insertTileColumnTop" specification="_2Ik-4akFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KS2IakFEeK3oZB5eR7Ndw" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2KS2IqkFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2KS2I6kFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>// Check if any tiles in column are immovable/fixed&#xD;
		for(int i = 1; i &lt; board.getHeight(); i++) {&#xD;
			try {&#xD;
				if(!board.getTile(column, i).isMovable()) {&#xD;
					// Found an immovable tile&#xD;
					throw new IllegalMoveException(&quot;Specified column contains one or more immovable tiles&quot;);&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				throw new IllegalMoveException(e.getMessage());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set the spare tile to the tile that will fall off&#xD;
		Tile spareTile = board.getTile(column, 1);&#xD;
		&#xD;
		if(spareTile.hasToken()) {&#xD;
			// The tile that is going to fall off contains the token, so set token to new tile&#xD;
			spareTile.setToken(false);&#xD;
			newTile.setToken(true);&#xD;
			board.setTokenPos(column, board.getHeight());&#xD;
		}&#xD;
		else if(spareTile.hasTreasure()) {&#xD;
			// The tile that is going to fall off contains the treasure, so set treasure to new tile&#xD;
			spareTile.setTreasure(false);&#xD;
			newTile.setTreasure(true);&#xD;
			board.setTreasurePos(column, board.getHeight());&#xD;
		}&#xD;
		&#xD;
		// Push all tiles across&#xD;
		for(int i = 1; i &lt; board.getHeight(); i++) {&#xD;
			// Set tile to proceeding tile&#xD;
			Tile t = board.getTile(column, i + 1);&#xD;
			&#xD;
			// Check if proceeding tile contains token&#xD;
			if(t.hasToken()) {&#xD;
				// If so, set token position to new position&#xD;
				board.setTokenPos(column, i);&#xD;
			} else if(t.hasTreasure()) {&#xD;
				// If so, set treasure position to new position&#xD;
				board.setTreasurePos(column, i);&#xD;
			}&#xD;
			&#xD;
			board.setTile(column, i, t);&#xD;
		}&#xD;
		&#xD;
		// Set the first tile in row to new tile&#xD;
		board.setTile(column, board.getHeight(), newTile);&#xD;
		&#xD;
		return spareTile;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KS2JKkFEeK3oZB5eR7Ndw" name="updatePlayer" specification="_2Ill8KkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KS2JakFEeK3oZB5eR7Ndw" name="p" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
                <language>java</language>
                <body>player = p;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KS2JqkFEeK3oZB5eR7Ndw" name="nextRound" specification="_19-RYKkFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>// Increment round and score&#xD;
		round++;&#xD;
		player.setScore(player.getScore() + 1);&#xD;
		&#xD;
		if(!hasWon()) {&#xD;
			// Make computer move if win condition not satisfied&#xD;
			computerMove();&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KTdMKkFEeK3oZB5eR7Ndw" name="hasWon" specification="_19-RYakFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KTdMakFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedParameter>
                <language>java</language>
                <body>int[] tokenPos = board.getTokenPos();&#xD;
		&#xD;
		if(board.getTile(tokenPos[0], tokenPos[1]).hasTreasure())&#xD;
			return true;&#xD;
		else&#xD;
			return false;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KTdMqkFEeK3oZB5eR7Ndw" name="computerMove" specification="_19-4cakFEeK3oZB5eR7Ndw">
                <language>java</language>
                <body>// Randomly choose between row or column&#xD;
		int r1 = rand.nextInt(2); // row/column&#xD;
		&#xD;
		if(r1 == 0) {&#xD;
			// Row&#xD;
			&#xD;
			// Randomly choose between left or right insertion&#xD;
			int r2 = rand.nextInt(2);&#xD;
			&#xD;
			if(r2 == 0) {&#xD;
				// Left&#xD;
				try {&#xD;
					computer = (ComputerPlayer) insertRow(computer.getRandomRow(), Direction.LEFT, computer);&#xD;
				} catch (IllegalMoveException e) {&#xD;
					// In the rare case the computer makes an illegal move, redo the move&#xD;
					computerMove();&#xD;
					return;&#xD;
				}&#xD;
			} else {&#xD;
				// Right&#xD;
				try {&#xD;
					computer = (ComputerPlayer) insertRow(computer.getRandomRow(), Direction.RIGHT, computer);&#xD;
				} catch (IllegalMoveException e) {&#xD;
					// In the rare case the computer makes an illegal move, redo the move&#xD;
					computerMove();&#xD;
					return;&#xD;
				}&#xD;
			}&#xD;
		} else {&#xD;
			// Column&#xD;
			&#xD;
			// Randomly choose between top or bottom insertion&#xD;
			int r2 = rand.nextInt(2);&#xD;
			&#xD;
			if(r2 == 0) {&#xD;
				// Top&#xD;
				try {&#xD;
					computer = (ComputerPlayer) insertColumn(computer.getRandomColumn(), Direction.TOP, computer);&#xD;
				} catch (IllegalMoveException e) {&#xD;
					// In the rare case the computer makes an illegal move, redo the move&#xD;
					computerMove();&#xD;
					return;&#xD;
				}&#xD;
			} else {&#xD;
				// Bottom&#xD;
				try {&#xD;
					computer = (ComputerPlayer) insertColumn(computer.getRandomColumn(), Direction.BOTTOM, computer);&#xD;
				} catch (IllegalMoveException e) {&#xD;
					// In the rare case the computer makes an illegal move, redo the move&#xD;
					computerMove();&#xD;
					return;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KTdM6kFEeK3oZB5eR7Ndw" name="getComputerPlayer" specification="_19_fgKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KTdNKkFEeK3oZB5eR7Ndw" type="_18K6kKkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>return computer;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KUEQKkFEeK3oZB5eR7Ndw" name="getLeaderboard" specification="_19_fgakFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KUEQakFEeK3oZB5eR7Ndw" type="_18hf4KkFEeK3oZB5eR7Ndw" direction="return"/>
                <language>java</language>
                <body>return leaderboard;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KUEQqkFEeK3oZB5eR7Ndw" name="setCurrentMove" specification="_1-AGkKkFEeK3oZB5eR7Ndw">
                <ownedParameter xmi:id="_2KUEQ6kFEeK3oZB5eR7Ndw" name="move">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedParameter>
                <language>java</language>
                <body>currentMove = move;&#xD;
	</body>
              </ownedBehavior>
              <ownedOperation xmi:id="_190gYKkFEeK3oZB5eR7Ndw" name="moveTokenUp" method="_2KQZ4KkFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KviEKkFEeK3oZB5eR7Ndw">
                  <body>Move the token up a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_191HcKkFEeK3oZB5eR7Ndw" name="moveTokenDown" method="_2KQZ4akFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KviEakFEeK3oZB5eR7Ndw">
                  <body>Move the token down a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_191ugKkFEeK3oZB5eR7Ndw" name="moveTokenLeft" method="_2KQZ4qkFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KviEqkFEeK3oZB5eR7Ndw">
                  <body>Move the token left a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_1928oKkFEeK3oZB5eR7Ndw" name="moveTokenRight" method="_2KQZ46kFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KviE6kFEeK3oZB5eR7Ndw">
                  <body>Move the token right a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_193jsKkFEeK3oZB5eR7Ndw" name="rotateTile" method="_2KRA8KkFEeK3oZB5eR7Ndw" raisedException="_2I-AcKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KviFKkFEeK3oZB5eR7Ndw">
                  <body>Rotate the spare tile by a particular angle.&#xD;
	 * &#xD;
	 * @param angle The angle to rotate the spare tile by. Must be either 90, 180 or 270.</body>
                </ownedComment>
                <ownedParameter xmi:id="_193jsakFEeK3oZB5eR7Ndw" name="angle">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_19-RYKkFEeK3oZB5eR7Ndw" name="nextRound" method="_2KS2JqkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwJJKkFEeK3oZB5eR7Ndw">
                  <body>Transition to the next round.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_19-RYakFEeK3oZB5eR7Ndw" name="hasWon" method="_2KTdMKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwJJakFEeK3oZB5eR7Ndw">
                  <body>Check if the player has won by analysing the token position (i.e. if it contains treasure).&#xD;
	 * &#xD;
	 * @return Whether or not the player has satisfied the win conditions.</body>
                </ownedComment>
                <ownedParameter xmi:id="_19-4cKkFEeK3oZB5eR7Ndw" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_19-4cakFEeK3oZB5eR7Ndw" name="computerMove" visibility="private" method="_2KTdMqkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwJJqkFEeK3oZB5eR7Ndw">
                  <body>Perform a random computer tile move.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_19_fgKkFEeK3oZB5eR7Ndw" name="getComputerPlayer" method="_2KTdM6kFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwwMKkFEeK3oZB5eR7Ndw">
                  <body>Get the computer player opponent.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2Ill8qkFEeK3oZB5eR7Ndw" type="_18K6kKkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_19_fgakFEeK3oZB5eR7Ndw" name="getLeaderboard" method="_2KUEQKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwwMakFEeK3oZB5eR7Ndw">
                  <body>Get the leaderboard.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2Ill86kFEeK3oZB5eR7Ndw" type="_18hf4KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_1-AGkKkFEeK3oZB5eR7Ndw" name="setCurrentMove" method="_2KUEQqkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwwMqkFEeK3oZB5eR7Ndw">
                  <body>Set the current move of the game.</body>
                </ownedComment>
                <ownedParameter xmi:id="_1-AGkakFEeK3oZB5eR7Ndw" name="move">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_2Ih7kKkFEeK3oZB5eR7Ndw" name="TreasureChase" method="_2KPy0KkFEeK3oZB5eR7Ndw">
                <eAnnotations xmi:id="_2Ih7kqkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                  <details xmi:id="_2Ih7k6kFEeK3oZB5eR7Ndw" key="create"/>
                </eAnnotations>
                <ownedComment xmi:id="_2Ku7BKkFEeK3oZB5eR7Ndw">
                  <body>Construct a new Treasure Chase game with the specified settings.&#xD;
	 * &#xD;
	 * @param settings The settings to use for the game.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2Ih7kakFEeK3oZB5eR7Ndw" name="settings" type="_181B4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2Ih7lKkFEeK3oZB5eR7Ndw" type="_19w2AKkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2IiioKkFEeK3oZB5eR7Ndw" name="insertRow" method="_2KRA8qkFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KviFakFEeK3oZB5eR7Ndw">
                  <body>Insert the spare tile into the specified row.&#xD;
	 * &#xD;
	 * @param row The row to insert the spare tile into.&#xD;
	 * @param direc The direction from which to insert the tile into.&#xD;
	 * @param performer The player who is performing the move.&#xD;
	 * @return The newly updated player with increased score/moves and spare tile based on performer.&#xD;
	 * @throws IllegalMoveException When the move cannot be accomplished due to immovable tiles, etc.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IiioakFEeK3oZB5eR7Ndw" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2IiioqkFEeK3oZB5eR7Ndw" name="direc" type="_18VSoKkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2Iiio6kFEeK3oZB5eR7Ndw" name="performer" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IiipKkFEeK3oZB5eR7Ndw" type="_18rQ4KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2IjJsKkFEeK3oZB5eR7Ndw" name="insertTileRowLeft" visibility="private" method="_2KRoAKkFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KviFqkFEeK3oZB5eR7Ndw">
                  <body>Insert a specific tile into the specified row from the left hand side.&#xD;
	 * &#xD;
	 * @param row The row to insert the tile to.&#xD;
	 * @param newTile The tile to insert into the row.&#xD;
	 * @return The tile that falls off the side of the board.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IjJsakFEeK3oZB5eR7Ndw" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2IjJsqkFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IjJs6kFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2IjwwKkFEeK3oZB5eR7Ndw" name="insertTileRowRight" visibility="private" method="_2KRoBKkFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KviF6kFEeK3oZB5eR7Ndw">
                  <body>Insert a specific tile into the specified row from the right hand side.&#xD;
	 * &#xD;
	 * @param row The row to insert the tile to.&#xD;
	 * @param newTile The tile to insert into the row.&#xD;
	 * @return The tile that falls off the side of the board.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IjwwakFEeK3oZB5eR7Ndw" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2IjwwqkFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2Ijww6kFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2IjwxKkFEeK3oZB5eR7Ndw" name="insertColumn" method="_2KSPEKkFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwJIKkFEeK3oZB5eR7Ndw">
                  <body>Insert the spare tile into the specified column.&#xD;
	 * &#xD;
	 * @param column The column to insert the spare tile into.&#xD;
	 * @param direc The direction from which to insert the tile into.&#xD;
	 * @param performer The player who is performing the move.&#xD;
	 * @return The newly updated player with increased score/moves and spare tile based on performer.&#xD;
	 * @throws IllegalMoveException When the move cannot be accomplished due to immovable tiles, etc.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IjwxakFEeK3oZB5eR7Ndw" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2IkX0KkFEeK3oZB5eR7Ndw" name="direc" type="_18VSoKkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IkX0akFEeK3oZB5eR7Ndw" name="performer" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2IkX0qkFEeK3oZB5eR7Ndw" type="_18rQ4KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2IkX06kFEeK3oZB5eR7Ndw" name="insertTileColumnBottom" visibility="private" method="_2KSPFakFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwJIakFEeK3oZB5eR7Ndw">
                  <body>Insert a specific tile into the specified column from the bottom.&#xD;
	 * &#xD;
	 * @param column The column to insert the tile to.&#xD;
	 * @param newTile The tile to insert into the column.&#xD;
	 * @return The tile that falls off the side of the board.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2IkX1KkFEeK3oZB5eR7Ndw" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2IkX1akFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2Ik-4KkFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2Ik-4akFEeK3oZB5eR7Ndw" name="insertTileColumnTop" visibility="private" method="_2KS2IKkFEeK3oZB5eR7Ndw" raisedException="_18d1gKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwJIqkFEeK3oZB5eR7Ndw">
                  <body>Insert a specific tile into the specified column from the top.&#xD;
	 * &#xD;
	 * @param column The column to insert the tile to.&#xD;
	 * @param newTile The tile to insert into the column.&#xD;
	 * @return The tile that falls off the side of the board.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2Ik-4qkFEeK3oZB5eR7Ndw" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_2Ik-46kFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
                <ownedParameter xmi:id="_2Ik-5KkFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_2Ill8KkFEeK3oZB5eR7Ndw" name="updatePlayer" method="_2KS2JKkFEeK3oZB5eR7Ndw">
                <ownedComment xmi:id="_2KwJI6kFEeK3oZB5eR7Ndw">
                  <body>Update the player with a new player.&#xD;
	 * &#xD;
	 * @param p The new player.</body>
                </ownedComment>
                <ownedParameter xmi:id="_2Ill8akFEeK3oZB5eR7Ndw" name="p" type="_18rQ4KkFEeK3oZB5eR7Ndw"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LGHYKkFEeK3oZB5eR7Ndw" name="" memberEnd="_2LGHYakFEeK3oZB5eR7Ndw _19jaoKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LGHYakFEeK3oZB5eR7Ndw" name="" type="_19cF4KkFEeK3oZB5eR7Ndw" association="_2LGHYKkFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LGucakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LGucqkFEeK3oZB5eR7Ndw _19kBsKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LGucqkFEeK3oZB5eR7Ndw" name="" type="_19cF4KkFEeK3oZB5eR7Ndw" association="_2LGucakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LHVgakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LHVgqkFEeK3oZB5eR7Ndw _19l24KkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LHVgqkFEeK3oZB5eR7Ndw" name="" type="_19cF4KkFEeK3oZB5eR7Ndw" association="_2LHVgakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LK_46kFEeK3oZB5eR7Ndw" name="" memberEnd="_2LK_5KkFEeK3oZB5eR7Ndw _2JY3MKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LK_5KkFEeK3oZB5eR7Ndw" name="" type="_19w2AKkFEeK3oZB5eR7Ndw" association="_2LK_46kFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LLm8akFEeK3oZB5eR7Ndw" name="" memberEnd="_2LLm8qkFEeK3oZB5eR7Ndw _2JY3MakFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LLm8qkFEeK3oZB5eR7Ndw" name="" type="_19w2AKkFEeK3oZB5eR7Ndw" association="_2LLm8akFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LMOAakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LMOAqkFEeK3oZB5eR7Ndw _2JZeQKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LMOAqkFEeK3oZB5eR7Ndw" name="" type="_19w2AKkFEeK3oZB5eR7Ndw" association="_2LMOAakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LM1EKkFEeK3oZB5eR7Ndw" name="" memberEnd="_2LM1EakFEeK3oZB5eR7Ndw _2JaFUKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LM1EakFEeK3oZB5eR7Ndw" name="" type="_19w2AKkFEeK3oZB5eR7Ndw" association="_2LM1EKkFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LM1E6kFEeK3oZB5eR7Ndw" name="" memberEnd="_2LM1FKkFEeK3oZB5eR7Ndw _2JaFUakFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LM1FKkFEeK3oZB5eR7Ndw" name="" type="_19w2AKkFEeK3oZB5eR7Ndw" association="_2LM1E6kFEeK3oZB5eR7Ndw"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_2LNcIakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LNcIqkFEeK3oZB5eR7Ndw _2JasYKkFEeK3oZB5eR7Ndw">
              <ownedEnd xmi:id="_2LNcIqkFEeK3oZB5eR7Ndw" name="" type="_19w2AKkFEeK3oZB5eR7Ndw" association="_2LNcIakFEeK3oZB5eR7Ndw"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_18AigKkFEeK3oZB5eR7Ndw" name="Board">
            <ownedComment xmi:id="_2KnmQakFEeK3oZB5eR7Ndw">
              <body>Represents a game board containing tiles.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_2JI_kKkFEeK3oZB5eR7Ndw" name="tiles" type="_18_Z8KkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LH8kakFEeK3oZB5eR7Ndw">
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2JI_kakFEeK3oZB5eR7Ndw" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JJmoKkFEeK3oZB5eR7Ndw" name="width" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JJmoakFEeK3oZB5eR7Ndw" name="height" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JKNsKkFEeK3oZB5eR7Ndw" name="tokenPos" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2JKNsakFEeK3oZB5eR7Ndw" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JKNs6kFEeK3oZB5eR7Ndw" name="treasurePos" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2JKNtKkFEeK3oZB5eR7Ndw" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JK0wakFEeK3oZB5eR7Ndw" name="r" visibility="private" type="_2IHE0KkFEeK3oZB5eR7Ndw" association="_2LIjoakFEeK3oZB5eR7Ndw"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J-GAKkFEeK3oZB5eR7Ndw" name="Board" specification="_18BwoKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2J-GAakFEeK3oZB5eR7Ndw" name="width">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J-GAqkFEeK3oZB5eR7Ndw" name="height">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J-GA6kFEeK3oZB5eR7Ndw" type="_18AigKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this.r = new Random();&#xD;
		&#xD;
		this.width = width;&#xD;
		this.height = height;&#xD;
		this.tiles = new Tile[height][width];&#xD;
		&#xD;
		// Randomise tiles&#xD;
		for(int i = 0; i &lt; height; i++) {&#xD;
			// Skip far left and far right columns&#xD;
			for(int j = 0; j &lt; width; j++) {&#xD;
				Tile randomTile;&#xD;
				int rNumber = r.nextInt(4); // CORNER, LINE, TSHAPE, CROSS&#xD;
				int rotation = r.nextInt(4); // DEFAULT, NINETY, HUNDREDANDEIGHTY, TWOHUNDREDANDSEVENTY&#xD;
				TileType[] tileTypes = TileType.values();&#xD;
				RotationAngle[] rotationAngles = RotationAngle.values();&#xD;
				&#xD;
				randomTile = new Tile(tileTypes[rNumber], rotationAngles[rotation]);&#xD;
				tiles[i][j] = randomTile;&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set immovable tiles (i,j) where i and j are odd&#xD;
		for(int i = 0; i &lt; height; i++) {&#xD;
			for(int j = 0; j &lt; width; j++) {&#xD;
				// Internally board starts at 0, but to the user it starts at 1&#xD;
				// so we need to perform odd calculations on what the user sees&#xD;
				if(((i + 1) % 2 != 0) &amp;&amp; ((j + 1) % 2 != 0)) {&#xD;
					// Found an odd combination&#xD;
					tiles[i][j].setMovable(false);&#xD;
					&#xD;
					// Check if not on the edge (must be cross in this case)&#xD;
					if(i != 0 &amp;&amp; i != height - 1 &amp;&amp; j != 0 &amp;&amp; j != width - 1) {&#xD;
						tiles[i][j].setType(TileType.CROSS);&#xD;
					}&#xD;
					else {&#xD;
						// Tile is on the edge, determine which edge&#xD;
						if(i == 0 &amp;&amp; j == 0) {&#xD;
							// Top left hand corner&#xD;
							tiles[i][j] = new Tile(TileType.CORNER, RotationAngle.DEFAULT, false);&#xD;
						}&#xD;
						else if(i == 0 &amp;&amp; j == width - 1) {&#xD;
							// Top right hand corner&#xD;
							tiles[i][j] = new Tile(TileType.CORNER, RotationAngle.NINETY, false);&#xD;
						}&#xD;
						else if(i == height - 1 &amp;&amp; j == width - 1) {&#xD;
							// Bottom right hand corner&#xD;
							tiles[i][j] = new Tile(TileType.CORNER, RotationAngle.HUNDREDANDEIGHTY, false);&#xD;
						}&#xD;
						else if(i == height - 1 &amp;&amp; j == 0) {&#xD;
							// Bottom left hand corner&#xD;
							tiles[i][j] = new Tile(TileType.CORNER, RotationAngle.TWOHUNDREDANDSEVENTY, false);&#xD;
						}&#xD;
						else if(i == 0) {&#xD;
							// Top most row&#xD;
							// Set to either horizontal line or horizontal T-shape&#xD;
							int type = r.nextInt(2); // LINE, TSHAPE&#xD;
							&#xD;
							if(type == 0)&#xD;
								tiles[i][j] = new Tile(TileType.LINE, RotationAngle.NINETY, false);&#xD;
							else&#xD;
								tiles[i][j] = new Tile(TileType.TSHAPE, RotationAngle.NINETY, false);&#xD;
						}&#xD;
						else if(i == height - 1) {&#xD;
							// Bottom most row&#xD;
							// Set to either horizontal line or horizontal T-shape&#xD;
							int type = r.nextInt(2); // LINE, TSHAPE&#xD;
							&#xD;
							if(type == 0)&#xD;
								tiles[i][j] = new Tile(TileType.LINE, RotationAngle.NINETY, false);&#xD;
							else&#xD;
								tiles[i][j] = new Tile(TileType.TSHAPE, RotationAngle.TWOHUNDREDANDSEVENTY, false);&#xD;
						}&#xD;
						else if(j == 0) {&#xD;
							// Left most column&#xD;
							// Set to either horizontal line or horizontal T-shape&#xD;
							int type = r.nextInt(2); // LINE, TSHAPE&#xD;
							&#xD;
							if(type == 0)&#xD;
								tiles[i][j] = new Tile(TileType.LINE, RotationAngle.DEFAULT, false);&#xD;
							else&#xD;
								tiles[i][j] = new Tile(TileType.TSHAPE, RotationAngle.DEFAULT, false);&#xD;
						}&#xD;
						else if(j == width - 1) {&#xD;
							// Right most column&#xD;
							// Set to either horizontal line or horizontal T-shape&#xD;
							int type = r.nextInt(2); // LINE, TSHAPE&#xD;
							&#xD;
							if(type == 0)&#xD;
								tiles[i][j] = new Tile(TileType.LINE, RotationAngle.DEFAULT, false);&#xD;
							else&#xD;
								tiles[i][j] = new Tile(TileType.TSHAPE, RotationAngle.HUNDREDANDEIGHTY, false);&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set token position (bottom left corner)&#xD;
		this.tokenPos = new int[2];&#xD;
		this.tokenPos[0] = 1; // column&#xD;
		this.tokenPos[1] = 1; // row&#xD;
		&#xD;
		tiles[getInternalRow(tokenPos[1])][getInternalColumn(tokenPos[0])].setToken(true);&#xD;
		&#xD;
		// Initialise treasure (but don't set)&#xD;
		this.treasurePos = new int[2];&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J-GBKkFEeK3oZB5eR7Ndw" name="getTile" specification="_18C-wKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2J-GBakFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J-GBqkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J-GB6kFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>// Check if arguments are valid&#xD;
		if(column &lt; 1 || column > width) {&#xD;
			throw new IllegalArgumentException(&quot;Specified column not within range&quot;);&#xD;
		} else if(row &lt; 1 || row > height) {&#xD;
			throw new IllegalArgumentException(&quot;Specified row not within range&quot;);&#xD;
		}&#xD;
		&#xD;
		// Calculate internal coordinates and return corresponding tile&#xD;
		return tiles[getInternalRow(row)][getInternalColumn(column)];&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J-tEKkFEeK3oZB5eR7Ndw" name="setTile" specification="_2II6AKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2J-tEakFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J-tEqkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J-tE6kFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
              <language>java</language>
              <body>// Check if arguments are valid&#xD;
		if(column &lt; 1 || column > width) {&#xD;
			throw new IllegalArgumentException(&quot;Specified column not within range&quot;);&#xD;
		} else if(row &lt; 1 || row > height) {&#xD;
			throw new IllegalArgumentException(&quot;Specified row not within range&quot;);&#xD;
		}&#xD;
		&#xD;
		// Calculate internal coordinates and return corresponding tile&#xD;
		tiles[getInternalRow(row)][getInternalColumn(column)] = newTile;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J-tFKkFEeK3oZB5eR7Ndw" name="setTokenPos" specification="_18EM4KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2J-tFakFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J-tFqkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>tokenPos[0] = column;&#xD;
		tokenPos[1] = row;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J_UIKkFEeK3oZB5eR7Ndw" name="setTreasurePos" specification="_18Ez8qkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2J_UIakFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J_UIqkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>treasurePos[0] = column;&#xD;
		treasurePos[1] = row;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J_UI6kFEeK3oZB5eR7Ndw" name="getInternalRow" specification="_18FbAakFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2J_UJKkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J_UJakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>return (getHeight() - row);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J_7MKkFEeK3oZB5eR7Ndw" name="getInternalColumn" specification="_18GCEakFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2J_7MakFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2J_7MqkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>return column - 1;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J_7M6kFEeK3oZB5eR7Ndw" name="getHeight" specification="_18GpIKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2J_7NKkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>return height;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_18BwoKkFEeK3oZB5eR7Ndw" name="Board" method="_2J-GAKkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_18CXsKkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_18CXsakFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2KoNUKkFEeK3oZB5eR7Ndw">
                <body>Construct a board of a particular size.&#xD;
	 * &#xD;
	 * @param width The width of the board.&#xD;
	 * @param height The height of the board.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18BwoakFEeK3oZB5eR7Ndw" name="width">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18BwoqkFEeK3oZB5eR7Ndw" name="height">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18CXsqkFEeK3oZB5eR7Ndw" type="_18AigKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_18C-wKkFEeK3oZB5eR7Ndw" name="getTile" method="_2J-GBKkFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KoNUakFEeK3oZB5eR7Ndw">
                <body>Get the tile at the specified location.&#xD;
	 * &#xD;
	 * @param column The column coordinate of the tile.&#xD;
	 * @param row The row coordinate of the tile.&#xD;
	 * @return The particular tile at the specified location.&#xD;
	 * @throws IllegalArgumentException If either the row or column is not within range.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18C-wakFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18C-wqkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2IIS8KkFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_18EM4KkFEeK3oZB5eR7Ndw" name="setTokenPos" method="_2J-tFKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KoNU6kFEeK3oZB5eR7Ndw">
                <body>Set the current token position as a board coordinate.&#xD;
	 * &#xD;
	 * @param column The column number of the token.&#xD;
	 * @param row The row number of the token.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18Ez8KkFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18Ez8akFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_18Ez8qkFEeK3oZB5eR7Ndw" name="setTreasurePos" method="_2J_UIKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KoNVKkFEeK3oZB5eR7Ndw">
                <body>Set the current treasure position as a board coordinate.&#xD;
	 * &#xD;
	 * @param column The column number of the treasure.&#xD;
	 * @param row The row number of the treasure.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18Ez86kFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18FbAKkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_18FbAakFEeK3oZB5eR7Ndw" name="getInternalRow" method="_2J_UI6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KoNVakFEeK3oZB5eR7Ndw">
                <body>Convert a row to its internal array equivalent.&#xD;
	 * &#xD;
	 * @param row The row as labelled on the board.&#xD;
	 * @return The internal array equivalent.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18FbAqkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18GCEKkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_18GCEakFEeK3oZB5eR7Ndw" name="getInternalColumn" method="_2J_7MKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KoNVqkFEeK3oZB5eR7Ndw">
                <body>Convert a column to its internal array equivalent.&#xD;
	 * &#xD;
	 * @param column The column as labelled on the board.&#xD;
	 * @return The internal array equivalent.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18GCEqkFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18GCE6kFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_18GpIKkFEeK3oZB5eR7Ndw" name="getHeight" method="_2J_7M6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KoNV6kFEeK3oZB5eR7Ndw">
                <body>Get the height of the board.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18GpIakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_2II6AKkFEeK3oZB5eR7Ndw" name="setTile" method="_2J-tEKkFEeK3oZB5eR7Ndw" raisedException="_2I4g4akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KoNUqkFEeK3oZB5eR7Ndw">
                <body>Set the tile at the specified location to a new tile.&#xD;
	 * &#xD;
	 * @param column The column coordinate of the tile.&#xD;
	 * @param row The row coordinate of the tile.&#xD;
	 * @param newTile The new tile for replacing the existing tile with.&#xD;
	 * @throws IllegalArgumentException If either the row or column is not within range.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2II6AakFEeK3oZB5eR7Ndw" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2II6AqkFEeK3oZB5eR7Ndw" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2II6A6kFEeK3oZB5eR7Ndw" name="newTile" type="_18_Z8KkFEeK3oZB5eR7Ndw"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_18K6kKkFEeK3oZB5eR7Ndw" name="ComputerPlayer">
            <ownedComment xmi:id="_2Ko0YKkFEeK3oZB5eR7Ndw">
              <body>Represents a computer opponent for a player to play against in the Labyrinth&#xD;
game.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <generalization xmi:id="_2IMkYakFEeK3oZB5eR7Ndw" general="_18rQ4KkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JLb0KkFEeK3oZB5eR7Ndw" name="columns" visibility="private" type="_2IKvMKkFEeK3oZB5eR7Ndw" association="_2LJKsKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JMp8akFEeK3oZB5eR7Ndw" name="rows" visibility="private" type="_2IKvMKkFEeK3oZB5eR7Ndw" association="_2LJKs6kFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JNRAqkFEeK3oZB5eR7Ndw" name="rand" visibility="private" type="_2IHE0KkFEeK3oZB5eR7Ndw" association="_2LJxwakFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JN4EakFEeK3oZB5eR7Ndw" name="angles" visibility="private" type="_18xXgKkFEeK3oZB5eR7Ndw">
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2JN4EqkFEeK3oZB5eR7Ndw" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JOfIakFEeK3oZB5eR7Ndw" name="types" visibility="private" type="_19YbgKkFEeK3oZB5eR7Ndw">
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2JOfIqkFEeK3oZB5eR7Ndw" value="*"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KBJUKkFEeK3oZB5eR7Ndw" name="ComputerPlayer" specification="_2IL9UKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KBJUakFEeK3oZB5eR7Ndw" name="board" type="_18AigKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2KBJUqkFEeK3oZB5eR7Ndw" type="_18K6kKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this.columns = new ArrayList&lt;Integer>();&#xD;
		this.rows = new ArrayList&lt;Integer>();&#xD;
		this.rand = new Random();&#xD;
		&#xD;
		// Add available rows and columns (odd tiles are immovable, so get even)&#xD;
		for(int i = 1; i &lt;= board.getHeight(); i++) {&#xD;
			if(i % 2 == 0) {&#xD;
				rows.add(i);&#xD;
			}&#xD;
		}&#xD;
		for(int i = 1; i &lt;= board.getWidth(); i++) {&#xD;
			if(i % 2 == 0) {&#xD;
				columns.add(i);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		angles = RotationAngle.values();&#xD;
		types = TileType.values();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KBJU6kFEeK3oZB5eR7Ndw" name="getRandomColumn" specification="_18NW0KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KBJVKkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              </ownedParameter>
              <language>java</language>
              <body>int r = rand.nextInt(columns.size());&#xD;
		return columns.get(r);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KBwYKkFEeK3oZB5eR7Ndw" name="getRandomRow" specification="_18NW0qkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KBwYakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              </ownedParameter>
              <language>java</language>
              <body>int r = rand.nextInt(rows.size());&#xD;
		return rows.get(r);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KBwYqkFEeK3oZB5eR7Ndw" name="getRandomRotation" specification="_18N94akFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KBwY6kFEeK3oZB5eR7Ndw" type="_18xXgKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>int r = rand.nextInt(angles.length);&#xD;
		return angles[r];&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KBwZKkFEeK3oZB5eR7Ndw" name="getRandomTileType" specification="_18Ok8KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KBwZakFEeK3oZB5eR7Ndw" type="_19YbgKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>int r = rand.nextInt(types.length);&#xD;
		return types[r];&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_18NW0KkFEeK3oZB5eR7Ndw" name="getRandomColumn" method="_2KBJU6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Ko0YqkFEeK3oZB5eR7Ndw">
                <body>Get a random column coordinate from the available rows.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18NW0akFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_18NW0qkFEeK3oZB5eR7Ndw" name="getRandomRow" method="_2KBwYKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Ko0Y6kFEeK3oZB5eR7Ndw">
                <body>Get a random row coordinate from the available rows.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18N94KkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_18N94akFEeK3oZB5eR7Ndw" name="getRandomRotation" method="_2KBwYqkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Ko0ZKkFEeK3oZB5eR7Ndw">
                <body>Get a random tile rotation.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2IL9VakFEeK3oZB5eR7Ndw" type="_18xXgKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_18Ok8KkFEeK3oZB5eR7Ndw" name="getRandomTileType" method="_2KBwZKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Ko0ZakFEeK3oZB5eR7Ndw">
                <body>Get a random tile type.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2IMkYKkFEeK3oZB5eR7Ndw" type="_19YbgKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_2IL9UKkFEeK3oZB5eR7Ndw" name="ComputerPlayer" method="_2KBJUKkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_2IL9UqkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_2IL9U6kFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2Ko0YakFEeK3oZB5eR7Ndw">
                <body>Generate a computer player opponent using the board&#xD;
	 * settings as information on the computers tile moves.&#xD;
	 * &#xD;
	 * @param board The board to gather information from.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2IL9UakFEeK3oZB5eR7Ndw" name="board" type="_18AigKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2IL9VKkFEeK3oZB5eR7Ndw" type="_18K6kKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_18VSoKkFEeK3oZB5eR7Ndw" name="Direction">
            <ownedLiteral xmi:id="_18WgwKkFEeK3oZB5eR7Ndw" name="LEFT"/>
            <ownedLiteral xmi:id="_18WgwakFEeK3oZB5eR7Ndw" name="RIGHT"/>
            <ownedLiteral xmi:id="_18WgwqkFEeK3oZB5eR7Ndw" name="TOP"/>
            <ownedLiteral xmi:id="_18XH0KkFEeK3oZB5eR7Ndw" name="BOTTOM"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_18XH0akFEeK3oZB5eR7Ndw" name="GameManager">
            <ownedComment xmi:id="_2Ko0ZqkFEeK3oZB5eR7Ndw">
              <body>Allows for the loading and saving of games.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.19042013&#xD;
 *</body>
            </ownedComment>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KC-gKkFEeK3oZB5eR7Ndw" name="load" specification="_18Xu4KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KC-gakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2KC-gqkFEeK3oZB5eR7Ndw" type="_19cF4KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>GameMode game = null;&#xD;
		BufferedReader reader = new BufferedReader(new FileReader(path));&#xD;
		&#xD;
		SettingsManager settings = new SettingsManager();&#xD;
		int nextColumn = 1, nextRow = 1;&#xD;
		String line = reader.readLine();&#xD;
		&#xD;
		while(line != null) {&#xD;
			String[] lineTokens = line.split(&quot; &quot;);&#xD;
			&#xD;
			if(lineTokens[0].equals(&quot;ROWS&quot;)) {&#xD;
				// Process rows&#xD;
				settings.setRows(Integer.parseInt(lineTokens[1]));&#xD;
			} else if(lineTokens[0].equals(&quot;COLUMNS&quot;)) {&#xD;
				// Process columns&#xD;
				settings.setColumns(Integer.parseInt(lineTokens[1]));&#xD;
			} else if(lineTokens[0].equals(&quot;GAME_MODE&quot;)) {&#xD;
				// Process game mode&#xD;
				if(lineTokens[1].equals(&quot;tc&quot;)) {&#xD;
					game = new TreasureChase(settings);&#xD;
				}&#xD;
			} else if(lineTokens[0].equals(&quot;TILE&quot;)) {&#xD;
				// Process tile&#xD;
				if(nextColumn > settings.getColumns()) {&#xD;
					// Reset column, increase row&#xD;
					nextColumn = 1;&#xD;
					nextRow++;&#xD;
				}&#xD;
				&#xD;
				// Tile properties&#xD;
				TileType tileType;&#xD;
				RotationAngle rotationAngle;&#xD;
				Tile newTile;&#xD;
				&#xD;
				// Tile type is 2nd element&#xD;
				tileType = TileType.valueOf(lineTokens[1]);&#xD;
				&#xD;
				// Rotation angle is 3rd element&#xD;
				rotationAngle = RotationAngle.valueOf(lineTokens[2]);&#xD;
				&#xD;
				// Form new tile&#xD;
				newTile = new Tile(tileType, rotationAngle);&#xD;
				&#xD;
				// Check if immovable&#xD;
				if((nextColumn % 2 != 0) &amp;&amp; (nextRow % 2 != 0))&#xD;
					newTile.setMovable(false);&#xD;
				&#xD;
				game.getBoard().setTile(nextColumn, nextRow, newTile);&#xD;
				&#xD;
				nextColumn++;&#xD;
			} else if(lineTokens[0].equals(&quot;TOKEN&quot;)) {&#xD;
				game.getBoard().getTile(Integer.parseInt(lineTokens[1]), Integer.parseInt(lineTokens[2])).setToken(true);&#xD;
				game.getBoard().setTokenPos(Integer.parseInt(lineTokens[1]), Integer.parseInt(lineTokens[2]));&#xD;
			} else if(lineTokens[0].equals(&quot;TREASURE&quot;)) {&#xD;
				game.getBoard().getTile(Integer.parseInt(lineTokens[1]), Integer.parseInt(lineTokens[2])).setTreasure(true);&#xD;
				game.getBoard().setTreasurePos(Integer.parseInt(lineTokens[1]), Integer.parseInt(lineTokens[2]));&#xD;
			} else if(lineTokens[0].equals(&quot;ROUND&quot;)) {&#xD;
				game.setRound(Integer.parseInt(lineTokens[1]));&#xD;
			} else if(lineTokens[0].equals(&quot;SCORE&quot;)) {&#xD;
				game.getPlayer().setScore(Integer.parseInt(lineTokens[1]));&#xD;
			} else if(lineTokens[0].equals(&quot;CURRENT_MOVE&quot;)) {&#xD;
				game.setCurrentMove(lineTokens[1]);&#xD;
			}&#xD;
			&#xD;
			line = reader.readLine();&#xD;
		}&#xD;
		&#xD;
		reader.close();&#xD;
		return game;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KC-g6kFEeK3oZB5eR7Ndw" name="save" specification="_2INygKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KC-hKkFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2KC-hakFEeK3oZB5eR7Ndw" name="game" type="_19cF4KkFEeK3oZB5eR7Ndw"/>
              <language>java</language>
              <body>BufferedWriter writer = new BufferedWriter(new FileWriter(path));&#xD;
		&#xD;
		// Get the game properties&#xD;
		int rows = game.getSettings().getRows();&#xD;
		int columns = game.getSettings().getColumns();&#xD;
		String gameMode = game.getClass().getName().equals(&quot;com.labyrinth.game.modes.TreasureChase&quot;) ? &quot;tc&quot; : &quot;lc&quot;;&#xD;
		&#xD;
		writer.write(&quot;ROWS &quot; + rows);&#xD;
		writer.newLine();&#xD;
		writer.write(&quot;COLUMNS &quot; + columns);&#xD;
		writer.newLine();&#xD;
		writer.write(&quot;GAME_MODE &quot; + gameMode);&#xD;
		writer.newLine();&#xD;
		&#xD;
		for(int i = 1; i &lt;= rows; i++) {&#xD;
			for(int j = 1; j &lt;= columns; j++) {&#xD;
				Tile t = game.getBoard().getTile(j, i);&#xD;
				&#xD;
				writer.write(&quot;TILE &quot; + t.getType() + &quot; &quot; + t.getRotation());&#xD;
				writer.newLine();&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		writer.write(&quot;TOKEN &quot; + game.getBoard().getTokenPos()[0] + &quot; &quot; + game.getBoard().getTokenPos()[1]);&#xD;
		writer.newLine();&#xD;
		&#xD;
		writer.write(&quot;TREASURE &quot; + game.getBoard().getTreasurePos()[0] + &quot; &quot; + game.getBoard().getTreasurePos()[1]);&#xD;
		writer.newLine();&#xD;
		&#xD;
		writer.write(&quot;ROUND &quot; + game.getRound());&#xD;
		writer.newLine();&#xD;
		&#xD;
		writer.write(&quot;SCORE &quot; + game.getPlayer().getScore());&#xD;
		writer.newLine();&#xD;
		&#xD;
		writer.write(&quot;CURRENT_MOVE &quot; + game.getCurrentMove());&#xD;
		writer.newLine();&#xD;
		&#xD;
		writer.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KDlkKkFEeK3oZB5eR7Ndw" name="addGameEntry" specification="_18aLIKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KDlkakFEeK3oZB5eR7Ndw" name="name">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>String path = Labyrinth.LOAD_PATH + &quot;list&quot;;&#xD;
		BufferedWriter writer = new BufferedWriter(new FileWriter(path, true));&#xD;
		&#xD;
		writer.write(name);&#xD;
		writer.newLine();&#xD;
		writer.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_18Xu4KkFEeK3oZB5eR7Ndw" name="load" method="_2KC-gKkFEeK3oZB5eR7Ndw" raisedException="_2IQOwakFEeK3oZB5eR7Ndw _2ISD8akFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_18YV8KkFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2INLcKkFEeK3oZB5eR7Ndw" type="_19cF4KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_18aLIKkFEeK3oZB5eR7Ndw" name="addGameEntry" method="_2KDlkKkFEeK3oZB5eR7Ndw" raisedException="_2ISD8akFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_18aLIakFEeK3oZB5eR7Ndw" name="name">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_2INygKkFEeK3oZB5eR7Ndw" name="save" method="_2KC-g6kFEeK3oZB5eR7Ndw" raisedException="_2ISD8akFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2INygakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2INygqkFEeK3oZB5eR7Ndw" name="game" type="_19cF4KkFEeK3oZB5eR7Ndw"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_18d1gKkFEeK3oZB5eR7Ndw" name="IllegalMoveException">
            <ownedComment xmi:id="_2KpbcKkFEeK3oZB5eR7Ndw">
              <body>Thrown when an illegal move occurs.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.20032013&#xD;
 *</body>
            </ownedComment>
            <generalization xmi:id="_2I7kMakFEeK3oZB5eR7Ndw" general="_2I69IKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JPGMakFEeK3oZB5eR7Ndw" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_2JPtQKkFEeK3oZB5eR7Ndw" value="6221847028052337813L"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KDlkqkFEeK3oZB5eR7Ndw" name="IllegalMoveException" specification="_18eckKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KDlk6kFEeK3oZB5eR7Ndw" type="_18d1gKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>super();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KEMoKkFEeK3oZB5eR7Ndw" name="IllegalMoveException" specification="_18fqsKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KEMoakFEeK3oZB5eR7Ndw" name="message">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2KEMoqkFEeK3oZB5eR7Ndw" type="_18d1gKkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>super(message);&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_18eckKkFEeK3oZB5eR7Ndw" name="IllegalMoveException" method="_2KDlkqkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_18fDoKkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_18fDoakFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedParameter xmi:id="_18fDoqkFEeK3oZB5eR7Ndw" type="_18d1gKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_18fqsKkFEeK3oZB5eR7Ndw" name="IllegalMoveException" method="_2KEMoKkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_18fqsqkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_18gRwKkFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedParameter xmi:id="_18fqsakFEeK3oZB5eR7Ndw" name="message">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18gRwakFEeK3oZB5eR7Ndw" type="_18d1gKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_18hf4KkFEeK3oZB5eR7Ndw" name="Leaderboard">
            <ownedComment xmi:id="_2KpbcakFEeK3oZB5eR7Ndw">
              <body>Represents the leaderboard in the Labyrinth game.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.26032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_2JPtQakFEeK3oZB5eR7Ndw" name="names" type="_2IKvMKkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LKY0akFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JQUUakFEeK3oZB5eR7Ndw" name="scores" type="_2IKvMKkFEeK3oZB5eR7Ndw" isReadOnly="true" association="_2LK_4KkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JQ7YakFEeK3oZB5eR7Ndw" name="path" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KEMo6kFEeK3oZB5eR7Ndw" name="Leaderboard" specification="_18jVEKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KEMpKkFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2KEMpakFEeK3oZB5eR7Ndw" type="_18hf4KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this.names = new ArrayList&lt;String>();&#xD;
		this.scores = new ArrayList&lt;Integer>();&#xD;
		this.path = path;&#xD;
		&#xD;
		try {&#xD;
			load(path);&#xD;
		} catch(FileNotFoundException e) {&#xD;
			System.out.println(&quot;Error: Leaderboard file not found: &quot; + path);&#xD;
		} catch(IOException e) {&#xD;
			System.out.println(&quot;Error: Leaderboard IO error: &quot; + path);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KEzsKkFEeK3oZB5eR7Ndw" name="submit" specification="_18j8IKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KEzsakFEeK3oZB5eR7Ndw" name="name">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2KEzsqkFEeK3oZB5eR7Ndw" name="score">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>// Check if leaderboard is empty first&#xD;
		if(scores.isEmpty()) {&#xD;
			names.add(name);&#xD;
			scores.add(score);&#xD;
			return;&#xD;
		}&#xD;
		&#xD;
		int placementIndex = 0;&#xD;
		&#xD;
		for(int i = 0; i &lt; scores.size(); i++) {&#xD;
			if(scores.get(i) > score) {&#xD;
				placementIndex = i;&#xD;
				break;&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		names.add(placementIndex, name);&#xD;
		scores.add(placementIndex, score);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KEzs6kFEeK3oZB5eR7Ndw" name="load" specification="_18lKQKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KEztKkFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>BufferedReader reader = new BufferedReader(new FileReader(path));&#xD;
		Scanner scanner = null;&#xD;
		&#xD;
		String line = reader.readLine();&#xD;
		&#xD;
		while(line != null) {&#xD;
			scanner = new Scanner(line);&#xD;
			String[] entry;&#xD;
			&#xD;
			try {&#xD;
				entry = scanner.nextLine().split(&quot; &quot;);&#xD;
			} catch(NoSuchElementException e) {&#xD;
				// No line was found, just skip&#xD;
				line = reader.readLine();&#xD;
				continue;&#xD;
			}&#xD;
			&#xD;
			if(entry.length &lt; 2) {&#xD;
				scanner.close();&#xD;
				reader.close();&#xD;
				throw new IOException(&quot;Invalid entry in leaderboard!&quot;);&#xD;
			}&#xD;
			&#xD;
			names.add(entry[0]);&#xD;
			&#xD;
			try {&#xD;
				scores.add(Integer.parseInt(entry[1]));&#xD;
			} catch(NumberFormatException e) {&#xD;
				scanner.close();&#xD;
				reader.close();&#xD;
				throw new IOException(&quot;Invalid entry in leaderboard!&quot;);&#xD;
			}&#xD;
			&#xD;
			scanner.close();&#xD;
			line = reader.readLine();&#xD;
		}&#xD;
		&#xD;
		reader.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KFawKkFEeK3oZB5eR7Ndw" name="save" specification="_18mYYKkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>BufferedWriter writer = new BufferedWriter(new FileWriter(path));&#xD;
&#xD;
		// Save the leaderboard&#xD;
		for(int i = 0; i &lt; names.size(); i++) {&#xD;
			writer.write(names.get(i) + &quot; &quot; + scores.get(i));&#xD;
			writer.newLine();&#xD;
		}&#xD;
&#xD;
		writer.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_18jVEKkFEeK3oZB5eR7Ndw" name="Leaderboard" method="_2KEMo6kFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_18jVEqkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_18jVE6kFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2KpbcqkFEeK3oZB5eR7Ndw">
                <body>Construct a leader board from an existing leader board file.&#xD;
	 * &#xD;
	 * @param path The leaderboard file to load.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18jVEakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18jVFKkFEeK3oZB5eR7Ndw" type="_18hf4KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_18j8IKkFEeK3oZB5eR7Ndw" name="submit" method="_2KEzsKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kpbc6kFEeK3oZB5eR7Ndw">
                <body>Submit a score to the leaderboard.&#xD;
	 * &#xD;
	 * @param name The name of the player.&#xD;
	 * @param score The score to submit.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18j8IakFEeK3oZB5eR7Ndw" name="name">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_18kjMKkFEeK3oZB5eR7Ndw" name="score">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_18lKQKkFEeK3oZB5eR7Ndw" name="load" method="_2KEzs6kFEeK3oZB5eR7Ndw" raisedException="_2ISD8akFEeK3oZB5eR7Ndw _2IQOwakFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KpbdKkFEeK3oZB5eR7Ndw">
                <body>Load a leaderboard from an existing file in the format of:&#xD;
	 * &#xD;
	 * NAME SCORE&#xD;
	 * NAME SCORE&#xD;
	 * ...&#xD;
	 * &#xD;
	 * Where the entries are in ascending order (i.e. entry 1 is number 1, entry 2 is number 2, etc.)&#xD;
	 * &#xD;
	 * @param path The path to the leaderboard file.&#xD;
	 * @throws IOException If a general IO error occurs.&#xD;
	 * @throws FileNotFoundException If the leaderboard file is not found.</body>
              </ownedComment>
              <ownedParameter xmi:id="_18lKQakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_18mYYKkFEeK3oZB5eR7Ndw" name="save" method="_2KFawKkFEeK3oZB5eR7Ndw" raisedException="_2ISD8akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KqCgKkFEeK3oZB5eR7Ndw">
                <body>Save the entries to the leaderboard file. Result is in ascending order:&#xD;
	 * &#xD;
	 * NAME SCORE&#xD;
	 * NAME SCORE&#xD;
	 * ...&#xD;
	 * &#xD;
	 * @throws IOException If an error occurs when writing to leaderboard file.</body>
              </ownedComment>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_18rQ4KkFEeK3oZB5eR7Ndw" name="Player">
            <ownedComment xmi:id="_2KqCgakFEeK3oZB5eR7Ndw">
              <body>Represents a player.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_2JRicakFEeK3oZB5eR7Ndw" name="score">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JSJgKkFEeK3oZB5eR7Ndw" name="moves">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JSJgakFEeK3oZB5eR7Ndw" name="spareTile" type="_18_Z8KkFEeK3oZB5eR7Ndw" association="_2KqpkKkFEeK3oZB5eR7Ndw"/>
            <ownedAttribute xmi:id="_2JSJgqkFEeK3oZB5eR7Ndw" name="lastMove" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KGB0KkFEeK3oZB5eR7Ndw" name="Player" specification="_18ttIKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KGB0akFEeK3oZB5eR7Ndw" type="_18rQ4KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this.score = 0;&#xD;
		this.moves = 0;&#xD;
		this.lastMove = &quot;N/A&quot;;&#xD;
		&#xD;
		// Generate a random spare tile&#xD;
		Random r = new Random();&#xD;
		int randomSelection = r.nextInt(4); // CORNER, LINE, TSHAPE, CROSS&#xD;
		int rotation = r.nextInt(4); // DEFAULT, NINETY, HUNDREDANDEIGHTY, TWOHUNDREDANDSEVENTY&#xD;
		&#xD;
		TileType[] tileTypes = TileType.values();&#xD;
		RotationAngle[] rotationAngles = RotationAngle.values();&#xD;
		&#xD;
		this.spareTile = new Tile(tileTypes[randomSelection], rotationAngles[rotation]);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KGB0qkFEeK3oZB5eR7Ndw" name="updateLastMove" specification="_18uUMKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KGB06kFEeK3oZB5eR7Ndw" name="s">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>lastMove = s;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_18ttIKkFEeK3oZB5eR7Ndw" name="Player" method="_2KGB0KkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_18ttIakFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_18ttIqkFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedParameter xmi:id="_18ttI6kFEeK3oZB5eR7Ndw" type="_18rQ4KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_18uUMKkFEeK3oZB5eR7Ndw" name="updateLastMove" method="_2KGB0qkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_18uUMakFEeK3oZB5eR7Ndw" name="s">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_18xXgKkFEeK3oZB5eR7Ndw" name="RotationAngle">
            <ownedComment xmi:id="_2KrQoKkFEeK3oZB5eR7Ndw">
              <body>Used to represent the choice of possible rotation angles for use with tile&#xD;
manipulation.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.07032013&#xD;
 *</body>
            </ownedComment>
            <ownedOperation xmi:id="_18zMsKkFEeK3oZB5eR7Ndw" name="convertFromInt" isStatic="true" method="_2KGo46kFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_18zMsakFEeK3oZB5eR7Ndw" name="angle">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2IWVYqkFEeK3oZB5eR7Ndw" type="_18xXgKkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_2IVuUKkFEeK3oZB5eR7Ndw" name="convertToInt" isStatic="true" method="_2KGo4KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2IWVYKkFEeK3oZB5eR7Ndw" name="ra" type="_18xXgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2IWVYakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedLiteral xmi:id="_18x-kKkFEeK3oZB5eR7Ndw" name="DEFAULT"/>
            <ownedLiteral xmi:id="_18x-kakFEeK3oZB5eR7Ndw" name="NINETY"/>
            <ownedLiteral xmi:id="_18x-kqkFEeK3oZB5eR7Ndw" name="HUNDREDANDEIGHTY"/>
            <ownedLiteral xmi:id="_18yloKkFEeK3oZB5eR7Ndw" name="TWOHUNDREDANDSEVENTY"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_181B4KkFEeK3oZB5eR7Ndw" name="SettingsManager">
            <ownedComment xmi:id="_2KrQoakFEeK3oZB5eR7Ndw">
              <body>Manages settings and configurations for the Labyrinth game. Allows for the loading&#xD;
and saving of configuration files. If an invalid or non-existant file is passed, the&#xD;
default settings are used.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.19042013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_2JSwkKkFEeK3oZB5eR7Ndw" name="rows" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JSwkakFEeK3oZB5eR7Ndw" name="columns" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JTXoakFEeK3oZB5eR7Ndw" name="leaderboard">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KHP8qkFEeK3oZB5eR7Ndw" name="SettingsManager" specification="_1823EKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KHP86kFEeK3oZB5eR7Ndw" type="_181B4KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>// Set to default&#xD;
		setDefault();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KH3AKkFEeK3oZB5eR7Ndw" name="SettingsManager" specification="_183eIKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KH3AakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2KH3AqkFEeK3oZB5eR7Ndw" type="_181B4KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>// Set to 'erroneous' values first&#xD;
		rows = 0;&#xD;
		columns = 0;&#xD;
		leaderboard = null;&#xD;
&#xD;
		// Load settings from file&#xD;
		try {&#xD;
			load(path);&#xD;
		}&#xD;
		catch(IOException e) {&#xD;
			System.out.println(e.getMessage());&#xD;
			System.out.println(&quot;Note: Using default settings instead&quot;);&#xD;
			setDefault();&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KH3A6kFEeK3oZB5eR7Ndw" name="setDefault" specification="_184FMqkFEeK3oZB5eR7Ndw">
              <language>java</language>
              <body>rows = 7;&#xD;
		columns = 7;&#xD;
		leaderboard = &quot;leaderboards/default&quot;;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KH3BKkFEeK3oZB5eR7Ndw" name="load" specification="_184sQKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KH3BakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>try {&#xD;
			BufferedReader reader = new BufferedReader(new FileReader(path));&#xD;
			Scanner scanner = null;&#xD;
&#xD;
			String line = reader.readLine();&#xD;
&#xD;
			while(line != null) {&#xD;
				scanner = new Scanner(line);&#xD;
				String[] entry = null;&#xD;
				&#xD;
				try {&#xD;
					entry = scanner.nextLine().split(&quot; &quot;);&#xD;
				} catch(NoSuchElementException e) {&#xD;
					// Empty line, just skip&#xD;
					line = reader.readLine();&#xD;
					continue;&#xD;
				}&#xD;
				&#xD;
				if(entry.length &lt; 2) {&#xD;
					scanner.close();&#xD;
					reader.close();&#xD;
					throw new IOException(&quot;Invalid entry in settings file!&quot;);&#xD;
				}&#xD;
&#xD;
				if(entry[0].equals(&quot;ROWS&quot;)) {&#xD;
					// Line contains ROWS value&#xD;
					int r;&#xD;
&#xD;
					try {&#xD;
						r = Integer.parseInt(entry[1]);&#xD;
						&#xD;
						if((r % 2 == 0) || (r &lt; 5) || (r > 15)) {&#xD;
							// Violates row rules&#xD;
							scanner.close();&#xD;
							reader.close();&#xD;
							throw new IOException(&quot;Rows must be odd, and between 5 and 15 (inclusive)&quot;);&#xD;
						}&#xD;
					}&#xD;
					catch(NumberFormatException e) {&#xD;
						scanner.close();&#xD;
						reader.close();&#xD;
						throw new IOException(&quot;Settings file is invalid: '&quot; + entry[0] + &quot;' contains invalid value.&quot;);&#xD;
					}&#xD;
&#xD;
					// Set rows to that specified in settings file&#xD;
					this.rows = r;&#xD;
				}&#xD;
				else if(entry[0].equals(&quot;COLUMNS&quot;)) {&#xD;
					// Line contains ROWS value&#xD;
					int c;&#xD;
&#xD;
					try {&#xD;
						c = Integer.parseInt(entry[1]);&#xD;
						&#xD;
						if((c % 2 == 0) || (c &lt; 5) || (c > 15)) {&#xD;
							// Violates row rules&#xD;
							scanner.close();&#xD;
							reader.close();&#xD;
							throw new IOException(&quot;Columns must be odd, and between 5 and 15 (inclusive)&quot;);&#xD;
						}&#xD;
					}&#xD;
					catch(NumberFormatException e) {&#xD;
						scanner.close();&#xD;
						reader.close();&#xD;
						throw new IOException(&quot;Settings file is invalid: '&quot; + entry[0] + &quot;' contains invalid value.&quot;);&#xD;
					}&#xD;
&#xD;
					// Set columns to that specified in settings file&#xD;
					this.columns = c;&#xD;
				}&#xD;
				else if(entry[0].equals(&quot;LEADERBOARD&quot;)) {&#xD;
					// Set leaderboard to that specified in settings file&#xD;
					this.leaderboard = entry[1];&#xD;
				}&#xD;
				else {&#xD;
					// Invalid type?&#xD;
					scanner.close();&#xD;
					reader.close();&#xD;
					throw new IOException(&quot;Settings file is invalid: '&quot; + entry[0] + &quot;' is an invalid type.&quot;);&#xD;
				}&#xD;
&#xD;
				line = reader.readLine();&#xD;
			}&#xD;
&#xD;
			scanner.close();&#xD;
			reader.close();&#xD;
		}&#xD;
		catch(FileNotFoundException e) {&#xD;
			throw new IOException(&quot;Settings file not found: path = &quot; + path);&#xD;
		}&#xD;
&#xD;
		// Check if any values remain unset, if so set to default value(s)&#xD;
		if(rows == 0) {&#xD;
			rows = 7;&#xD;
		}&#xD;
		if(columns == 0) {&#xD;
			columns = 7;&#xD;
		}&#xD;
		if(leaderboard == null) {&#xD;
			leaderboard = &quot;leaderboards/default&quot;;&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KIeEKkFEeK3oZB5eR7Ndw" name="save" specification="_1856YKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KIeEakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>BufferedWriter writer = new BufferedWriter(new FileWriter(path));&#xD;
&#xD;
		// Save the settings&#xD;
		writer.write(&quot;ROWS &quot; + rows);&#xD;
		writer.newLine();&#xD;
		writer.write(&quot;COLUMNS &quot; + columns);&#xD;
		writer.newLine();&#xD;
		writer.write(&quot;LEADERBOARD &quot; + leaderboard);&#xD;
		writer.newLine();&#xD;
&#xD;
		writer.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KIeEqkFEeK3oZB5eR7Ndw" name="getColumns" specification="_186hcKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KIeE6kFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>return columns;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KIeFKkFEeK3oZB5eR7Ndw" name="setRows" specification="_187IgKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KIeFakFEeK3oZB5eR7Ndw" name="rows">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>this.rows = rows;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KJFIKkFEeK3oZB5eR7Ndw" name="setColumns" specification="_187vkKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KJFIakFEeK3oZB5eR7Ndw" name="columns">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>this.columns = columns;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_1823EKkFEeK3oZB5eR7Ndw" name="SettingsManager" method="_2KHP8qkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_1823EakFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_1823EqkFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2KrQoqkFEeK3oZB5eR7Ndw">
                <body>Construct a SettingsManager with default settings.</body>
              </ownedComment>
              <ownedParameter xmi:id="_1823E6kFEeK3oZB5eR7Ndw" type="_181B4KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_183eIKkFEeK3oZB5eR7Ndw" name="SettingsManager" method="_2KH3AKkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_183eIqkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_184FMKkFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2Kr3sKkFEeK3oZB5eR7Ndw">
                <body>Construct a SettingsManager with predefined settings. If the file&#xD;
	 * is invalid or does not exist, then default settings are used.&#xD;
	 * The user is notified of this via the standard output.&#xD;
	 * &#xD;
	 * @param path The path to the settings file.</body>
              </ownedComment>
              <ownedParameter xmi:id="_183eIakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_184FMakFEeK3oZB5eR7Ndw" type="_181B4KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_184FMqkFEeK3oZB5eR7Ndw" name="setDefault" method="_2KH3A6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kr3sakFEeK3oZB5eR7Ndw">
                <body>Set all the values in the settings to their default values.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_184sQKkFEeK3oZB5eR7Ndw" name="load" method="_2KH3BKkFEeK3oZB5eR7Ndw" raisedException="_2ISD8akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kr3sqkFEeK3oZB5eR7Ndw">
                <body>Explicitly load settings in from a specified file path. Must be in the format:&#xD;
	 * &#xD;
	 * ROWS &lt;no_rows>&#xD;
	 * COLUMNS &lt;no_columns>&#xD;
	 * LEADERBOARD &lt;leaderboard_path>&#xD;
	 * &#xD;
	 * @param path The path to the settings file.&#xD;
	 * @throws IOException Thrown when the file is not found or invalid.</body>
              </ownedComment>
              <ownedParameter xmi:id="_184sQakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_1856YKkFEeK3oZB5eR7Ndw" name="save" method="_2KIeEKkFEeK3oZB5eR7Ndw" raisedException="_2ISD8akFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kr3s6kFEeK3oZB5eR7Ndw">
                <body>Save the current defined settings to a specified settings file. Will be in&#xD;
	 * the format of:&#xD;
	 * &#xD;
	 * ROWS &lt;no_rows>&#xD;
	 * COLUMNS &lt;no_columns>&#xD;
	 * LEADERBOARD &lt;leaderboard_path>&#xD;
	 * &#xD;
	 * @param path The path to the settings file.&#xD;
	 * @throws IOException Thrown when can't write to file.</body>
              </ownedComment>
              <ownedParameter xmi:id="_1856YakFEeK3oZB5eR7Ndw" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_186hcKkFEeK3oZB5eR7Ndw" name="getColumns" method="_2KIeEqkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kr3tKkFEeK3oZB5eR7Ndw">
                <body>Get the number of columns.</body>
              </ownedComment>
              <ownedParameter xmi:id="_186hcakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_187IgKkFEeK3oZB5eR7Ndw" name="setRows" method="_2KIeFKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kr3takFEeK3oZB5eR7Ndw">
                <body>Set the number of rows.</body>
              </ownedComment>
              <ownedParameter xmi:id="_187IgakFEeK3oZB5eR7Ndw" name="rows">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_187vkKkFEeK3oZB5eR7Ndw" name="setColumns" method="_2KJFIKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kr3tqkFEeK3oZB5eR7Ndw">
                <body>Set the number of columns.</body>
              </ownedComment>
              <ownedParameter xmi:id="_187vkakFEeK3oZB5eR7Ndw" name="columns">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_18_Z8KkFEeK3oZB5eR7Ndw" name="Tile">
            <ownedComment xmi:id="_2KsewKkFEeK3oZB5eR7Ndw">
              <body>Represents a tile for use within a board.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_2JT-sKkFEeK3oZB5eR7Ndw" name="type" type="_19YbgKkFEeK3oZB5eR7Ndw" isReadOnly="true"/>
            <ownedAttribute xmi:id="_2JT-sakFEeK3oZB5eR7Ndw" name="rotation" type="_18xXgKkFEeK3oZB5eR7Ndw" isReadOnly="true"/>
            <ownedAttribute xmi:id="_2JT-sqkFEeK3oZB5eR7Ndw" name="treasure" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JUlwakFEeK3oZB5eR7Ndw" name="token" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JVM0KkFEeK3oZB5eR7Ndw" name="movable" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JVM0akFEeK3oZB5eR7Ndw" name="tileString" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2JVM0qkFEeK3oZB5eR7Ndw" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JVz4KkFEeK3oZB5eR7Ndw" name="north" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JVz4qkFEeK3oZB5eR7Ndw" name="east" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JXCAKkFEeK3oZB5eR7Ndw" name="south" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_2JXCAqkFEeK3oZB5eR7Ndw" name="west" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KKTQqkFEeK3oZB5eR7Ndw" name="Tile" specification="_2IYKkKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KKTQ6kFEeK3oZB5eR7Ndw" name="type" type="_19YbgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2KKTRKkFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this.type = type;&#xD;
		this.rotation = RotationAngle.DEFAULT;&#xD;
		this.treasure = false;&#xD;
		this.token = false;&#xD;
		this.movable = true;&#xD;
		this.tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KKTRakFEeK3oZB5eR7Ndw" name="Tile" specification="_2IYKlakFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KKTRqkFEeK3oZB5eR7Ndw" name="type" type="_19YbgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2KKTR6kFEeK3oZB5eR7Ndw" name="rotation" type="_18xXgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2KKTSKkFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this(type);&#xD;
		this.rotation = rotation;&#xD;
		this.tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KK6UKkFEeK3oZB5eR7Ndw" name="Tile" specification="_2IYxpKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KK6UakFEeK3oZB5eR7Ndw" name="type" type="_19YbgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2KK6UqkFEeK3oZB5eR7Ndw" name="rotation" type="_18xXgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2KK6U6kFEeK3oZB5eR7Ndw" name="movable">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2KK6VKkFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
              <language>java</language>
              <body>this(type, rotation);&#xD;
		this.movable = movable;&#xD;
		this.tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KK6VakFEeK3oZB5eR7Ndw" name="setType" specification="_2IZYtKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KK6VqkFEeK3oZB5eR7Ndw" name="newType" type="_19YbgKkFEeK3oZB5eR7Ndw"/>
              <language>java</language>
              <body>type = newType;&#xD;
		&#xD;
		// Type has been altered, reform tile string&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KLhYKkFEeK3oZB5eR7Ndw" name="hasTreasure" specification="_19FgkKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KLhYakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>return treasure;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KLhYqkFEeK3oZB5eR7Ndw" name="setTreasure" specification="_19GHoakFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KLhY6kFEeK3oZB5eR7Ndw" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>treasure = state;&#xD;
		&#xD;
		// Treasure has been altered, re-form the tile string&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KLhZKkFEeK3oZB5eR7Ndw" name="setRotation" specification="_2IZ_wKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KMIcKkFEeK3oZB5eR7Ndw" name="newRotation" type="_18xXgKkFEeK3oZB5eR7Ndw"/>
              <language>java</language>
              <body>if(!isMovable())&#xD;
			return;&#xD;
		&#xD;
		rotation = newRotation;&#xD;
		&#xD;
		// Rotation has been altered, reform the tile string&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KMIcakFEeK3oZB5eR7Ndw" name="hasToken" specification="_19HVwKkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KMIcqkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>return token;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KMIc6kFEeK3oZB5eR7Ndw" name="setToken" specification="_19H80KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KMIdKkFEeK3oZB5eR7Ndw" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>token = state;&#xD;
		&#xD;
		// Token has been altered, reform the tile string&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KMvgKkFEeK3oZB5eR7Ndw" name="setMovable" specification="_19Ij4KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KMvgakFEeK3oZB5eR7Ndw" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>movable = state;&#xD;
		&#xD;
		// Reform tile string to reflect new state&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KMvgqkFEeK3oZB5eR7Ndw" name="convertFromPattern" specification="_19JK8KkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KMvg6kFEeK3oZB5eR7Ndw" name="pattern">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KMvhKkFEeK3oZB5eR7Ndw" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2KMvhakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KMvhqkFEeK3oZB5eR7Ndw" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>for(int i = 0; i &lt; pattern.length; i++) {&#xD;
			pattern[i] = pattern[i].replace('1', CharacterElements.charBlock);&#xD;
			pattern[i] = pattern[i].replace('0', ' ');&#xD;
		}&#xD;
		&#xD;
		return pattern;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KNWkKkFEeK3oZB5eR7Ndw" name="formTileString" specification="_19KZEakFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KNWkakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2KNWkqkFEeK3oZB5eR7Ndw" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>String[] tile = new String[5];&#xD;
		&#xD;
		switch(type) {&#xD;
		case CROSS:&#xD;
			tile[0] = &quot;1100011&quot;;&#xD;
			tile[1] = &quot;1100011&quot;;&#xD;
			tile[2] = &quot;0000000&quot;;&#xD;
			tile[3] = &quot;1100011&quot;;&#xD;
			tile[4] = &quot;1100011&quot;;&#xD;
			&#xD;
			// Set entry points&#xD;
			north = true;&#xD;
			east = true;&#xD;
			south = true;&#xD;
			west = true;&#xD;
			&#xD;
			break;&#xD;
		case TSHAPE:&#xD;
			if(rotation == RotationAngle.DEFAULT) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;1100000&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = true;&#xD;
				south = true;&#xD;
				west = false;&#xD;
			} else if(rotation == RotationAngle.NINETY) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;0000000&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = true;&#xD;
				south = true;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.HUNDREDANDEIGHTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;0000011&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = false;&#xD;
				south = true;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.TWOHUNDREDANDSEVENTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;0000000&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = true;&#xD;
				south = false;&#xD;
				west = true;&#xD;
			}&#xD;
			&#xD;
			break;&#xD;
		case LINE:&#xD;
			if(rotation == RotationAngle.DEFAULT) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;1100011&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = false;&#xD;
				south = true;&#xD;
				west = false;&#xD;
			} else if(rotation == RotationAngle.NINETY) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;0000000&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = true;&#xD;
				south = false;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.HUNDREDANDEIGHTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;1100011&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = false;&#xD;
				south = true;&#xD;
				west = false;&#xD;
			} else if(rotation == RotationAngle.TWOHUNDREDANDSEVENTY) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;0000000&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = true;&#xD;
				south = false;&#xD;
				west = true;&#xD;
			}&#xD;
			&#xD;
			break;&#xD;
		case CORNER:&#xD;
			if(rotation == RotationAngle.DEFAULT) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;1100000&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = true;&#xD;
				south = true;&#xD;
				west = false;&#xD;
			} else if(rotation == RotationAngle.NINETY) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;0000011&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = false;&#xD;
				south = true;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.HUNDREDANDEIGHTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;0000011&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = false;&#xD;
				south = false;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.TWOHUNDREDANDSEVENTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;1100000&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = true;&#xD;
				south = false;&#xD;
				west = false;&#xD;
			}&#xD;
			&#xD;
			break;&#xD;
		case EMPTY:&#xD;
			tile[0] = &quot;0000000&quot;;&#xD;
			tile[1] = &quot;0000000&quot;;&#xD;
			tile[2] = &quot;0000000&quot;;&#xD;
			tile[3] = &quot;0000000&quot;;&#xD;
			tile[4] = &quot;0000000&quot;;&#xD;
			&#xD;
			// Set entry points&#xD;
			north = true;&#xD;
			east = true;&#xD;
			south = true;&#xD;
			west = true;&#xD;
			&#xD;
			break;&#xD;
		}&#xD;
		&#xD;
		// Convert pattern to appropriate characters&#xD;
		tile = convertFromPattern(tile);&#xD;
		&#xD;
		// Check if tile contains treasure or token&#xD;
		if(hasToken()) {&#xD;
			// Change middle section, middle element to token&#xD;
			char[] tileMiddle = tile[2].toCharArray();&#xD;
			tileMiddle[3] = CharacterElements.charToken; // Set to token&#xD;
			tile[2] = new String(tileMiddle);&#xD;
		}&#xD;
		else if(hasTreasure()) {&#xD;
			// Change middle section, middle element to treasure&#xD;
			char[] tileMiddle = tile[2].toCharArray();&#xD;
			tileMiddle[3] = CharacterElements.charTreasure; // Set to token&#xD;
			tile[2] = new String(tileMiddle);&#xD;
		}&#xD;
		&#xD;
		// Check if tile is immovable&#xD;
		if(!isMovable()) {&#xD;
			// Change tile string to fixed representation&#xD;
			for(int i = 0; i &lt; 5; i++)&#xD;
				tile[i] = tile[i].replace(' ', CharacterElements.charImmovable);&#xD;
		}&#xD;
		&#xD;
		return tile;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KNWk6kFEeK3oZB5eR7Ndw" name="getNorth" specification="_19LAIqkFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KNWlKkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>return north;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2KNWlakFEeK3oZB5eR7Ndw" name="getSouth" specification="_19LnMakFEeK3oZB5eR7Ndw">
              <ownedParameter xmi:id="_2KNWlqkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>return south;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_19FgkKkFEeK3oZB5eR7Ndw" name="hasTreasure" method="_2KLhYKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KtF0qkFEeK3oZB5eR7Ndw">
                <body>Check whether or not the tile contains treasure.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19GHoKkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_19GHoakFEeK3oZB5eR7Ndw" name="setTreasure" method="_2KLhYqkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KtF06kFEeK3oZB5eR7Ndw">
                <body>Set whether or not the tile contains treasure.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19GHoqkFEeK3oZB5eR7Ndw" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_19HVwKkFEeK3oZB5eR7Ndw" name="hasToken" method="_2KMIcakFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KtF1akFEeK3oZB5eR7Ndw">
                <body>Check whether or not the tile contains the token.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19HVwakFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_19H80KkFEeK3oZB5eR7Ndw" name="setToken" method="_2KMIc6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KtF1qkFEeK3oZB5eR7Ndw">
                <body>Set whether or not the tile contains the token.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19H80akFEeK3oZB5eR7Ndw" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_19Ij4KkFEeK3oZB5eR7Ndw" name="setMovable" method="_2KMvgKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KtF16kFEeK3oZB5eR7Ndw">
                <body>Set whether or not the tile is movable.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19Ij4akFEeK3oZB5eR7Ndw" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_19JK8KkFEeK3oZB5eR7Ndw" name="convertFromPattern" visibility="private" method="_2KMvgqkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kts4KkFEeK3oZB5eR7Ndw">
                <body>Convert a tile pattern to its final string representation.&#xD;
	 * &#xD;
	 * @param pattern The tile pattern. For example, a cross:&#xD;
	 * &#xD;
	 * pattern[0] = &quot;1100011&quot;&#xD;
	 * pattern[1] = &quot;1100011&quot;&#xD;
	 * pattern[2] = &quot;0000000&quot;&#xD;
	 * pattern[3] = &quot;1100011&quot;&#xD;
	 * pattern[4] = &quot;1100011&quot;&#xD;
	 * &#xD;
	 * @return The converted string equivalent.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19JK8akFEeK3oZB5eR7Ndw" name="pattern">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_19JyAqkFEeK3oZB5eR7Ndw" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_19JK8qkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_19JyAKkFEeK3oZB5eR7Ndw" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_19KZEakFEeK3oZB5eR7Ndw" name="formTileString" visibility="private" method="_2KNWkKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kts4akFEeK3oZB5eR7Ndw">
                <body>Form the tile string array in accordance to the tile type.&#xD;
	 * &#xD;
	 * @return The string array formation of the tile split up into top, top-middle,&#xD;
	 * middle, middle-bottom and bottom respectively.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19KZEqkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_19LAIKkFEeK3oZB5eR7Ndw" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_19LAIqkFEeK3oZB5eR7Ndw" name="getNorth" method="_2KNWk6kFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kts4qkFEeK3oZB5eR7Ndw">
                <body>Check whether or not the north access point is available.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19LnMKkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_19LnMakFEeK3oZB5eR7Ndw" name="getSouth" method="_2KNWlakFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2Kts46kFEeK3oZB5eR7Ndw">
                <body>Check whether or not the south access point is available.</body>
              </ownedComment>
              <ownedParameter xmi:id="_19MOQKkFEeK3oZB5eR7Ndw" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_2IYKkKkFEeK3oZB5eR7Ndw" name="Tile" method="_2KKTQqkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_2IYKkqkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_2IYKk6kFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2KsewakFEeK3oZB5eR7Ndw">
                <body>Construct a tile of a particular type.&#xD;
	 * &#xD;
	 * @param type The type of tile to construct.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2IYKkakFEeK3oZB5eR7Ndw" name="type" type="_19YbgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2IYKlKkFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_2IYKlakFEeK3oZB5eR7Ndw" name="Tile" method="_2KKTRakFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_2IYxoakFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_2IYxoqkFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_2KtF0KkFEeK3oZB5eR7Ndw">
                <body>Construct a tile of a particular type and rotation.&#xD;
	 * &#xD;
	 * @param type The type of tile to construct.&#xD;
	 * @param rotation The rotation of the tile to construct.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2IYKlqkFEeK3oZB5eR7Ndw" name="type" type="_19YbgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2IYxoKkFEeK3oZB5eR7Ndw" name="rotation" type="_18xXgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2IYxo6kFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_2IYxpKkFEeK3oZB5eR7Ndw" name="Tile" method="_2KK6UKkFEeK3oZB5eR7Ndw">
              <eAnnotations xmi:id="_2IZYsakFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_2IZYsqkFEeK3oZB5eR7Ndw" key="create"/>
              </eAnnotations>
              <ownedParameter xmi:id="_2IYxpakFEeK3oZB5eR7Ndw" name="type" type="_19YbgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2IYxpqkFEeK3oZB5eR7Ndw" name="rotation" type="_18xXgKkFEeK3oZB5eR7Ndw"/>
              <ownedParameter xmi:id="_2IZYsKkFEeK3oZB5eR7Ndw" name="movable">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <ownedParameter xmi:id="_2IZYs6kFEeK3oZB5eR7Ndw" type="_18_Z8KkFEeK3oZB5eR7Ndw" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_2IZYtKkFEeK3oZB5eR7Ndw" name="setType" method="_2KK6VakFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KtF0akFEeK3oZB5eR7Ndw">
                <body>Set the tile type.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2IZYtakFEeK3oZB5eR7Ndw" name="newType" type="_19YbgKkFEeK3oZB5eR7Ndw"/>
            </ownedOperation>
            <ownedOperation xmi:id="_2IZ_wKkFEeK3oZB5eR7Ndw" name="setRotation" method="_2KLhZKkFEeK3oZB5eR7Ndw">
              <ownedComment xmi:id="_2KtF1KkFEeK3oZB5eR7Ndw">
                <body>Set the rotation of the tile.</body>
              </ownedComment>
              <ownedParameter xmi:id="_2IZ_wakFEeK3oZB5eR7Ndw" name="newRotation" type="_18xXgKkFEeK3oZB5eR7Ndw"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_19YbgKkFEeK3oZB5eR7Ndw" name="TileType">
            <ownedLiteral xmi:id="_19ZCkakFEeK3oZB5eR7Ndw" name="CORNER"/>
            <ownedLiteral xmi:id="_19ZpoKkFEeK3oZB5eR7Ndw" name="LINE"/>
            <ownedLiteral xmi:id="_19ZpoakFEeK3oZB5eR7Ndw" name="TSHAPE"/>
            <ownedLiteral xmi:id="_19ZpoqkFEeK3oZB5eR7Ndw" name="CROSS"/>
            <ownedLiteral xmi:id="_19Zpo6kFEeK3oZB5eR7Ndw" name="EMPTY"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2KqpkKkFEeK3oZB5eR7Ndw" name="" memberEnd="_2JSJgakFEeK3oZB5eR7Ndw _2KqpkakFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2KqpkakFEeK3oZB5eR7Ndw" name="" type="_18rQ4KkFEeK3oZB5eR7Ndw" association="_2KqpkKkFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LH8kakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LH8kqkFEeK3oZB5eR7Ndw _2JI_kKkFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LH8kqkFEeK3oZB5eR7Ndw" name="" type="_18AigKkFEeK3oZB5eR7Ndw" association="_2LH8kakFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LIjoakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LIjoqkFEeK3oZB5eR7Ndw _2JK0wakFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LIjoqkFEeK3oZB5eR7Ndw" name="" type="_18AigKkFEeK3oZB5eR7Ndw" association="_2LIjoakFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LJKsKkFEeK3oZB5eR7Ndw" name="" memberEnd="_2LJKsakFEeK3oZB5eR7Ndw _2JLb0KkFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LJKsakFEeK3oZB5eR7Ndw" name="" type="_18K6kKkFEeK3oZB5eR7Ndw" association="_2LJKsKkFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LJKs6kFEeK3oZB5eR7Ndw" name="" memberEnd="_2LJKtKkFEeK3oZB5eR7Ndw _2JMp8akFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LJKtKkFEeK3oZB5eR7Ndw" name="" type="_18K6kKkFEeK3oZB5eR7Ndw" association="_2LJKs6kFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LJxwakFEeK3oZB5eR7Ndw" name="" memberEnd="_2LJxwqkFEeK3oZB5eR7Ndw _2JNRAqkFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LJxwqkFEeK3oZB5eR7Ndw" name="" type="_18K6kKkFEeK3oZB5eR7Ndw" association="_2LJxwakFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LKY0akFEeK3oZB5eR7Ndw" name="" memberEnd="_2LKY0qkFEeK3oZB5eR7Ndw _2JPtQakFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LKY0qkFEeK3oZB5eR7Ndw" name="" type="_18hf4KkFEeK3oZB5eR7Ndw" association="_2LKY0akFEeK3oZB5eR7Ndw"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_2LK_4KkFEeK3oZB5eR7Ndw" name="" memberEnd="_2LK_4akFEeK3oZB5eR7Ndw _2JQUUakFEeK3oZB5eR7Ndw">
            <ownedEnd xmi:id="_2LK_4akFEeK3oZB5eR7Ndw" name="" type="_18hf4KkFEeK3oZB5eR7Ndw" association="_2LK_4KkFEeK3oZB5eR7Ndw"/>
          </packagedElement>
        </packagedElement>
        <packagedElement xmi:type="uml:Class" xmi:id="_174msKkFEeK3oZB5eR7Ndw" name="Labyrinth">
          <ownedComment xmi:id="_2KnmQKkFEeK3oZB5eR7Ndw">
            <body>The main entry point to the Labyrinth game.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.22032013&#xD;
 *</body>
          </ownedComment>
          <ownedAttribute xmi:id="_2JHxcKkFEeK3oZB5eR7Ndw" name="SETTINGS_FILE" isLeaf="true" isStatic="true" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <defaultValue xmi:type="uml:LiteralString" xmi:id="_2JIYgKkFEeK3oZB5eR7Ndw" value="&quot;settings/default&quot;"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_2JIYgakFEeK3oZB5eR7Ndw" name="HELP_FILE" isLeaf="true" isStatic="true" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <defaultValue xmi:type="uml:LiteralString" xmi:id="_2JIYgqkFEeK3oZB5eR7Ndw" value="&quot;media/help.txt&quot;"/>
          </ownedAttribute>
          <ownedAttribute xmi:id="_2JIYg6kFEeK3oZB5eR7Ndw" name="LOAD_PATH" isLeaf="true" isStatic="true" isReadOnly="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            <defaultValue xmi:type="uml:LiteralString" xmi:id="_2JIYhKkFEeK3oZB5eR7Ndw" value="&quot;saves/&quot;"/>
          </ownedAttribute>
          <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_2J834KkFEeK3oZB5eR7Ndw" name="main" specification="_17-GQKkFEeK3oZB5eR7Ndw">
            <ownedParameter xmi:id="_2J834akFEeK3oZB5eR7Ndw" name="args">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_2J834qkFEeK3oZB5eR7Ndw" value="*"/>
            </ownedParameter>
            <language>java</language>
            <body>// Set the static characters in accordance to the charset in use&#xD;
		CharacterElements.initCharacters();&#xD;
		&#xD;
		// Run the main menu&#xD;
		MainMenuUI mainMenu = new MainMenuUI();&#xD;
		mainMenu.run();&#xD;
	</body>
          </ownedBehavior>
          <ownedOperation xmi:id="_17-GQKkFEeK3oZB5eR7Ndw" name="main" isStatic="true" method="_2J834KkFEeK3oZB5eR7Ndw">
            <ownedParameter xmi:id="_17-GQakFEeK3oZB5eR7Ndw" name="args">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_17_UYKkFEeK3oZB5eR7Ndw" value="*"/>
            </ownedParameter>
          </ownedOperation>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_11fq0KkFEeK3oZB5eR7Ndw" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_11fq0akFEeK3oZB5eR7Ndw" name="util">
        <packagedElement xmi:type="uml:Class" xmi:id="_2IHE0KkFEeK3oZB5eR7Ndw" name="Random"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2IKvMKkFEeK3oZB5eR7Ndw" name="ArrayList"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2ISrAakFEeK3oZB5eR7Ndw" name="NoSuchElementException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2ITSEakFEeK3oZB5eR7Ndw" name="Scanner"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2IsToKkFEeK3oZB5eR7Ndw" name="LinkedList"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_110a8KkFEeK3oZB5eR7Ndw" name="io">
        <packagedElement xmi:type="uml:Class" xmi:id="_2IPAoKkFEeK3oZB5eR7Ndw" name="BufferedReader"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2IPnsakFEeK3oZB5eR7Ndw" name="BufferedWriter"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2IQOwakFEeK3oZB5eR7Ndw" name="FileNotFoundException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2IQ10akFEeK3oZB5eR7Ndw" name="FileReader"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2IRc4akFEeK3oZB5eR7Ndw" name="FileWriter"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2ISD8akFEeK3oZB5eR7Ndw" name="IOException"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_14AzUKkFEeK3oZB5eR7Ndw" name="nio">
        <packagedElement xmi:type="uml:Package" xmi:id="_14AzUakFEeK3oZB5eR7Ndw" name="charset">
          <packagedElement xmi:type="uml:Class" xmi:id="_2Im0EKkFEeK3oZB5eR7Ndw" name="Charset"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_2I4g4KkFEeK3oZB5eR7Ndw" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_2I4g4akFEeK3oZB5eR7Ndw" name="IllegalArgumentException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2I69IKkFEeK3oZB5eR7Ndw" name="Exception"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_2I-AcKkFEeK3oZB5eR7Ndw" name="NumberFormatException"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="_2I_1oKkFEeK3oZB5eR7Ndw" name="Character"/>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:id="_1UlWIKkFEeK3oZB5eR7Ndw">
      <eAnnotations xmi:id="_1UmkQKkFEeK3oZB5eR7Ndw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_1UpnkKkFEeK3oZB5eR7Ndw" base_Package="_1Kx54KkFEeK3oZB5eR7Ndw">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:LegacyStyledElement xmi:id="_18V5sKkFEeK3oZB5eR7Ndw" base_Element="_18VSoKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_19JyAakFEeK3oZB5eR7Ndw" dimensions="1" base_Element="_19JK8KkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_19KZEKkFEeK3oZB5eR7Ndw" dimensions="1" base_Element="_19JK8akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_19LAIakFEeK3oZB5eR7Ndw" base_Element="_19KZEakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_19ZCkKkFEeK3oZB5eR7Ndw" base_Element="_19YbgKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_1-mjgqkFEeK3oZB5eR7Ndw" dimensions="1" base_Element="_1-mjgKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_1-nxo6kFEeK3oZB5eR7Ndw" dimensions="1" base_Element="_1-nxoKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_1-sDE6kFEeK3oZB5eR7Ndw" base_Element="_1-sDEKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_1-yJs6kFEeK3oZB5eR7Ndw" base_Element="_1-yJsakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_1-zX0KkFEeK3oZB5eR7Ndw" base_Element="_1-ywwKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_1-6skKkFEeK3oZB5eR7Ndw" base_Element="_1-6FgKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Generics xmi:id="_1-9v4KkFEeK3oZB5eR7Ndw" genericsValue="String" base_Element="_1-8hwKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2IHr4KkFEeK3oZB5eR7Ndw" base_Element="_2IHE0KkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2ILWQKkFEeK3oZB5eR7Ndw" base_Element="_2IKvMKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2IPnsKkFEeK3oZB5eR7Ndw" base_Element="_2IPAoKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2IQOwKkFEeK3oZB5eR7Ndw" base_Element="_2IPnsakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2IQ10KkFEeK3oZB5eR7Ndw" base_Element="_2IQOwakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2IRc4KkFEeK3oZB5eR7Ndw" base_Element="_2IQ10akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2ISD8KkFEeK3oZB5eR7Ndw" base_Element="_2IRc4akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2ISrAKkFEeK3oZB5eR7Ndw" base_Element="_2ISD8akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2ITSEKkFEeK3oZB5eR7Ndw" base_Element="_2ISrAakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2IT5IKkFEeK3oZB5eR7Ndw" base_Element="_2ITSEakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2InbIKkFEeK3oZB5eR7Ndw" base_Element="_2Im0EKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2Is6sKkFEeK3oZB5eR7Ndw" base_Element="_2IsToKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2I5H8KkFEeK3oZB5eR7Ndw" base_Element="_2I4g4akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2I7kMKkFEeK3oZB5eR7Ndw" base_Element="_2I69IKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2I-ngKkFEeK3oZB5eR7Ndw" base_Element="_2I-AcKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2JAcsKkFEeK3oZB5eR7Ndw" base_Element="_2I_1oKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_2JI_kqkFEeK3oZB5eR7Ndw" dimensions="2" base_Element="_2JI_kKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JJmoqkFEeK3oZB5eR7Ndw" base_Element="_2JJmoakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_2JKNsqkFEeK3oZB5eR7Ndw" base_Element="_2JKNsKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_2JK0wKkFEeK3oZB5eR7Ndw" base_Element="_2JKNs6kFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JK0wqkFEeK3oZB5eR7Ndw" base_Element="_2JK0wakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Generics xmi:id="_2JMC4KkFEeK3oZB5eR7Ndw" genericsValue="Integer" base_Element="_2JLb0KkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JMp8KkFEeK3oZB5eR7Ndw" base_Element="_2JLb0KkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Generics xmi:id="_2JNRAKkFEeK3oZB5eR7Ndw" genericsValue="Integer" base_Element="_2JMp8akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JNRAakFEeK3oZB5eR7Ndw" base_Element="_2JMp8akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JN4EKkFEeK3oZB5eR7Ndw" base_Element="_2JNRAqkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_2JN4E6kFEeK3oZB5eR7Ndw" base_Element="_2JN4EakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JOfIKkFEeK3oZB5eR7Ndw" base_Element="_2JN4EakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_2JOfI6kFEeK3oZB5eR7Ndw" dimensions="1" base_Element="_2JOfIakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JPGMKkFEeK3oZB5eR7Ndw" base_Element="_2JOfIakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Generics xmi:id="_2JQUUKkFEeK3oZB5eR7Ndw" genericsValue="String" base_Element="_2JPtQakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Generics xmi:id="_2JQ7YKkFEeK3oZB5eR7Ndw" genericsValue="Integer" base_Element="_2JQUUakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JRicKkFEeK3oZB5eR7Ndw" base_Element="_2JQ7YakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JTXoKkFEeK3oZB5eR7Ndw" base_Element="_2JSwkakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JUlwKkFEeK3oZB5eR7Ndw" base_Element="_2JT-sqkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JUlwqkFEeK3oZB5eR7Ndw" base_Element="_2JUlwakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Array xmi:id="_2JVM06kFEeK3oZB5eR7Ndw" base_Element="_2JVM0akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JVz4akFEeK3oZB5eR7Ndw" base_Element="_2JVz4KkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JWa8KkFEeK3oZB5eR7Ndw" base_Element="_2JVz4qkFEeK3oZB5eR7Ndw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_2JWa8akFEeK3oZB5eR7Ndw" name="getEast" method="_2KJsMKkFEeK3oZB5eR7Ndw">
      <ownedParameter xmi:id="_2JWa8qkFEeK3oZB5eR7Ndw" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JXCAakFEeK3oZB5eR7Ndw" base_Element="_2JXCAKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JXpEKkFEeK3oZB5eR7Ndw" base_Element="_2JXCAqkFEeK3oZB5eR7Ndw">
    <associatedElement xmi:type="uml:Operation" xmi:id="_2JXpEakFEeK3oZB5eR7Ndw" name="getWest" method="_2KKTQKkFEeK3oZB5eR7Ndw">
      <ownedParameter xmi:id="_2JXpEqkFEeK3oZB5eR7Ndw" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JZeQakFEeK3oZB5eR7Ndw" base_Element="_2JZeQKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JaFUqkFEeK3oZB5eR7Ndw" base_Element="_2JaFUakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JasYakFEeK3oZB5eR7Ndw" base_Element="_2JasYKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JchkKkFEeK3oZB5eR7Ndw" base_Element="_2Jb6gqkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JchkqkFEeK3oZB5eR7Ndw" base_Element="_2JchkakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JdIoakFEeK3oZB5eR7Ndw" base_Element="_2JdIoKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JdvsKkFEeK3oZB5eR7Ndw" base_Element="_2JdIoqkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JdvsqkFEeK3oZB5eR7Ndw" base_Element="_2JdvsakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JeWwakFEeK3oZB5eR7Ndw" base_Element="_2JeWwKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2Je90KkFEeK3oZB5eR7Ndw" base_Element="_2JeWwqkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2Je90qkFEeK3oZB5eR7Ndw" base_Element="_2Je90akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2Jfk4akFEeK3oZB5eR7Ndw" base_Element="_2Jfk4KkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JgL8KkFEeK3oZB5eR7Ndw" base_Element="_2Jfk4qkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JiBIKkFEeK3oZB5eR7Ndw" base_Element="_2JhaEKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JioMakFEeK3oZB5eR7Ndw" base_Element="_2JioMKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JjPQakFEeK3oZB5eR7Ndw" base_Element="_2JjPQKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2Jj2UakFEeK3oZB5eR7Ndw" base_Element="_2Jj2UKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JmSkakFEeK3oZB5eR7Ndw" base_Element="_2JmSkKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Generics xmi:id="_2JngsKkFEeK3oZB5eR7Ndw" genericsValue="String" base_Element="_2Jm5oakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JoHwKkFEeK3oZB5eR7Ndw" base_Element="_2Jm5oakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Generics xmi:id="_2Jou0KkFEeK3oZB5eR7Ndw" genericsValue="String" base_Element="_2JoHwakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JpV4KkFEeK3oZB5eR7Ndw" base_Element="_2JoHwakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JqkAakFEeK3oZB5eR7Ndw" base_Element="_2JqkAKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JrLEakFEeK3oZB5eR7Ndw" base_Element="_2JrLEKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JsZMakFEeK3oZB5eR7Ndw" base_Element="_2JsZMKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JtAQakFEeK3oZB5eR7Ndw" base_Element="_2JtAQKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JtnUakFEeK3oZB5eR7Ndw" base_Element="_2JtnUKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JuOYKkFEeK3oZB5eR7Ndw" base_Element="_2JtnUqkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2Ju1cakFEeK3oZB5eR7Ndw" base_Element="_2Ju1cKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2JxRsKkFEeK3oZB5eR7Ndw" base_Element="_2JwqoKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_2Jyf0KkFEeK3oZB5eR7Ndw" base_Element="_2Jx4wakFEeK3oZB5eR7Ndw"/>
  <uml:OpaqueBehavior xmi:id="_2KGo4KkFEeK3oZB5eR7Ndw" name="convertToInt" specification="_2IVuUKkFEeK3oZB5eR7Ndw">
    <ownedParameter xmi:id="_2KGo4akFEeK3oZB5eR7Ndw" name="ra" type="_18xXgKkFEeK3oZB5eR7Ndw"/>
    <ownedParameter xmi:id="_2KGo4qkFEeK3oZB5eR7Ndw" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <language>java</language>
    <body>switch(ra) {&#xD;
			case DEFAULT:&#xD;
				return 0;&#xD;
			case NINETY:&#xD;
				return 90;&#xD;
			case HUNDREDANDEIGHTY:&#xD;
				return 180;&#xD;
			case TWOHUNDREDANDSEVENTY:&#xD;
				return 270;&#xD;
			default:&#xD;
					return 0;&#xD;
		}&#xD;
	</body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_2KGo46kFEeK3oZB5eR7Ndw" name="convertFromInt" specification="_18zMsKkFEeK3oZB5eR7Ndw">
    <ownedParameter xmi:id="_2KHP8KkFEeK3oZB5eR7Ndw" name="angle">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <ownedParameter xmi:id="_2KHP8akFEeK3oZB5eR7Ndw" type="_18xXgKkFEeK3oZB5eR7Ndw" direction="return"/>
    <language>java</language>
    <body>if(angle == 90)&#xD;
			return NINETY;&#xD;
		else if(angle == 180)&#xD;
			return HUNDREDANDEIGHTY;&#xD;
		else if(angle == 270)&#xD;
			return TWOHUNDREDANDSEVENTY;&#xD;
		else&#xD;
			return DEFAULT;&#xD;
	</body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_2KJsMKkFEeK3oZB5eR7Ndw" name="getEast" specification="_2JWa8akFEeK3oZB5eR7Ndw">
    <ownedParameter xmi:id="_2KJsMakFEeK3oZB5eR7Ndw" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </ownedParameter>
    <language>java</language>
    <body>return east;&#xD;
	</body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_2KKTQKkFEeK3oZB5eR7Ndw" name="getWest" specification="_2JXpEakFEeK3oZB5eR7Ndw">
    <ownedParameter xmi:id="_2KKTQakFEeK3oZB5eR7Ndw" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </ownedParameter>
    <language>java</language>
    <body>return west;&#xD;
	</body>
  </uml:OpaqueBehavior>
  <UMLLabProfile:Reference xmi:id="_2LGucKkFEeK3oZB5eR7Ndw" base_Element="_2LGHYKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LHVgKkFEeK3oZB5eR7Ndw" base_Element="_2LGucakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LH8kKkFEeK3oZB5eR7Ndw" base_Element="_2LHVgakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LIjoKkFEeK3oZB5eR7Ndw" base_Element="_2LH8kakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LIjo6kFEeK3oZB5eR7Ndw" base_Element="_2LIjoakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LJKsqkFEeK3oZB5eR7Ndw" base_Element="_2LJKsKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LJxwKkFEeK3oZB5eR7Ndw" base_Element="_2LJKs6kFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LKY0KkFEeK3oZB5eR7Ndw" base_Element="_2LJxwakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LKY06kFEeK3oZB5eR7Ndw" base_Element="_2LKY0akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LK_4qkFEeK3oZB5eR7Ndw" base_Element="_2LK_4KkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LLm8KkFEeK3oZB5eR7Ndw" base_Element="_2LK_46kFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LMOAKkFEeK3oZB5eR7Ndw" base_Element="_2LLm8akFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LMOA6kFEeK3oZB5eR7Ndw" base_Element="_2LMOAakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LM1EqkFEeK3oZB5eR7Ndw" base_Element="_2LM1EKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LNcIKkFEeK3oZB5eR7Ndw" base_Element="_2LM1E6kFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LODMKkFEeK3oZB5eR7Ndw" base_Element="_2LNcIakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LODM6kFEeK3oZB5eR7Ndw" base_Element="_2LODMakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LOqQqkFEeK3oZB5eR7Ndw" base_Element="_2LOqQKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LPRUKkFEeK3oZB5eR7Ndw" base_Element="_2LOqQ6kFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LP4YKkFEeK3oZB5eR7Ndw" base_Element="_2LPRUakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LP4Y6kFEeK3oZB5eR7Ndw" base_Element="_2LP4YakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LQfcqkFEeK3oZB5eR7Ndw" base_Element="_2LQfcKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LRGgKkFEeK3oZB5eR7Ndw" base_Element="_2LQfc6kFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LRtkKkFEeK3oZB5eR7Ndw" base_Element="_2LRGgakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LSUoKkFEeK3oZB5eR7Ndw" base_Element="_2LRtkakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LS7sKkFEeK3oZB5eR7Ndw" base_Element="_2LSUoakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LS7s6kFEeK3oZB5eR7Ndw" base_Element="_2LS7sakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LTiwKkFEeK3oZB5eR7Ndw" base_Element="_2LS7tKkFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LUJ0KkFEeK3oZB5eR7Ndw" base_Element="_2LTiwakFEeK3oZB5eR7Ndw"/>
  <UMLLabProfile:Reference xmi:id="_2LUJ06kFEeK3oZB5eR7Ndw" base_Element="_2LUJ0akFEeK3oZB5eR7Ndw"/>
</xmi:XMI>
