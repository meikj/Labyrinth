<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20110701" xmlns:xmi="http://www.omg.org/spec/XMI/20110701" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:UMLLabProfile="http:///schemas/UMLLabProfile/NS/0" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/4.0.0/UML" xsi:schemaLocation="http:///schemas/UMLLabProfile/NS/0 pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile">
  <uml:Model xmi:id="_dPm8oKh1EeK3d6i6ttnN5Q" name="Labyrinth">
    <eAnnotations xmi:id="_dZcOEKh1EeK3d6i6ttnN5Q" source="http://ns.yatta.de/umllab">
      <contents xmi:type="ecore:EAnnotation" xmi:id="_dZcOEah1EeK3d6i6ttnN5Q" source="codegen">
        <details xmi:id="_dZcOEqh1EeK3d6i6ttnN5Q" key="codegenDirectory" value="/Labyrinth/src"/>
        <details xmi:id="_eY-YcKh1EeK3d6i6ttnN5Q" key="AssociatedSourceCode" value="/Labyrinth/src/com/labyrinth/game/Board.java;748834920/1;/Labyrinth/src/com/labyrinth/game/ComputerPlayer.java;206531633/1;/Labyrinth/src/com/labyrinth/game/Direction.java;2324479450/1;/Labyrinth/src/com/labyrinth/game/GameManager.java;309184423/1;/Labyrinth/src/com/labyrinth/game/IllegalMoveException.java;3849805425/1;/Labyrinth/src/com/labyrinth/game/Labyrinth.java;3189967741/1;/Labyrinth/src/com/labyrinth/game/Leaderboard.java;3878719323/1;/Labyrinth/src/com/labyrinth/game/Player.java;974042836/1;/Labyrinth/src/com/labyrinth/game/RotationAngle.java;2617409998/1;/Labyrinth/src/com/labyrinth/game/SettingsManager.java;1053700622/1;/Labyrinth/src/com/labyrinth/game/Tile.java;2954101586/1;/Labyrinth/src/com/labyrinth/game/TileType.java;4135073508/1;/Labyrinth/src/com/labyrinth/game/modes/GameMode.java;1165693046/1;/Labyrinth/src/com/labyrinth/game/modes/TreasureChase.java;3881860095/1;/Labyrinth/src/com/labyrinth/ui/CharacterElements.java;3382691404/1;/Labyrinth/src/com/labyrinth/ui/UserInterface.java;3536395000/1;/Labyrinth/src/com/labyrinth/ui/Window.java;3473249471/1;"/>
      </contents>
    </eAnnotations>
    <elementImport xmi:id="_d7t0sKh1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </elementImport>
    <elementImport xmi:id="_d7t0sah1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#byte"/>
    </elementImport>
    <elementImport xmi:id="_d7t0sqh1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#char"/>
    </elementImport>
    <elementImport xmi:id="_d7t0s6h1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#double"/>
    </elementImport>
    <elementImport xmi:id="_d7t0tKh1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#float"/>
    </elementImport>
    <elementImport xmi:id="_d7t0tah1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </elementImport>
    <elementImport xmi:id="_d7ubwKh1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
    </elementImport>
    <elementImport xmi:id="_d7ubwah1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#short"/>
    </elementImport>
    <elementImport xmi:id="_d7ubwqh1EeK3d6i6ttnN5Q">
      <importedElement xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
    </elementImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_d2LNYKh1EeK3d6i6ttnN5Q" name="com">
      <packagedElement xmi:type="uml:Package" xmi:id="_d2L0cKh1EeK3d6i6ttnN5Q" name="labyrinth">
        <packagedElement xmi:type="uml:Package" xmi:id="_d2VlcKh1EeK3d6i6ttnN5Q" name="game">
          <packagedElement xmi:type="uml:Package" xmi:id="_d2jA0Kh1EeK3d6i6ttnN5Q" name="modes">
            <packagedElement xmi:type="uml:Interface" xmi:id="_d-PkQKh1EeK3d6i6ttnN5Q" name="GameMode">
              <ownedComment xmi:id="_eGkZ1qh1EeK3d6i6ttnN5Q">
                <body>Represents a general game mode.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.01042013&#xD;
 *</body>
              </ownedComment>
              <ownedAttribute xmi:id="_d-XgEKh1EeK3d6i6ttnN5Q" name="board" type="_d7qKUKh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eG5J8Kh1EeK3d6i6ttnN5Q"/>
              <ownedAttribute xmi:id="_d-YHIKh1EeK3d6i6ttnN5Q" name="player" type="_d8qP4Kh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eG6_Iah1EeK3d6i6ttnN5Q"/>
              <ownedAttribute xmi:id="_d-ZVQKh1EeK3d6i6ttnN5Q" name="round" isReadOnly="true">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_d-ajYKh1EeK3d6i6ttnN5Q" name="settings" type="_d8yLsKh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eG8NQah1EeK3d6i6ttnN5Q"/>
              <ownedOperation xmi:id="_d-QLUKh1EeK3d6i6ttnN5Q" name="moveTokenUp" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGlA4Kh1EeK3d6i6ttnN5Q">
                  <body>Move the token up a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-RZcKh1EeK3d6i6ttnN5Q" name="moveTokenDown" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGlA4ah1EeK3d6i6ttnN5Q">
                  <body>Move the token down a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-SAgKh1EeK3d6i6ttnN5Q" name="moveTokenLeft" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGlA4qh1EeK3d6i6ttnN5Q">
                  <body>Move the token left a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-SnkKh1EeK3d6i6ttnN5Q" name="moveTokenRight" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGlA46h1EeK3d6i6ttnN5Q">
                  <body>Move the token right a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-T1sKh1EeK3d6i6ttnN5Q" name="rotateTile" raisedException="_eEpuQKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGlA5Kh1EeK3d6i6ttnN5Q">
                  <body>Rotate the spare tile by a particular angle.&#xD;
	 * &#xD;
	 * @param angle The angle to rotate the spare tile by.&#xD;
	 * @throws NumberFormatException When angle is not 90, 180 or 270.</body>
                </ownedComment>
                <ownedParameter xmi:id="_d-T1sah1EeK3d6i6ttnN5Q" name="angle">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_d-WR8Kh1EeK3d6i6ttnN5Q" name="nextRound">
                <ownedComment xmi:id="_eGln8qh1EeK3d6i6ttnN5Q">
                  <body>Transition to the next round.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-W5AKh1EeK3d6i6ttnN5Q" name="hasWon">
                <ownedComment xmi:id="_eGln86h1EeK3d6i6ttnN5Q">
                  <body>Check if the user has won the game.</body>
                </ownedComment>
                <ownedParameter xmi:id="_d-W5Aah1EeK3d6i6ttnN5Q" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_d-YuMKh1EeK3d6i6ttnN5Q" name="getComputerPlayer">
                <ownedComment xmi:id="_eGln9Kh1EeK3d6i6ttnN5Q">
                  <body>Get the active computer player opponent.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eDvIQKh1EeK3d6i6ttnN5Q" type="_d8FoIKh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_d-Z8UKh1EeK3d6i6ttnN5Q" name="getLeaderboard">
                <ownedComment xmi:id="_eGln9ah1EeK3d6i6ttnN5Q">
                  <body>Get the active leaderboard.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eDvIQah1EeK3d6i6ttnN5Q" type="_d8htAKh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eDssAKh1EeK3d6i6ttnN5Q" name="insertRow" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGlA5ah1EeK3d6i6ttnN5Q">
                  <body>Insert the spare tile into the specified row.&#xD;
	 * &#xD;
	 * @param row The row to insert the spare tile into.&#xD;
	 * @param direc The direction from which to insert the tile into.&#xD;
	 * @param performer The player who is performing the move.&#xD;
	 * @return The newly updated player with increased score/moves and spare tile based on performer.&#xD;
	 * @throws IllegalMoveException When the move cannot be accomplished due to immovable tiles, etc.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eDtTEKh1EeK3d6i6ttnN5Q" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eDtTEah1EeK3d6i6ttnN5Q" name="direc" type="_d8U4sKh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eDtTEqh1EeK3d6i6ttnN5Q" name="performer" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eDtTE6h1EeK3d6i6ttnN5Q" type="_d8qP4Kh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eDt6IKh1EeK3d6i6ttnN5Q" name="insertColumn" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGln8Kh1EeK3d6i6ttnN5Q">
                  <body>Insert the spare tile into the specified column.&#xD;
	 * &#xD;
	 * @param column The column to insert the spare tile into.&#xD;
	 * @param direc The direction from which to insert the tile into.&#xD;
	 * @param performer The player who is performing the move.&#xD;
	 * @return The newly updated player with increased score/moves and spare tile based on performer.&#xD;
	 * @throws IllegalMoveException When the move cannot be accomplished due to immovable tiles, etc.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eDt6Iah1EeK3d6i6ttnN5Q" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eDt6Iqh1EeK3d6i6ttnN5Q" name="direc" type="_d8U4sKh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eDt6I6h1EeK3d6i6ttnN5Q" name="performer" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eDt6JKh1EeK3d6i6ttnN5Q" type="_d8qP4Kh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eDuhMKh1EeK3d6i6ttnN5Q" name="updatePlayer">
                <ownedComment xmi:id="_eGln8ah1EeK3d6i6ttnN5Q">
                  <body>Update the player with a new player.&#xD;
	 * &#xD;
	 * @param p The new player.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eDuhMah1EeK3d6i6ttnN5Q" name="p" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Class" xmi:id="_d-jGQKh1EeK3d6i6ttnN5Q" clientDependency="_eDyLkKh1EeK3d6i6ttnN5Q" name="TreasureChase">
              <ownedComment xmi:id="_eGmPAKh1EeK3d6i6ttnN5Q">
                <body>Represents the Treasure Chase game mode.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.01042013&#xD;
 *</body>
              </ownedComment>
              <ownedAttribute xmi:id="_eFXf8Kh1EeK3d6i6ttnN5Q" name="player" type="_d8qP4Kh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eHIagKh1EeK3d6i6ttnN5Q"/>
              <ownedAttribute xmi:id="_eFXf8ah1EeK3d6i6ttnN5Q" name="board" type="_d7qKUKh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eHJooah1EeK3d6i6ttnN5Q"/>
              <ownedAttribute xmi:id="_eFYHAKh1EeK3d6i6ttnN5Q" name="leaderboard" visibility="private" type="_d8htAKh1EeK3d6i6ttnN5Q" association="_eHLd0ah1EeK3d6i6ttnN5Q"/>
              <ownedAttribute xmi:id="_eFYuEKh1EeK3d6i6ttnN5Q" name="round" isReadOnly="true">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedAttribute>
              <ownedAttribute xmi:id="_eFYuEah1EeK3d6i6ttnN5Q" name="settings" type="_d8yLsKh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eHNTAKh1EeK3d6i6ttnN5Q"/>
              <ownedAttribute xmi:id="_eFYuEqh1EeK3d6i6ttnN5Q" name="computer" visibility="private" type="_d8FoIKh1EeK3d6i6ttnN5Q" association="_eHOhIah1EeK3d6i6ttnN5Q"/>
              <ownedAttribute xmi:id="_eFZVIah1EeK3d6i6ttnN5Q" name="rand" visibility="private" type="_eDNj0Kh1EeK3d6i6ttnN5Q" association="_eHQWUah1EeK3d6i6ttnN5Q"/>
              <interfaceRealization xmi:id="_eDyLkKh1EeK3d6i6ttnN5Q" client="_d-jGQKh1EeK3d6i6ttnN5Q" supplier="_d-PkQKh1EeK3d6i6ttnN5Q" contract="_d-PkQKh1EeK3d6i6ttnN5Q"/>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGLYQKh1EeK3d6i6ttnN5Q" name="TreasureChase" specification="_eD0n0Kh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGLYQah1EeK3d6i6ttnN5Q" name="settings" type="_d8yLsKh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGLYQqh1EeK3d6i6ttnN5Q" type="_d-jGQKh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>this.player = new Player();&#xD;
		this.leaderboard = new Leaderboard(settings.getLeaderboard());&#xD;
		this.settings = settings;&#xD;
		this.board = new Board(settings.getColumns(), settings.getRows());&#xD;
		this.computer = new ComputerPlayer(this.board);&#xD;
		&#xD;
		// Set a random tile on the board to contain treasure&#xD;
		this.rand = new Random();&#xD;
		int rCol = rand.nextInt(settings.getColumns()) + 1;&#xD;
		int rRow = rand.nextInt(settings.getRows()) + 1;&#xD;
		&#xD;
		// Do not include (1,1)&#xD;
		while(rCol == 1 &amp;&amp; rRow == 1) {&#xD;
			rCol = rand.nextInt(settings.getColumns()) + 1;&#xD;
			rRow = rand.nextInt(settings.getRows()) + 1; &#xD;
		}&#xD;
		&#xD;
		this.board.getTile(rCol, rRow).setTreasure(true);&#xD;
		this.board.setTreasurePos(rCol, rRow);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGLYQ6h1EeK3d6i6ttnN5Q" name="moveTokenUp" specification="_d-mJkKh1EeK3d6i6ttnN5Q">
                <language>java</language>
                <body>int newRow = 0;&#xD;
		int tokenPosCol = board.getTokenPos()[0];&#xD;
		int tokenPosRow = board.getTokenPos()[1];&#xD;
		&#xD;
		// Check if token will go over the board&#xD;
		if(tokenPosRow == board.getHeight()) {&#xD;
			// Make sure there isn't a wall blocking movement&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getNorth() ||&#xD;
					!board.getTile(tokenPosCol, 1).getSouth()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
			// Transition token over board Pacman style&#xD;
			newRow = 1;&#xD;
		}&#xD;
		else {&#xD;
			// Won't go over board, but we need to check if a wall is blocking movement&#xD;
			newRow = tokenPosRow + 1;&#xD;
			&#xD;
			// Check if current tile north entry is available, and new tile south&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getNorth() ||&#xD;
					!board.getTile(tokenPosCol, newRow).getSouth()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Move token :)&#xD;
		board.getTile(tokenPosCol, tokenPosRow).setToken(false);&#xD;
		board.setTokenPos(tokenPosCol, newRow);&#xD;
		board.getTile(board.getTokenPos()[0], board.getTokenPos()[1]).setToken(true);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGL_UKh1EeK3d6i6ttnN5Q" name="moveTokenDown" specification="_d-nXsKh1EeK3d6i6ttnN5Q">
                <language>java</language>
                <body>int newRow = 0;&#xD;
		int tokenPosCol = board.getTokenPos()[0];&#xD;
		int tokenPosRow = board.getTokenPos()[1];&#xD;
		&#xD;
		// Check if token will go over the board&#xD;
		if(tokenPosRow == 1) {&#xD;
			// Make sure there isn't a wall blocking movement&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getSouth() ||&#xD;
					!board.getTile(tokenPosCol, board.getHeight()).getNorth()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
			// Transition token over board Pacman style&#xD;
			newRow = board.getHeight();&#xD;
		}&#xD;
		else {&#xD;
			// Won't go over board, but we need to check if a wall is blocking movement&#xD;
			newRow = tokenPosRow - 1;&#xD;
			&#xD;
			// Check if current tile north entry is available, and new tile south&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getSouth() ||&#xD;
					!board.getTile(tokenPosCol, newRow).getNorth()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Move token :)&#xD;
		board.getTile(tokenPosCol, tokenPosRow).setToken(false);&#xD;
		board.setTokenPos(tokenPosCol, newRow);&#xD;
		board.getTile(board.getTokenPos()[0], board.getTokenPos()[1]).setToken(true);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGL_Uah1EeK3d6i6ttnN5Q" name="moveTokenLeft" specification="_d-n-wKh1EeK3d6i6ttnN5Q">
                <language>java</language>
                <body>int newCol = 0;&#xD;
		int tokenPosCol = board.getTokenPos()[0];&#xD;
		int tokenPosRow = board.getTokenPos()[1];&#xD;
		&#xD;
		// Check if token will go over the board&#xD;
		if(tokenPosCol == 1) {&#xD;
			// Make sure there isn't a wall blocking movement&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getWest() ||&#xD;
					!board.getTile(board.getWidth(), tokenPosRow).getEast()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
			// Transition token over board Pacman style&#xD;
			newCol = board.getWidth();&#xD;
		}&#xD;
		else {&#xD;
			// Won't go over board, but we need to check if a wall is blocking movement&#xD;
			newCol = tokenPosCol - 1;&#xD;
			&#xD;
			// Check if current tile north entry is available, and new tile south&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getWest() ||&#xD;
					!board.getTile(newCol, tokenPosRow).getEast()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Move token :)&#xD;
		board.getTile(tokenPosCol, tokenPosRow).setToken(false);&#xD;
		board.setTokenPos(newCol, tokenPosRow);&#xD;
		board.getTile(board.getTokenPos()[0], board.getTokenPos()[1]).setToken(true);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGL_Uqh1EeK3d6i6ttnN5Q" name="moveTokenRight" specification="_d-ol0Kh1EeK3d6i6ttnN5Q">
                <language>java</language>
                <body>int newCol = 0;&#xD;
		int tokenPosCol = board.getTokenPos()[0];&#xD;
		int tokenPosRow = board.getTokenPos()[1];&#xD;
		&#xD;
		// Check if token will go over the board&#xD;
		if(tokenPosCol == board.getWidth()) {&#xD;
			// Make sure there isn't a wall blocking movement&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getEast() ||&#xD;
					!board.getTile(board.getWidth(), tokenPosRow).getWest()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
			// Transition token over board Pacman style&#xD;
			newCol = 1;&#xD;
		}&#xD;
		else {&#xD;
			// Won't go over board, but we need to check if a wall is blocking movement&#xD;
			newCol = tokenPosCol + 1;&#xD;
			&#xD;
			// Check if current tile north entry is available, and new tile south&#xD;
			if(!board.getTile(tokenPosCol, tokenPosRow).getEast() ||&#xD;
					!board.getTile(newCol, tokenPosRow).getWest()) {&#xD;
				// Can't pass through, failed&#xD;
				throw new IllegalMoveException(&quot;Can't pass through walls!&quot;);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Move token :)&#xD;
		board.getTile(tokenPosCol, tokenPosRow).setToken(false);&#xD;
		board.setTokenPos(newCol, tokenPosRow);&#xD;
		board.getTile(board.getTokenPos()[0], board.getTokenPos()[1]).setToken(true);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGL_U6h1EeK3d6i6ttnN5Q" name="rotateTile" specification="_d-pM4Kh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGMmYKh1EeK3d6i6ttnN5Q" name="angle">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <language>java</language>
                <body>if(angle &lt; 0 || angle > 270)&#xD;
			// Angle is out of bounds&#xD;
			throw new NumberFormatException(&quot;Angle must either be 90, 180 or 270&quot;);&#xD;
		&#xD;
		if((angle % 90) != 0)&#xD;
			// Angle isn't divisible by 90&#xD;
			throw new NumberFormatException(&quot;Angle must either be 90, 180 or 270&quot;);&#xD;
		&#xD;
		int currAngle = RotationAngle.convertToInt(player.getSpareTile().getRotation());&#xD;
		RotationAngle newAngle = RotationAngle.convertFromInt((angle + currAngle) % 360);&#xD;
		player.getSpareTile().setRotation(newAngle);&#xD;
		&#xD;
		// Update player move&#xD;
		player.updateLastMove(&quot;rotate &quot; + angle);&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGMmYah1EeK3d6i6ttnN5Q" name="insertRow" specification="_eD1O4Kh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGMmYqh1EeK3d6i6ttnN5Q" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eGMmY6h1EeK3d6i6ttnN5Q" name="direc" type="_d8U4sKh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGMmZKh1EeK3d6i6ttnN5Q" name="performer" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGMmZah1EeK3d6i6ttnN5Q" type="_d8qP4Kh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>// Check first if move is inserting back into same place&#xD;
		String[] lastPlayerMove = performer.getLastMove().split(&quot; &quot;);&#xD;
		&#xD;
		if(lastPlayerMove.length == 4) {&#xD;
			// Valid insert move was last made, do some further checking&#xD;
			if(lastPlayerMove[0].equals(&quot;insert&quot;) &amp;&amp; &#xD;
					lastPlayerMove[1].equals(&quot;row&quot;) &amp;&amp; &#xD;
					lastPlayerMove[3].equals(Integer.toString(row))) {&#xD;
				if(direc == Direction.LEFT) {&#xD;
					// Can't insert from right this time&#xD;
					if(lastPlayerMove[2].equals(&quot;right&quot;)) {&#xD;
						throw new IllegalMoveException(&quot;Can't insert tile back into same position&quot;);&#xD;
					}&#xD;
				} else if(direc == Direction.RIGHT) {&#xD;
					// Can't insert from left this time&#xD;
					if(lastPlayerMove[2].equals(&quot;left&quot;)) {&#xD;
						throw new IllegalMoveException(&quot;Can't insert tile back into same position&quot;);&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
			&#xD;
		Tile newSpareTile = null;&#xD;
		&#xD;
		if(direc == Direction.LEFT)&#xD;
			newSpareTile = insertTileRowLeft(row, performer.getSpareTile());&#xD;
		else if(direc == Direction.RIGHT)&#xD;
			newSpareTile = insertTileRowRight(row, performer.getSpareTile());&#xD;
		else&#xD;
			throw new IllegalMoveException(&quot;Invalid direction specified&quot;);&#xD;
		&#xD;
		if(newSpareTile != null) {&#xD;
			// Success! New spare tile returned&#xD;
			performer.setSpareTile(newSpareTile);&#xD;
			&#xD;
			// Update player move&#xD;
			performer.updateLastMove(&quot;insert row &quot; + direc.toString().toLowerCase() + &quot; &quot; + row);&#xD;
		} else {&#xD;
			throw new IllegalMoveException(&quot;Could not retrieve new spare tile&quot;);&#xD;
		}&#xD;
		&#xD;
		return performer;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGNNcKh1EeK3d6i6ttnN5Q" name="insertTileRowLeft" specification="_eD2dAKh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGNNcah1EeK3d6i6ttnN5Q" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eGNNcqh1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGNNc6h1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>// Check if any tiles on row are immovable/fixed&#xD;
		for(int i = 1; i &lt; board.getWidth(); i++) {&#xD;
			try {&#xD;
				if(!board.getTile(i, row).isMovable()) {&#xD;
					// Found an immovable tile&#xD;
					throw new IllegalMoveException(&quot;Specified row contains one or more immovable tiles&quot;);&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				throw new IllegalMoveException(e.getMessage());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set the spare tile to the tile that will fall off&#xD;
		Tile spareTile = board.getTile(board.getWidth(), row);&#xD;
		&#xD;
		if(spareTile.hasToken()) {&#xD;
			// The tile that is going to fall off contains the token, so set token to new tile&#xD;
			spareTile.setToken(false);&#xD;
			newTile.setToken(true);&#xD;
			board.setTokenPos(1, row);&#xD;
		}&#xD;
		else if(spareTile.hasTreasure()) {&#xD;
			// The tile that is going to fall off contains the treasure, so set treasure to new tile&#xD;
			spareTile.setTreasure(false);&#xD;
			newTile.setTreasure(true);&#xD;
			board.setTreasurePos(1, row);&#xD;
		}&#xD;
		&#xD;
		// Push all tiles across&#xD;
		for(int i = board.getWidth(); i > 1; i--) {&#xD;
			// Set tile to preceding tile&#xD;
			Tile t = board.getTile(i - 1, row);&#xD;
			&#xD;
			// Check if preceding tile contains token or treasure&#xD;
			if(t.hasToken()) {&#xD;
				// If so, set token position to new position&#xD;
				board.setTokenPos(i, row);&#xD;
			} else if(t.hasTreasure()) {&#xD;
				// If so, set treasure position to new position&#xD;
				board.setTreasurePos(i, row);&#xD;
			}&#xD;
			&#xD;
			board.setTile(i, row, t);&#xD;
		}&#xD;
		&#xD;
		// Set the first tile in row to new tile&#xD;
		board.setTile(1, row, newTile);&#xD;
		&#xD;
		return spareTile;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGNNdKh1EeK3d6i6ttnN5Q" name="insertTileRowRight" specification="_eD3EEKh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGNNdah1EeK3d6i6ttnN5Q" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eGNNdqh1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGNNd6h1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>// Check if any tiles on row are immovable/fixed&#xD;
		for(int i = 1; i &lt; board.getWidth(); i++) {&#xD;
			try {&#xD;
				if(!board.getTile(i, row).isMovable()) {&#xD;
					// Found an immovable tile&#xD;
					throw new IllegalMoveException(&quot;Specified row contains one or more immovable tiles&quot;);&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				throw new IllegalMoveException(e.getMessage());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set the spare tile to the tile that will fall off&#xD;
		Tile spareTile = board.getTile(1, row);&#xD;
		&#xD;
		if(spareTile.hasToken()) {&#xD;
			// The tile that is going to fall off contains the token, so set token to new tile&#xD;
			spareTile.setToken(false);&#xD;
			newTile.setToken(true);&#xD;
			board.setTokenPos(board.getWidth(), row);&#xD;
		}&#xD;
		else if(spareTile.hasTreasure()) {&#xD;
			// The tile that is going to fall off contains the treasure, so set treasure to new tile&#xD;
			spareTile.setTreasure(false);&#xD;
			newTile.setTreasure(true);&#xD;
			board.setTreasurePos(board.getWidth(), row);&#xD;
		}&#xD;
		&#xD;
		// Push all tiles across&#xD;
		for(int i = 1; i &lt; board.getWidth(); i++) {&#xD;
			// Set tile to proceeding tile&#xD;
			Tile t = board.getTile(i + 1, row);&#xD;
			&#xD;
			// Check if proceeding tile contains token&#xD;
			if(t.hasToken()) {&#xD;
				// If so, set token position to new position&#xD;
				board.setTokenPos(i, row);&#xD;
			} else if(t.hasTreasure()) {&#xD;
				// If so, set treasure position to new position&#xD;
				board.setTreasurePos(i, row);&#xD;
			}&#xD;
			&#xD;
			board.setTile(i, row, t);&#xD;
		}&#xD;
		&#xD;
		// Set the last tile in row to new tile&#xD;
		board.setTile(board.getWidth(), row, newTile);&#xD;
		&#xD;
		return spareTile;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGN0gKh1EeK3d6i6ttnN5Q" name="insertColumn" specification="_eD3rIKh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGN0gah1EeK3d6i6ttnN5Q" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eGN0gqh1EeK3d6i6ttnN5Q" name="direc" type="_d8U4sKh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGN0g6h1EeK3d6i6ttnN5Q" name="performer" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGN0hKh1EeK3d6i6ttnN5Q" type="_d8qP4Kh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>// Check first if move is inserting back into same place&#xD;
		String[] lastPlayerMove = performer.getLastMove().split(&quot; &quot;);&#xD;
		&#xD;
		if(lastPlayerMove.length == 4) {&#xD;
			// Valid insert move was last made, do some further checking&#xD;
			if(lastPlayerMove[0].equals(&quot;insert&quot;) &amp;&amp; &#xD;
					lastPlayerMove[1].equals(&quot;column&quot;) &amp;&amp; &#xD;
					lastPlayerMove[3].equals(Integer.toString(column))) {&#xD;
				if(direc == Direction.TOP) {&#xD;
					// Can't insert from bottom this time&#xD;
					if(lastPlayerMove[2].equals(&quot;bottom&quot;)) {&#xD;
						throw new IllegalMoveException(&quot;Can't insert tile back into same position&quot;);&#xD;
					}&#xD;
				} else if(direc == Direction.BOTTOM) {&#xD;
					// Can't insert from top this time&#xD;
					if(lastPlayerMove[2].equals(&quot;top&quot;)) {&#xD;
						throw new IllegalMoveException(&quot;Can't insert tile back into same position&quot;);&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		Tile newSpareTile = null;&#xD;
		&#xD;
		if(direc == Direction.BOTTOM)&#xD;
			newSpareTile = insertTileColumnBottom(column, performer.getSpareTile());&#xD;
		else if(direc == Direction.TOP)&#xD;
			newSpareTile = insertTileColumnTop(column, performer.getSpareTile());&#xD;
		else&#xD;
			throw new IllegalMoveException(&quot;Invalid direction specified&quot;);&#xD;
		&#xD;
		if(newSpareTile != null) {&#xD;
			// Success! New spare tile returned&#xD;
			performer.setSpareTile(newSpareTile);&#xD;
			&#xD;
			// Update player move&#xD;
			performer.updateLastMove(&quot;insert column &quot; + direc.toString().toLowerCase() + &quot; &quot; + column);&#xD;
		} else {&#xD;
			throw new IllegalMoveException(&quot;Could not retrieve new spare tile&quot;);&#xD;
		}&#xD;
		&#xD;
		return performer;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGObkKh1EeK3d6i6ttnN5Q" name="insertTileColumnBottom" specification="_eD4SMah1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGObkah1EeK3d6i6ttnN5Q" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eGObkqh1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGObk6h1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>// Check if any tiles in column are immovable/fixed&#xD;
		for(int i = 1; i &lt; board.getHeight(); i++) {&#xD;
			try {&#xD;
				if(!board.getTile(column, i).isMovable()) {&#xD;
					// Found an immovable tile&#xD;
					throw new IllegalMoveException(&quot;Specified column contains one or more immovable tiles&quot;);&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				throw new IllegalMoveException(e.getMessage());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set the spare tile to the tile that will fall off&#xD;
		Tile spareTile = board.getTile(column, board.getHeight());&#xD;
		&#xD;
		if(spareTile.hasToken()) {&#xD;
			// The tile that is going to fall off contains the token, so set token to new tile&#xD;
			spareTile.setToken(false);&#xD;
			newTile.setToken(true);&#xD;
			board.setTokenPos(column, 1);&#xD;
		}&#xD;
		else if(spareTile.hasTreasure()) {&#xD;
			// The tile that is going to fall off contains the treasure, so set treasure to new tile&#xD;
			spareTile.setTreasure(false);&#xD;
			newTile.setTreasure(true);&#xD;
			board.setTreasurePos(column, 1);&#xD;
		}&#xD;
		&#xD;
		// Push all tiles across&#xD;
		for(int i = board.getHeight(); i > 1; i--) {&#xD;
			// Set tile to preceding tile&#xD;
			Tile t = board.getTile(column, i - 1);&#xD;
			&#xD;
			// Check if preceding tile contains token&#xD;
			if(t.hasToken()) {&#xD;
				// If so, set token position to new position&#xD;
				board.setTokenPos(column, i);&#xD;
			} else if(t.hasTreasure()) {&#xD;
				// If so, set treasure position to new position&#xD;
				board.setTreasurePos(column, i);&#xD;
			}&#xD;
			&#xD;
			board.setTile(column, i, t);&#xD;
		}&#xD;
		&#xD;
		// Set the first tile in row to new tile&#xD;
		board.setTile(column, 1, newTile);&#xD;
		&#xD;
		return spareTile;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGOblKh1EeK3d6i6ttnN5Q" name="insertTileColumnTop" specification="_eD45Qah1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGOblah1EeK3d6i6ttnN5Q" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eGOblqh1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eGObl6h1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>// Check if any tiles in column are immovable/fixed&#xD;
		for(int i = 1; i &lt; board.getHeight(); i++) {&#xD;
			try {&#xD;
				if(!board.getTile(column, i).isMovable()) {&#xD;
					// Found an immovable tile&#xD;
					throw new IllegalMoveException(&quot;Specified column contains one or more immovable tiles&quot;);&#xD;
				}&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				throw new IllegalMoveException(e.getMessage());&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set the spare tile to the tile that will fall off&#xD;
		Tile spareTile = board.getTile(column, 1);&#xD;
		&#xD;
		if(spareTile.hasToken()) {&#xD;
			// The tile that is going to fall off contains the token, so set token to new tile&#xD;
			spareTile.setToken(false);&#xD;
			newTile.setToken(true);&#xD;
			board.setTokenPos(column, board.getHeight());&#xD;
		}&#xD;
		else if(spareTile.hasTreasure()) {&#xD;
			// The tile that is going to fall off contains the treasure, so set treasure to new tile&#xD;
			spareTile.setTreasure(false);&#xD;
			newTile.setTreasure(true);&#xD;
			board.setTreasurePos(column, board.getHeight());&#xD;
		}&#xD;
		&#xD;
		// Push all tiles across&#xD;
		for(int i = 1; i &lt; board.getHeight(); i++) {&#xD;
			// Set tile to proceeding tile&#xD;
			Tile t = board.getTile(column, i + 1);&#xD;
			&#xD;
			// Check if proceeding tile contains token&#xD;
			if(t.hasToken()) {&#xD;
				// If so, set token position to new position&#xD;
				board.setTokenPos(column, i);&#xD;
			} else if(t.hasTreasure()) {&#xD;
				// If so, set treasure position to new position&#xD;
				board.setTreasurePos(column, i);&#xD;
			}&#xD;
			&#xD;
			board.setTile(column, i, t);&#xD;
		}&#xD;
		&#xD;
		// Set the first tile in row to new tile&#xD;
		board.setTile(column, board.getHeight(), newTile);&#xD;
		&#xD;
		return spareTile;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGPCoKh1EeK3d6i6ttnN5Q" name="updatePlayer" specification="_eD5gUah1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGPCoah1EeK3d6i6ttnN5Q" name="p" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
                <language>java</language>
                <body>player = p;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGPCoqh1EeK3d6i6ttnN5Q" name="nextRound" specification="_d-vTgKh1EeK3d6i6ttnN5Q">
                <language>java</language>
                <body>// Increment round and score&#xD;
		round++;&#xD;
		player.setScore(player.getScore() + 1);&#xD;
		&#xD;
		if(!hasWon()) {&#xD;
			// Make computer move if win condition not satisfied&#xD;
			computerMove();&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGPpsKh1EeK3d6i6ttnN5Q" name="hasWon" specification="_d-whoKh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGPpsah1EeK3d6i6ttnN5Q" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedParameter>
                <language>java</language>
                <body>int[] tokenPos = board.getTokenPos();&#xD;
		&#xD;
		if(board.getTile(tokenPos[0], tokenPos[1]).hasTreasure())&#xD;
			return true;&#xD;
		else&#xD;
			return false;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGPpsqh1EeK3d6i6ttnN5Q" name="computerMove" specification="_d-xIsah1EeK3d6i6ttnN5Q">
                <language>java</language>
                <body>// Randomly choose between row or column&#xD;
		int r1 = rand.nextInt(2); // row/column&#xD;
		&#xD;
		if(r1 == 0) {&#xD;
			// Row&#xD;
			&#xD;
			// Randomly choose between left or right insertion&#xD;
			int r2 = rand.nextInt(2);&#xD;
			&#xD;
			if(r2 == 0) {&#xD;
				// Left&#xD;
				try {&#xD;
					computer = (ComputerPlayer) insertRow(computer.getRandomRow(), Direction.LEFT, computer);&#xD;
				} catch (IllegalMoveException e) {&#xD;
					// In the rare case the computer makes an illegal move, redo the move&#xD;
					computerMove();&#xD;
					return;&#xD;
				}&#xD;
			} else {&#xD;
				// Right&#xD;
				try {&#xD;
					computer = (ComputerPlayer) insertRow(computer.getRandomRow(), Direction.RIGHT, computer);&#xD;
				} catch (IllegalMoveException e) {&#xD;
					// In the rare case the computer makes an illegal move, redo the move&#xD;
					computerMove();&#xD;
					return;&#xD;
				}&#xD;
			}&#xD;
		} else {&#xD;
			// Column&#xD;
			&#xD;
			// Randomly choose between top or bottom insertion&#xD;
			int r2 = rand.nextInt(2);&#xD;
			&#xD;
			if(r2 == 0) {&#xD;
				// Top&#xD;
				try {&#xD;
					computer = (ComputerPlayer) insertColumn(computer.getRandomColumn(), Direction.TOP, computer);&#xD;
				} catch (IllegalMoveException e) {&#xD;
					// In the rare case the computer makes an illegal move, redo the move&#xD;
					computerMove();&#xD;
					return;&#xD;
				}&#xD;
			} else {&#xD;
				// Bottom&#xD;
				try {&#xD;
					computer = (ComputerPlayer) insertColumn(computer.getRandomColumn(), Direction.BOTTOM, computer);&#xD;
				} catch (IllegalMoveException e) {&#xD;
					// In the rare case the computer makes an illegal move, redo the move&#xD;
					computerMove();&#xD;
					return;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGPps6h1EeK3d6i6ttnN5Q" name="getComputerPlayer" specification="_d-xvwKh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGPptKh1EeK3d6i6ttnN5Q" type="_d8FoIKh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>return computer;&#xD;
	</body>
              </ownedBehavior>
              <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGQQwKh1EeK3d6i6ttnN5Q" name="getLeaderboard" specification="_d-yW0Kh1EeK3d6i6ttnN5Q">
                <ownedParameter xmi:id="_eGQQwah1EeK3d6i6ttnN5Q" type="_d8htAKh1EeK3d6i6ttnN5Q" direction="return"/>
                <language>java</language>
                <body>return leaderboard;&#xD;
	</body>
              </ownedBehavior>
              <ownedOperation xmi:id="_d-mJkKh1EeK3d6i6ttnN5Q" name="moveTokenUp" method="_eGLYQ6h1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGmPAqh1EeK3d6i6ttnN5Q">
                  <body>Move the token up a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-nXsKh1EeK3d6i6ttnN5Q" name="moveTokenDown" method="_eGL_UKh1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGmPA6h1EeK3d6i6ttnN5Q">
                  <body>Move the token down a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-n-wKh1EeK3d6i6ttnN5Q" name="moveTokenLeft" method="_eGL_Uah1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGmPBKh1EeK3d6i6ttnN5Q">
                  <body>Move the token left a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-ol0Kh1EeK3d6i6ttnN5Q" name="moveTokenRight" method="_eGL_Uqh1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGmPBah1EeK3d6i6ttnN5Q">
                  <body>Move the token right a tile.&#xD;
	 * &#xD;
	 * @throws IllegalMoveException Thrown when a wall is encountered.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-pM4Kh1EeK3d6i6ttnN5Q" name="rotateTile" method="_eGL_U6h1EeK3d6i6ttnN5Q" raisedException="_eEpuQKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGm2EKh1EeK3d6i6ttnN5Q">
                  <body>Rotate the spare tile by a particular angle.&#xD;
	 * &#xD;
	 * @param angle The angle to rotate the spare tile by. Must be either 90, 180 or 270.</body>
                </ownedComment>
                <ownedParameter xmi:id="_d-pM4ah1EeK3d6i6ttnN5Q" name="angle">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_d-vTgKh1EeK3d6i6ttnN5Q" name="nextRound" method="_eGPCoqh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGndI6h1EeK3d6i6ttnN5Q">
                  <body>Transition to the next round.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-whoKh1EeK3d6i6ttnN5Q" name="hasWon" method="_eGPpsKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGndJKh1EeK3d6i6ttnN5Q">
                  <body>Check if the player has won by analysing the token position (i.e. if it contains treasure).&#xD;
	 * &#xD;
	 * @return Whether or not the player has satisfied the win conditions.</body>
                </ownedComment>
                <ownedParameter xmi:id="_d-xIsKh1EeK3d6i6ttnN5Q" direction="return">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
                </ownedParameter>
              </ownedOperation>
              <ownedOperation xmi:id="_d-xIsah1EeK3d6i6ttnN5Q" name="computerMove" visibility="private" method="_eGPpsqh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGndJah1EeK3d6i6ttnN5Q">
                  <body>Perform a random computer tile move.</body>
                </ownedComment>
              </ownedOperation>
              <ownedOperation xmi:id="_d-xvwKh1EeK3d6i6ttnN5Q" name="getComputerPlayer" method="_eGPps6h1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGndJqh1EeK3d6i6ttnN5Q">
                  <body>Get the computer player opponent.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD6HYKh1EeK3d6i6ttnN5Q" type="_d8FoIKh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_d-yW0Kh1EeK3d6i6ttnN5Q" name="getLeaderboard" method="_eGQQwKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGoEMKh1EeK3d6i6ttnN5Q">
                  <body>Get the leaderboard.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD6HYah1EeK3d6i6ttnN5Q" type="_d8htAKh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eD0n0Kh1EeK3d6i6ttnN5Q" name="TreasureChase" method="_eGLYQKh1EeK3d6i6ttnN5Q">
                <eAnnotations xmi:id="_eD0n0qh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                  <details xmi:id="_eD0n06h1EeK3d6i6ttnN5Q" key="create"/>
                </eAnnotations>
                <ownedComment xmi:id="_eGmPAah1EeK3d6i6ttnN5Q">
                  <body>Construct a new Treasure Chase game with the specified settings.&#xD;
	 * &#xD;
	 * @param settings The settings to use for the game.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD0n0ah1EeK3d6i6ttnN5Q" name="settings" type="_d8yLsKh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD0n1Kh1EeK3d6i6ttnN5Q" type="_d-jGQKh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eD1O4Kh1EeK3d6i6ttnN5Q" name="insertRow" method="_eGMmYah1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGm2Eah1EeK3d6i6ttnN5Q">
                  <body>Insert the spare tile into the specified row.&#xD;
	 * &#xD;
	 * @param row The row to insert the spare tile into.&#xD;
	 * @param direc The direction from which to insert the tile into.&#xD;
	 * @param performer The player who is performing the move.&#xD;
	 * @return The newly updated player with increased score/moves and spare tile based on performer.&#xD;
	 * @throws IllegalMoveException When the move cannot be accomplished due to immovable tiles, etc.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD118Kh1EeK3d6i6ttnN5Q" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eD118ah1EeK3d6i6ttnN5Q" name="direc" type="_d8U4sKh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD118qh1EeK3d6i6ttnN5Q" name="performer" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD1186h1EeK3d6i6ttnN5Q" type="_d8qP4Kh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eD2dAKh1EeK3d6i6ttnN5Q" name="insertTileRowLeft" visibility="private" method="_eGNNcKh1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGm2Eqh1EeK3d6i6ttnN5Q">
                  <body>Insert a specific tile into the specified row from the left hand side.&#xD;
	 * &#xD;
	 * @param row The row to insert the tile to.&#xD;
	 * @param newTile The tile to insert into the row.&#xD;
	 * @return The tile that falls off the side of the board.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD2dAah1EeK3d6i6ttnN5Q" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eD2dAqh1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD2dA6h1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eD3EEKh1EeK3d6i6ttnN5Q" name="insertTileRowRight" visibility="private" method="_eGNNdKh1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGm2E6h1EeK3d6i6ttnN5Q">
                  <body>Insert a specific tile into the specified row from the right hand side.&#xD;
	 * &#xD;
	 * @param row The row to insert the tile to.&#xD;
	 * @param newTile The tile to insert into the row.&#xD;
	 * @return The tile that falls off the side of the board.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD3EEah1EeK3d6i6ttnN5Q" name="row">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eD3EEqh1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD3EE6h1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eD3rIKh1EeK3d6i6ttnN5Q" name="insertColumn" method="_eGN0gKh1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGm2FKh1EeK3d6i6ttnN5Q">
                  <body>Insert the spare tile into the specified column.&#xD;
	 * &#xD;
	 * @param column The column to insert the spare tile into.&#xD;
	 * @param direc The direction from which to insert the tile into.&#xD;
	 * @param performer The player who is performing the move.&#xD;
	 * @return The newly updated player with increased score/moves and spare tile based on performer.&#xD;
	 * @throws IllegalMoveException When the move cannot be accomplished due to immovable tiles, etc.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD3rIah1EeK3d6i6ttnN5Q" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eD3rIqh1EeK3d6i6ttnN5Q" name="direc" type="_d8U4sKh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD3rI6h1EeK3d6i6ttnN5Q" name="performer" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD4SMKh1EeK3d6i6ttnN5Q" type="_d8qP4Kh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eD4SMah1EeK3d6i6ttnN5Q" name="insertTileColumnBottom" visibility="private" method="_eGObkKh1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGndIKh1EeK3d6i6ttnN5Q">
                  <body>Insert a specific tile into the specified column from the bottom.&#xD;
	 * &#xD;
	 * @param column The column to insert the tile to.&#xD;
	 * @param newTile The tile to insert into the column.&#xD;
	 * @return The tile that falls off the side of the board.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD4SMqh1EeK3d6i6ttnN5Q" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eD4SM6h1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD45QKh1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eD45Qah1EeK3d6i6ttnN5Q" name="insertTileColumnTop" visibility="private" method="_eGOblKh1EeK3d6i6ttnN5Q" raisedException="_d8dbkKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGndIah1EeK3d6i6ttnN5Q">
                  <body>Insert a specific tile into the specified column from the top.&#xD;
	 * &#xD;
	 * @param column The column to insert the tile to.&#xD;
	 * @param newTile The tile to insert into the column.&#xD;
	 * @return The tile that falls off the side of the board.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD45Qqh1EeK3d6i6ttnN5Q" name="column">
                  <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
                </ownedParameter>
                <ownedParameter xmi:id="_eD45Q6h1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
                <ownedParameter xmi:id="_eD5gUKh1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
              </ownedOperation>
              <ownedOperation xmi:id="_eD5gUah1EeK3d6i6ttnN5Q" name="updatePlayer" method="_eGPCoKh1EeK3d6i6ttnN5Q">
                <ownedComment xmi:id="_eGndIqh1EeK3d6i6ttnN5Q">
                  <body>Update the player with a new player.&#xD;
	 * &#xD;
	 * @param p The new player.</body>
                </ownedComment>
                <ownedParameter xmi:id="_eD5gUqh1EeK3d6i6ttnN5Q" name="p" type="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
              </ownedOperation>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eG5J8Kh1EeK3d6i6ttnN5Q" name="" memberEnd="_eG5J8ah1EeK3d6i6ttnN5Q _d-XgEKh1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eG5J8ah1EeK3d6i6ttnN5Q" name="" type="_d-PkQKh1EeK3d6i6ttnN5Q" association="_eG5J8Kh1EeK3d6i6ttnN5Q"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eG6_Iah1EeK3d6i6ttnN5Q" name="" memberEnd="_eG6_Iqh1EeK3d6i6ttnN5Q _d-YHIKh1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eG6_Iqh1EeK3d6i6ttnN5Q" name="" type="_d-PkQKh1EeK3d6i6ttnN5Q" association="_eG6_Iah1EeK3d6i6ttnN5Q"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eG8NQah1EeK3d6i6ttnN5Q" name="" memberEnd="_eG8NQqh1EeK3d6i6ttnN5Q _d-ajYKh1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eG8NQqh1EeK3d6i6ttnN5Q" name="" type="_d-PkQKh1EeK3d6i6ttnN5Q" association="_eG8NQah1EeK3d6i6ttnN5Q"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eHIagKh1EeK3d6i6ttnN5Q" name="" memberEnd="_eHIagah1EeK3d6i6ttnN5Q _eFXf8Kh1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eHIagah1EeK3d6i6ttnN5Q" name="" type="_d-jGQKh1EeK3d6i6ttnN5Q" association="_eHIagKh1EeK3d6i6ttnN5Q"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eHJooah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHJooqh1EeK3d6i6ttnN5Q _eFXf8ah1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eHJooqh1EeK3d6i6ttnN5Q" name="" type="_d-jGQKh1EeK3d6i6ttnN5Q" association="_eHJooah1EeK3d6i6ttnN5Q"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eHLd0ah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHLd0qh1EeK3d6i6ttnN5Q _eFYHAKh1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eHLd0qh1EeK3d6i6ttnN5Q" name="" type="_d-jGQKh1EeK3d6i6ttnN5Q" association="_eHLd0ah1EeK3d6i6ttnN5Q"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eHNTAKh1EeK3d6i6ttnN5Q" name="" memberEnd="_eHNTAah1EeK3d6i6ttnN5Q _eFYuEah1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eHNTAah1EeK3d6i6ttnN5Q" name="" type="_d-jGQKh1EeK3d6i6ttnN5Q" association="_eHNTAKh1EeK3d6i6ttnN5Q"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eHOhIah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHOhIqh1EeK3d6i6ttnN5Q _eFYuEqh1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eHOhIqh1EeK3d6i6ttnN5Q" name="" type="_d-jGQKh1EeK3d6i6ttnN5Q" association="_eHOhIah1EeK3d6i6ttnN5Q"/>
            </packagedElement>
            <packagedElement xmi:type="uml:Association" xmi:id="_eHQWUah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHQWUqh1EeK3d6i6ttnN5Q _eFZVIah1EeK3d6i6ttnN5Q">
              <ownedEnd xmi:id="_eHQWUqh1EeK3d6i6ttnN5Q" name="" type="_d-jGQKh1EeK3d6i6ttnN5Q" association="_eHQWUah1EeK3d6i6ttnN5Q"/>
            </packagedElement>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d7qKUKh1EeK3d6i6ttnN5Q" name="Board">
            <ownedComment xmi:id="_eGeTMKh1EeK3d6i6ttnN5Q">
              <body>Represents a game board containing tiles.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eE4-0Kh1EeK3d6i6ttnN5Q" name="tiles" type="_d89K0Kh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eG9bYah1EeK3d6i6ttnN5Q">
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eE4-0ah1EeK3d6i6ttnN5Q" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eE5l4ah1EeK3d6i6ttnN5Q" name="width" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eE6M8Kh1EeK3d6i6ttnN5Q" name="height" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eE60AKh1EeK3d6i6ttnN5Q" name="tokenPos" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eE60Aah1EeK3d6i6ttnN5Q" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eE7bEKh1EeK3d6i6ttnN5Q" name="treasurePos" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eE7bEah1EeK3d6i6ttnN5Q" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eE7bE6h1EeK3d6i6ttnN5Q" name="r" visibility="private" type="_eDNj0Kh1EeK3d6i6ttnN5Q" association="_eG_Qkah1EeK3d6i6ttnN5Q"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF2BEKh1EeK3d6i6ttnN5Q" name="Board" specification="_d7w4AKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF2oIKh1EeK3d6i6ttnN5Q" name="width">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF2oIah1EeK3d6i6ttnN5Q" name="height">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF2oIqh1EeK3d6i6ttnN5Q" type="_d7qKUKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this.r = new Random();&#xD;
		&#xD;
		this.width = width;&#xD;
		this.height = height;&#xD;
		this.tiles = new Tile[height][width];&#xD;
		&#xD;
		// Randomise tiles&#xD;
		for(int i = 0; i &lt; height; i++) {&#xD;
			// Skip far left and far right columns&#xD;
			for(int j = 0; j &lt; width; j++) {&#xD;
				Tile randomTile;&#xD;
				int rNumber = r.nextInt(4); // CORNER, LINE, TSHAPE, CROSS&#xD;
				int rotation = r.nextInt(4); // DEFAULT, NINETY, HUNDREDANDEIGHTY, TWOHUNDREDANDSEVENTY&#xD;
				TileType[] tileTypes = TileType.values();&#xD;
				RotationAngle[] rotationAngles = RotationAngle.values();&#xD;
				&#xD;
				randomTile = new Tile(tileTypes[rNumber], rotationAngles[rotation]);&#xD;
				tiles[i][j] = randomTile;&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set immovable tiles (i,j) where i and j are odd&#xD;
		for(int i = 0; i &lt; height; i++) {&#xD;
			for(int j = 0; j &lt; width; j++) {&#xD;
				// Internally board starts at 0, but to the user it starts at 1&#xD;
				// so we need to perform odd calculations on what the user sees&#xD;
				if(((i + 1) % 2 != 0) &amp;&amp; ((j + 1) % 2 != 0)) {&#xD;
					// Found an odd combination&#xD;
					tiles[i][j].setMovable(false);&#xD;
					&#xD;
					// Check if not on the edge (must be cross in this case)&#xD;
					if(i != 0 &amp;&amp; i != height - 1 &amp;&amp; j != 0 &amp;&amp; j != width - 1) {&#xD;
						tiles[i][j].setType(TileType.CROSS);&#xD;
					}&#xD;
					else {&#xD;
						// Tile is on the edge, determine which edge&#xD;
						if(i == 0 &amp;&amp; j == 0) {&#xD;
							// Top left hand corner&#xD;
							tiles[i][j] = new Tile(TileType.CORNER, RotationAngle.DEFAULT, false);&#xD;
						}&#xD;
						else if(i == 0 &amp;&amp; j == width - 1) {&#xD;
							// Top right hand corner&#xD;
							tiles[i][j] = new Tile(TileType.CORNER, RotationAngle.NINETY, false);&#xD;
						}&#xD;
						else if(i == height - 1 &amp;&amp; j == width - 1) {&#xD;
							// Bottom right hand corner&#xD;
							tiles[i][j] = new Tile(TileType.CORNER, RotationAngle.HUNDREDANDEIGHTY, false);&#xD;
						}&#xD;
						else if(i == height - 1 &amp;&amp; j == 0) {&#xD;
							// Bottom left hand corner&#xD;
							tiles[i][j] = new Tile(TileType.CORNER, RotationAngle.TWOHUNDREDANDSEVENTY, false);&#xD;
						}&#xD;
						else if(i == 0) {&#xD;
							// Top most row&#xD;
							// Set to either horizontal line or horizontal T-shape&#xD;
							int type = r.nextInt(2); // LINE, TSHAPE&#xD;
							&#xD;
							if(type == 0)&#xD;
								tiles[i][j] = new Tile(TileType.LINE, RotationAngle.NINETY, false);&#xD;
							else&#xD;
								tiles[i][j] = new Tile(TileType.TSHAPE, RotationAngle.NINETY, false);&#xD;
						}&#xD;
						else if(i == height - 1) {&#xD;
							// Bottom most row&#xD;
							// Set to either horizontal line or horizontal T-shape&#xD;
							int type = r.nextInt(2); // LINE, TSHAPE&#xD;
							&#xD;
							if(type == 0)&#xD;
								tiles[i][j] = new Tile(TileType.LINE, RotationAngle.NINETY, false);&#xD;
							else&#xD;
								tiles[i][j] = new Tile(TileType.TSHAPE, RotationAngle.TWOHUNDREDANDSEVENTY, false);&#xD;
						}&#xD;
						else if(j == 0) {&#xD;
							// Left most column&#xD;
							// Set to either horizontal line or horizontal T-shape&#xD;
							int type = r.nextInt(2); // LINE, TSHAPE&#xD;
							&#xD;
							if(type == 0)&#xD;
								tiles[i][j] = new Tile(TileType.LINE, RotationAngle.DEFAULT, false);&#xD;
							else&#xD;
								tiles[i][j] = new Tile(TileType.TSHAPE, RotationAngle.DEFAULT, false);&#xD;
						}&#xD;
						else if(j == width - 1) {&#xD;
							// Right most column&#xD;
							// Set to either horizontal line or horizontal T-shape&#xD;
							int type = r.nextInt(2); // LINE, TSHAPE&#xD;
							&#xD;
							if(type == 0)&#xD;
								tiles[i][j] = new Tile(TileType.LINE, RotationAngle.DEFAULT, false);&#xD;
							else&#xD;
								tiles[i][j] = new Tile(TileType.TSHAPE, RotationAngle.HUNDREDANDEIGHTY, false);&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Set token position (bottom left corner)&#xD;
		this.tokenPos = new int[2];&#xD;
		this.tokenPos[0] = 1; // column&#xD;
		this.tokenPos[1] = 1; // row&#xD;
		&#xD;
		tiles[getInternalRow(tokenPos[1])][getInternalColumn(tokenPos[0])].setToken(true);&#xD;
		&#xD;
		// Initialise treasure (but don't set)&#xD;
		this.treasurePos = new int[2];&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF3PMKh1EeK3d6i6ttnN5Q" name="getTile" specification="_d7zUQKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF3PMah1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF3PMqh1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF32QKh1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>// Check if arguments are valid&#xD;
		if(column &lt; 1 || column > width) {&#xD;
			throw new IllegalArgumentException(&quot;Specified column not within range&quot;);&#xD;
		} else if(row &lt; 1 || row > height) {&#xD;
			throw new IllegalArgumentException(&quot;Specified row not within range&quot;);&#xD;
		}&#xD;
		&#xD;
		// Calculate internal coordinates and return corresponding tile&#xD;
		return tiles[getInternalRow(row)][getInternalColumn(column)];&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF32Qah1EeK3d6i6ttnN5Q" name="setTile" specification="_eDPZAah1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF32Qqh1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF32Q6h1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF32RKh1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
              <language>java</language>
              <body>// Check if arguments are valid&#xD;
		if(column &lt; 1 || column > width) {&#xD;
			throw new IllegalArgumentException(&quot;Specified column not within range&quot;);&#xD;
		} else if(row &lt; 1 || row > height) {&#xD;
			throw new IllegalArgumentException(&quot;Specified row not within range&quot;);&#xD;
		}&#xD;
		&#xD;
		// Calculate internal coordinates and return corresponding tile&#xD;
		tiles[getInternalRow(row)][getInternalColumn(column)] = newTile;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF4dUKh1EeK3d6i6ttnN5Q" name="setTokenPos" specification="_d72XkKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF4dUah1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF4dUqh1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>tokenPos[0] = column;&#xD;
		tokenPos[1] = row;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF4dU6h1EeK3d6i6ttnN5Q" name="setTreasurePos" specification="_d73lsKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF4dVKh1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF4dVah1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>treasurePos[0] = column;&#xD;
		treasurePos[1] = row;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF5EYKh1EeK3d6i6ttnN5Q" name="getInternalRow" specification="_d75a4Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF5EYah1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF5EYqh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>return (getHeight() - row);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF5EY6h1EeK3d6i6ttnN5Q" name="getInternalColumn" specification="_d77QEKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF5EZKh1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF5EZah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>return column - 1;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF5rcKh1EeK3d6i6ttnN5Q" name="getHeight" specification="_d78eMKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF5rcah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>return height;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d7w4AKh1EeK3d6i6ttnN5Q" name="Board" method="_eF2BEKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d7yGIKh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d7yGIah1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGeTMah1EeK3d6i6ttnN5Q">
                <body>Construct a board of a particular size.&#xD;
	 * &#xD;
	 * @param width The width of the board.&#xD;
	 * @param height The height of the board.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d7xfEKh1EeK3d6i6ttnN5Q" name="width">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d7xfEah1EeK3d6i6ttnN5Q" name="height">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d7yGIqh1EeK3d6i6ttnN5Q" type="_d7qKUKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d7zUQKh1EeK3d6i6ttnN5Q" name="getTile" method="_eF3PMKh1EeK3d6i6ttnN5Q" raisedException="_eEhycKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGe6QKh1EeK3d6i6ttnN5Q">
                <body>Get the tile at the specified location.&#xD;
	 * &#xD;
	 * @param column The column coordinate of the tile.&#xD;
	 * @param row The row coordinate of the tile.&#xD;
	 * @return The particular tile at the specified location.&#xD;
	 * @throws IllegalArgumentException If either the row or column is not within range.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d7zUQah1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d7z7UKh1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eDPZAKh1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d72XkKh1EeK3d6i6ttnN5Q" name="setTokenPos" method="_eF4dUKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGe6Qqh1EeK3d6i6ttnN5Q">
                <body>Set the current token position as a board coordinate.&#xD;
	 * &#xD;
	 * @param column The column number of the token.&#xD;
	 * @param row The row number of the token.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d72Xkah1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d72Xkqh1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d73lsKh1EeK3d6i6ttnN5Q" name="setTreasurePos" method="_eF4dU6h1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGe6Q6h1EeK3d6i6ttnN5Q">
                <body>Set the current treasure position as a board coordinate.&#xD;
	 * &#xD;
	 * @param column The column number of the treasure.&#xD;
	 * @param row The row number of the treasure.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d74MwKh1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d74Mwah1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d75a4Kh1EeK3d6i6ttnN5Q" name="getInternalRow" method="_eF5EYKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGe6RKh1EeK3d6i6ttnN5Q">
                <body>Convert a row to its internal array equivalent.&#xD;
	 * &#xD;
	 * @param row The row as labelled on the board.&#xD;
	 * @return The internal array equivalent.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d76B8Kh1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d76B8ah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d77QEKh1EeK3d6i6ttnN5Q" name="getInternalColumn" method="_eF5EY6h1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGe6Rah1EeK3d6i6ttnN5Q">
                <body>Convert a column to its internal array equivalent.&#xD;
	 * &#xD;
	 * @param column The column as labelled on the board.&#xD;
	 * @return The internal array equivalent.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d77QEah1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d773IKh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d78eMKh1EeK3d6i6ttnN5Q" name="getHeight" method="_eF5rcKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGe6Rqh1EeK3d6i6ttnN5Q">
                <body>Get the height of the board.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d79FQKh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_eDPZAah1EeK3d6i6ttnN5Q" name="setTile" method="_eF32Qah1EeK3d6i6ttnN5Q" raisedException="_eEhycKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGe6Qah1EeK3d6i6ttnN5Q">
                <body>Set the tile at the specified location to a new tile.&#xD;
	 * &#xD;
	 * @param column The column coordinate of the tile.&#xD;
	 * @param row The row coordinate of the tile.&#xD;
	 * @param newTile The new tile for replacing the existing tile with.&#xD;
	 * @throws IllegalArgumentException If either the row or column is not within range.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eDQAEKh1EeK3d6i6ttnN5Q" name="column">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eDQAEah1EeK3d6i6ttnN5Q" name="row">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eDQAEqh1EeK3d6i6ttnN5Q" name="newTile" type="_d89K0Kh1EeK3d6i6ttnN5Q"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d8FoIKh1EeK3d6i6ttnN5Q" name="ComputerPlayer">
            <ownedComment xmi:id="_eGfhUKh1EeK3d6i6ttnN5Q">
              <body>Represents a computer opponent for a player to play against in the Labyrinth&#xD;
game.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <generalization xmi:id="_eDURgqh1EeK3d6i6ttnN5Q" general="_d8qP4Kh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eE9QQKh1EeK3d6i6ttnN5Q" name="columns" visibility="private" type="_eDR1QKh1EeK3d6i6ttnN5Q" association="_eHAesah1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eE_Fcah1EeK3d6i6ttnN5Q" name="rows" visibility="private" type="_eDR1QKh1EeK3d6i6ttnN5Q" association="_eHCT4Kh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFA6oah1EeK3d6i6ttnN5Q" name="rand" visibility="private" type="_eDNj0Kh1EeK3d6i6ttnN5Q" association="_eHDiAah1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFBhsah1EeK3d6i6ttnN5Q" name="angles" visibility="private" type="_d8uhUKh1EeK3d6i6ttnN5Q">
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eFBhsqh1EeK3d6i6ttnN5Q" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFCv0Kh1EeK3d6i6ttnN5Q" name="types" visibility="private" type="_d-L54Kh1EeK3d6i6ttnN5Q">
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eFCv0ah1EeK3d6i6ttnN5Q" value="*"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF65kKh1EeK3d6i6ttnN5Q" name="ComputerPlayer" specification="_eDTqcKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF65kah1EeK3d6i6ttnN5Q" name="board" type="_d7qKUKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eF65kqh1EeK3d6i6ttnN5Q" type="_d8FoIKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this.columns = new ArrayList&lt;Integer>();&#xD;
		this.rows = new ArrayList&lt;Integer>();&#xD;
		this.rand = new Random();&#xD;
		&#xD;
		// Add available rows and columns (odd tiles are immovable, so get even)&#xD;
		for(int i = 1; i &lt;= board.getHeight(); i++) {&#xD;
			if(i % 2 == 0) {&#xD;
				rows.add(i);&#xD;
			}&#xD;
		}&#xD;
		for(int i = 1; i &lt;= board.getWidth(); i++) {&#xD;
			if(i % 2 == 0) {&#xD;
				columns.add(i);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		angles = RotationAngle.values();&#xD;
		types = TileType.values();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF65k6h1EeK3d6i6ttnN5Q" name="getRandomColumn" specification="_d8IrcKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF65lKh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              </ownedParameter>
              <language>java</language>
              <body>int r = rand.nextInt(columns.size());&#xD;
		return columns.get(r);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF7goKh1EeK3d6i6ttnN5Q" name="getRandomRow" specification="_d8J5kKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF7goah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              </ownedParameter>
              <language>java</language>
              <body>int r = rand.nextInt(rows.size());&#xD;
		return rows.get(r);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF7goqh1EeK3d6i6ttnN5Q" name="getRandomRotation" specification="_d8LuwKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF7go6h1EeK3d6i6ttnN5Q" type="_d8uhUKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>int r = rand.nextInt(angles.length);&#xD;
		return angles[r];&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF7gpKh1EeK3d6i6ttnN5Q" name="getRandomTileType" specification="_d8M84Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF7gpah1EeK3d6i6ttnN5Q" type="_d-L54Kh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>int r = rand.nextInt(types.length);&#xD;
		return types[r];&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d8IrcKh1EeK3d6i6ttnN5Q" name="getRandomColumn" method="_eF65k6h1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGfhUqh1EeK3d6i6ttnN5Q">
                <body>Get a random column coordinate from the available rows.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d8JSgKh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d8J5kKh1EeK3d6i6ttnN5Q" name="getRandomRow" method="_eF7goKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGfhU6h1EeK3d6i6ttnN5Q">
                <body>Get a random row coordinate from the available rows.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d8KgoKh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d8LuwKh1EeK3d6i6ttnN5Q" name="getRandomRotation" method="_eF7goqh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGfhVKh1EeK3d6i6ttnN5Q">
                <body>Get a random tile rotation.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eDURgKh1EeK3d6i6ttnN5Q" type="_d8uhUKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d8M84Kh1EeK3d6i6ttnN5Q" name="getRandomTileType" method="_eF7gpKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGfhVah1EeK3d6i6ttnN5Q">
                <body>Get a random tile type.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eDURgah1EeK3d6i6ttnN5Q" type="_d-L54Kh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_eDTqcKh1EeK3d6i6ttnN5Q" name="ComputerPlayer" method="_eF65kKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_eDTqcqh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_eDTqc6h1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGfhUah1EeK3d6i6ttnN5Q">
                <body>Generate a computer player opponent using the board&#xD;
	 * settings as information on the computers tile moves.&#xD;
	 * &#xD;
	 * @param board The board to gather information from.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eDTqcah1EeK3d6i6ttnN5Q" name="board" type="_d7qKUKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eDTqdKh1EeK3d6i6ttnN5Q" type="_d8FoIKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_d8U4sKh1EeK3d6i6ttnN5Q" name="Direction">
            <ownedLiteral xmi:id="_d8WG0Kh1EeK3d6i6ttnN5Q" name="LEFT"/>
            <ownedLiteral xmi:id="_d8WG0ah1EeK3d6i6ttnN5Q" name="RIGHT"/>
            <ownedLiteral xmi:id="_d8Wt4Kh1EeK3d6i6ttnN5Q" name="TOP"/>
            <ownedLiteral xmi:id="_d8Wt4ah1EeK3d6i6ttnN5Q" name="BOTTOM"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d8Wt4qh1EeK3d6i6ttnN5Q" name="GameManager">
            <ownedComment xmi:id="_eGgIYKh1EeK3d6i6ttnN5Q">
              <body>Allows for the loading and saving of games.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.01042013&#xD;
 *</body>
            </ownedComment>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF8HsKh1EeK3d6i6ttnN5Q" name="load" specification="_d8X8AKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF8Hsah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF8Hsqh1EeK3d6i6ttnN5Q" type="_d-PkQKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>GameMode game = null;&#xD;
		BufferedReader reader = new BufferedReader(new FileReader(path));&#xD;
		&#xD;
		SettingsManager settings = new SettingsManager();&#xD;
		int nextColumn = 1, nextRow = 1;&#xD;
		String line = reader.readLine();&#xD;
		&#xD;
		while(line != null) {&#xD;
			String[] lineTokens = line.split(&quot; &quot;);&#xD;
			&#xD;
			if(lineTokens[0].equals(&quot;ROWS&quot;)) {&#xD;
				// Process rows&#xD;
				settings.setRows(Integer.parseInt(lineTokens[1]));&#xD;
			} else if(lineTokens[0].equals(&quot;COLUMNS&quot;)) {&#xD;
				// Process columns&#xD;
				settings.setColumns(Integer.parseInt(lineTokens[1]));&#xD;
			} else if(lineTokens[0].equals(&quot;GAME_MODE&quot;)) {&#xD;
				// Process game mode&#xD;
				if(lineTokens[1].equals(&quot;tc&quot;)) {&#xD;
					game = new TreasureChase(settings);&#xD;
				}&#xD;
			} else if(lineTokens[0].equals(&quot;TILE&quot;)) {&#xD;
				// Process tile&#xD;
				if(nextColumn > settings.getColumns()) {&#xD;
					// Reset column, increase row&#xD;
					nextColumn = 1;&#xD;
					nextRow++;&#xD;
				}&#xD;
				&#xD;
				// Tile properties&#xD;
				TileType tileType;&#xD;
				RotationAngle rotationAngle;&#xD;
				Tile newTile;&#xD;
				&#xD;
				// Tile type is 2nd element&#xD;
				tileType = TileType.valueOf(lineTokens[1]);&#xD;
				&#xD;
				// Rotation angle is 3rd element&#xD;
				rotationAngle = RotationAngle.valueOf(lineTokens[2]);&#xD;
				&#xD;
				// Form new tile&#xD;
				newTile = new Tile(tileType, rotationAngle);&#xD;
				&#xD;
				// Check if immovable&#xD;
				if((nextColumn % 2 != 0) &amp;&amp; (nextRow % 2 != 0))&#xD;
					newTile.setMovable(false);&#xD;
				&#xD;
				game.getBoard().setTile(nextColumn, nextRow, newTile);&#xD;
				&#xD;
				nextColumn++;&#xD;
			} else if(lineTokens[0].equals(&quot;TOKEN&quot;)) {&#xD;
				game.getBoard().getTile(Integer.parseInt(lineTokens[1]), Integer.parseInt(lineTokens[2])).setToken(true);&#xD;
			} else if(lineTokens[0].equals(&quot;TREASURE&quot;)) {&#xD;
				game.getBoard().getTile(Integer.parseInt(lineTokens[1]), Integer.parseInt(lineTokens[2])).setTreasure(true);&#xD;
			}&#xD;
			&#xD;
			line = reader.readLine();&#xD;
		}&#xD;
		&#xD;
		reader.close();&#xD;
		return game;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF8uwKh1EeK3d6i6ttnN5Q" name="save" specification="_eDWGsKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF8uwah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF8uwqh1EeK3d6i6ttnN5Q" name="game" type="_d-PkQKh1EeK3d6i6ttnN5Q"/>
              <language>java</language>
              <body>BufferedWriter writer = new BufferedWriter(new FileWriter(path));&#xD;
		&#xD;
		// Get the game properties&#xD;
		int rows = game.getSettings().getRows();&#xD;
		int columns = game.getSettings().getColumns();&#xD;
		String gameMode = game.getClass().getName().equals(&quot;TreasureChase&quot;) ? &quot;tc&quot; : &quot;lc&quot;;&#xD;
		&#xD;
		writer.write(&quot;ROWS &quot; + rows);&#xD;
		writer.newLine();&#xD;
		writer.write(&quot;COLUMNS &quot; + columns);&#xD;
		writer.newLine();&#xD;
		writer.write(&quot;GAME_MODE &quot; + gameMode);&#xD;
		writer.newLine();&#xD;
		&#xD;
		for(int i = 1; i &lt;= rows; i++) {&#xD;
			for(int j = 1; j &lt;= columns; j++) {&#xD;
				Tile t = game.getBoard().getTile(j, i);&#xD;
				&#xD;
				writer.write(&quot;TILE &quot; + t.getType() + &quot; &quot; + t.getRotation());&#xD;
				writer.newLine();&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		writer.write(&quot;TOKEN &quot; + game.getBoard().getTokenPos()[0] + &quot; &quot; + game.getBoard().getTokenPos()[1]);&#xD;
		writer.newLine();&#xD;
		&#xD;
		writer.write(&quot;TREASURE &quot; + game.getBoard().getTreasurePos()[0] + &quot; &quot; + game.getBoard().getTreasurePos()[1]);&#xD;
		writer.newLine();&#xD;
		&#xD;
		writer.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF8uw6h1EeK3d6i6ttnN5Q" name="addGameEntry" specification="_d8aYQKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF8uxKh1EeK3d6i6ttnN5Q" name="name">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>String path = System.getProperty(&quot;user.dir&quot;) + &quot;/saves/list.txt&quot;;&#xD;
		BufferedWriter writer = new BufferedWriter(new FileWriter(path, true));&#xD;
		&#xD;
		writer.write(name);&#xD;
		writer.newLine();&#xD;
		writer.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d8X8AKh1EeK3d6i6ttnN5Q" name="load" method="_eF8HsKh1EeK3d6i6ttnN5Q" raisedException="_eDZxEah1EeK3d6i6ttnN5Q _eDdbcah1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_d8X8Aah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eDVfoKh1EeK3d6i6ttnN5Q" type="_d-PkQKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d8aYQKh1EeK3d6i6ttnN5Q" name="addGameEntry" method="_eF8uw6h1EeK3d6i6ttnN5Q" raisedException="_eDdbcah1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_d8aYQah1EeK3d6i6ttnN5Q" name="name">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_eDWGsKh1EeK3d6i6ttnN5Q" name="save" method="_eF8uwKh1EeK3d6i6ttnN5Q" raisedException="_eDdbcah1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eDWGsah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eDWGsqh1EeK3d6i6ttnN5Q" name="game" type="_d-PkQKh1EeK3d6i6ttnN5Q"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d8dbkKh1EeK3d6i6ttnN5Q" name="IllegalMoveException">
            <ownedComment xmi:id="_eGgIYah1EeK3d6i6ttnN5Q">
              <body>Thrown when an illegal move occurs.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.20032013&#xD;
 *</body>
            </ownedComment>
            <generalization xmi:id="_eEmq8ah1EeK3d6i6ttnN5Q" general="_eElc0Kh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFD98Kh1EeK3d6i6ttnN5Q" name="serialVersionUID" visibility="private" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#long"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_eFD98ah1EeK3d6i6ttnN5Q" value="6221847028052337813L"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF9V0Kh1EeK3d6i6ttnN5Q" name="IllegalMoveException" specification="_d8eCoKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF9V0ah1EeK3d6i6ttnN5Q" type="_d8dbkKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>super();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF984Kh1EeK3d6i6ttnN5Q" name="IllegalMoveException" specification="_d8epsKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF984ah1EeK3d6i6ttnN5Q" name="message">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF984qh1EeK3d6i6ttnN5Q" type="_d8dbkKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>super(message);&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d8eCoKh1EeK3d6i6ttnN5Q" name="IllegalMoveException" method="_eF9V0Kh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d8eCoah1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d8eCoqh1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedParameter xmi:id="_d8eCo6h1EeK3d6i6ttnN5Q" type="_d8dbkKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d8epsKh1EeK3d6i6ttnN5Q" name="IllegalMoveException" method="_eF984Kh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d8epsqh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d8eps6h1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedParameter xmi:id="_d8epsah1EeK3d6i6ttnN5Q" name="message">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d8eptKh1EeK3d6i6ttnN5Q" type="_d8dbkKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d8f30Kh1EeK3d6i6ttnN5Q" name="Labyrinth">
            <ownedComment xmi:id="_eGgIYqh1EeK3d6i6ttnN5Q">
              <body>The main entry point to the Labyrinth game.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.22032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eFElAKh1EeK3d6i6ttnN5Q" name="SETTINGS_PATH" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_eFFMEKh1EeK3d6i6ttnN5Q" value="System.getProperty(&quot;user.dir&quot;) + &quot;/settings/default&quot;"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFFMEah1EeK3d6i6ttnN5Q" name="HELP_PATH" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_eFFMEqh1EeK3d6i6ttnN5Q" value="System.getProperty(&quot;user.dir&quot;) + &quot;/media/help.txt&quot;"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFFME6h1EeK3d6i6ttnN5Q" name="LOAD_PATH" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_eFFzIKh1EeK3d6i6ttnN5Q" value="System.getProperty(&quot;user.dir&quot;) + &quot;/saves/list&quot;"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF-j8Kh1EeK3d6i6ttnN5Q" name="main" specification="_d8ge4Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF-j8ah1EeK3d6i6ttnN5Q" name="args">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eF-j8qh1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>CharacterElements.initCharacters(); // Set the static characters in accordance to the charset in use&#xD;
		SettingsManager settings = new SettingsManager(SETTINGS_PATH);&#xD;
		&#xD;
		// By default just start up a new Treasure Chase game&#xD;
		GameMode game = new TreasureChase(settings);&#xD;
		UserInterface ui = new UserInterface(game);&#xD;
		ui.runMenu();&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d8ge4Kh1EeK3d6i6ttnN5Q" name="main" isStatic="true" method="_eF-j8Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_d8ge4ah1EeK3d6i6ttnN5Q" name="args">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_d8hF8Kh1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d8htAKh1EeK3d6i6ttnN5Q" name="Leaderboard">
            <ownedComment xmi:id="_eGgIY6h1EeK3d6i6ttnN5Q">
              <body>Represents the leaderboard in the Labyrinth game.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.26032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eFFzIah1EeK3d6i6ttnN5Q" name="names" type="_eDR1QKh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eHFXMKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFHoUKh1EeK3d6i6ttnN5Q" name="scores" type="_eDR1QKh1EeK3d6i6ttnN5Q" isReadOnly="true" association="_eHGlUah1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFI2cah1EeK3d6i6ttnN5Q" name="path" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF_LAKh1EeK3d6i6ttnN5Q" name="Leaderboard" specification="_d8i7IKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF_LAah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF_LAqh1EeK3d6i6ttnN5Q" type="_d8htAKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this.names = new ArrayList&lt;String>();&#xD;
		this.scores = new ArrayList&lt;Integer>();&#xD;
		this.path = path;&#xD;
		&#xD;
		try {&#xD;
			load(path);&#xD;
		} catch(FileNotFoundException e) {&#xD;
			System.out.println(&quot;Error: Leaderboard file not found: &quot; + path);&#xD;
		} catch(IOException e) {&#xD;
			System.out.println(&quot;Error: Leaderboard IO error: &quot; + path);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF_yEKh1EeK3d6i6ttnN5Q" name="submit" specification="_d8kJQKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF_yEah1EeK3d6i6ttnN5Q" name="name">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eF_yEqh1EeK3d6i6ttnN5Q" name="score">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>// Check if leaderboard is empty first&#xD;
		if(scores.isEmpty()) {&#xD;
			names.add(name);&#xD;
			scores.add(score);&#xD;
			return;&#xD;
		}&#xD;
		&#xD;
		int placementIndex = 0;&#xD;
		&#xD;
		for(int i = 0; i &lt; scores.size(); i++) {&#xD;
			if(scores.get(i) > score) {&#xD;
				placementIndex = i;&#xD;
				break;&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		names.add(placementIndex, name);&#xD;
		scores.add(placementIndex, score);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eF_yE6h1EeK3d6i6ttnN5Q" name="load" specification="_d8kwUKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eF_yFKh1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>BufferedReader reader = new BufferedReader(new FileReader(path));&#xD;
		Scanner scanner = null;&#xD;
		&#xD;
		String line = reader.readLine();&#xD;
		&#xD;
		while(line != null) {&#xD;
			scanner = new Scanner(line);&#xD;
			String[] entry;&#xD;
			&#xD;
			try {&#xD;
				entry = scanner.nextLine().split(&quot; &quot;);&#xD;
			} catch(NoSuchElementException e) {&#xD;
				// No line was found, just skip&#xD;
				line = reader.readLine();&#xD;
				continue;&#xD;
			}&#xD;
			&#xD;
			if(entry.length &lt; 2) {&#xD;
				scanner.close();&#xD;
				reader.close();&#xD;
				throw new IOException(&quot;Invalid entry in leaderboard!&quot;);&#xD;
			}&#xD;
			&#xD;
			names.add(entry[0]);&#xD;
			&#xD;
			try {&#xD;
				scores.add(Integer.parseInt(entry[1]));&#xD;
			} catch(NumberFormatException e) {&#xD;
				scanner.close();&#xD;
				reader.close();&#xD;
				throw new IOException(&quot;Invalid entry in leaderboard!&quot;);&#xD;
			}&#xD;
			&#xD;
			scanner.close();&#xD;
			line = reader.readLine();&#xD;
		}&#xD;
		&#xD;
		reader.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGAZIKh1EeK3d6i6ttnN5Q" name="save" specification="_d8l-cKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>BufferedWriter writer = new BufferedWriter(new FileWriter(path));&#xD;
&#xD;
		// Save the leaderboard&#xD;
		for(int i = 0; i &lt; names.size(); i++) {&#xD;
			writer.write(names.get(i) + &quot; &quot; + scores.get(i));&#xD;
			writer.newLine();&#xD;
		}&#xD;
&#xD;
		writer.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d8i7IKh1EeK3d6i6ttnN5Q" name="Leaderboard" method="_eF_LAKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d8jiMah1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d8jiMqh1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGgvcKh1EeK3d6i6ttnN5Q">
                <body>Construct a leader board from an existing leader board file.&#xD;
	 * &#xD;
	 * @param path The leaderboard file to load.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d8jiMKh1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d8jiM6h1EeK3d6i6ttnN5Q" type="_d8htAKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d8kJQKh1EeK3d6i6ttnN5Q" name="submit" method="_eF_yEKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGgvcah1EeK3d6i6ttnN5Q">
                <body>Submit a score to the leaderboard.&#xD;
	 * &#xD;
	 * @param name The name of the player.&#xD;
	 * @param score The score to submit.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d8kJQah1EeK3d6i6ttnN5Q" name="name">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d8kJQqh1EeK3d6i6ttnN5Q" name="score">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d8kwUKh1EeK3d6i6ttnN5Q" name="load" method="_eF_yE6h1EeK3d6i6ttnN5Q" raisedException="_eDdbcah1EeK3d6i6ttnN5Q _eDZxEah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGgvcqh1EeK3d6i6ttnN5Q">
                <body>Load a leaderboard from an existing file in the format of:&#xD;
	 * &#xD;
	 * NAME SCORE&#xD;
	 * NAME SCORE&#xD;
	 * ...&#xD;
	 * &#xD;
	 * Where the entries are in ascending order (i.e. entry 1 is number 1, entry 2 is number 2, etc.)&#xD;
	 * &#xD;
	 * @param path The path to the leaderboard file.&#xD;
	 * @throws IOException If a general IO error occurs.&#xD;
	 * @throws FileNotFoundException If the leaderboard file is not found.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d8kwUah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d8l-cKh1EeK3d6i6ttnN5Q" name="save" method="_eGAZIKh1EeK3d6i6ttnN5Q" raisedException="_eDdbcah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGgvc6h1EeK3d6i6ttnN5Q">
                <body>Save the entries to the leaderboard file. Result is in ascending order:&#xD;
	 * &#xD;
	 * NAME SCORE&#xD;
	 * NAME SCORE&#xD;
	 * ...&#xD;
	 * &#xD;
	 * @throws IOException If an error occurs when writing to leaderboard file.</body>
              </ownedComment>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d8qP4Kh1EeK3d6i6ttnN5Q" name="Player">
            <ownedComment xmi:id="_eGgvdKh1EeK3d6i6ttnN5Q">
              <body>Represents a player.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eFKEkKh1EeK3d6i6ttnN5Q" name="score">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFKroKh1EeK3d6i6ttnN5Q" name="moves">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFKroah1EeK3d6i6ttnN5Q" name="spareTile" type="_d89K0Kh1EeK3d6i6ttnN5Q" association="_eGhWgKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFLSsKh1EeK3d6i6ttnN5Q" name="lastMove" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGBAMKh1EeK3d6i6ttnN5Q" name="Player" specification="_d8reAKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGBAMah1EeK3d6i6ttnN5Q" type="_d8qP4Kh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this.score = 0;&#xD;
		this.moves = 0;&#xD;
		this.lastMove = &quot;N/A&quot;;&#xD;
		&#xD;
		// Generate a random spare tile&#xD;
		Random r = new Random();&#xD;
		int randomSelection = r.nextInt(4); // CORNER, LINE, TSHAPE, CROSS&#xD;
		int rotation = r.nextInt(4); // DEFAULT, NINETY, HUNDREDANDEIGHTY, TWOHUNDREDANDSEVENTY&#xD;
		&#xD;
		TileType[] tileTypes = TileType.values();&#xD;
		RotationAngle[] rotationAngles = RotationAngle.values();&#xD;
		&#xD;
		this.spareTile = new Tile(tileTypes[randomSelection], rotationAngles[rotation]);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGBAMqh1EeK3d6i6ttnN5Q" name="updateLastMove" specification="_d8sFEKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGBAM6h1EeK3d6i6ttnN5Q" name="s">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>lastMove = s;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d8reAKh1EeK3d6i6ttnN5Q" name="Player" method="_eGBAMKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d8reAah1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d8reAqh1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedParameter xmi:id="_d8reA6h1EeK3d6i6ttnN5Q" type="_d8qP4Kh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d8sFEKh1EeK3d6i6ttnN5Q" name="updateLastMove" method="_eGBAMqh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_d8sFEah1EeK3d6i6ttnN5Q" name="s">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_d8uhUKh1EeK3d6i6ttnN5Q" name="RotationAngle">
            <ownedComment xmi:id="_eGh9kah1EeK3d6i6ttnN5Q">
              <body>Used to represent the choice of possible rotation angles for use with tile&#xD;
manipulation.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.07032013&#xD;
 *</body>
            </ownedComment>
            <ownedOperation xmi:id="_d8vvcKh1EeK3d6i6ttnN5Q" name="convertFromInt" isStatic="true" method="_eGBnQ6h1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_d8wWgKh1EeK3d6i6ttnN5Q" name="angle">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eDkwMKh1EeK3d6i6ttnN5Q" type="_d8uhUKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_eDkJIKh1EeK3d6i6ttnN5Q" name="convertToInt" isStatic="true" method="_eGBnQKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eDkJIah1EeK3d6i6ttnN5Q" name="ra" type="_d8uhUKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eDkJIqh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedLiteral xmi:id="_d8vIYKh1EeK3d6i6ttnN5Q" name="DEFAULT"/>
            <ownedLiteral xmi:id="_d8vIYah1EeK3d6i6ttnN5Q" name="NINETY"/>
            <ownedLiteral xmi:id="_d8vIYqh1EeK3d6i6ttnN5Q" name="HUNDREDANDEIGHTY"/>
            <ownedLiteral xmi:id="_d8vIY6h1EeK3d6i6ttnN5Q" name="TWOHUNDREDANDSEVENTY"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d8yLsKh1EeK3d6i6ttnN5Q" name="SettingsManager">
            <ownedComment xmi:id="_eGikoKh1EeK3d6i6ttnN5Q">
              <body>Manages settings and configurations for the Labyrinth game. Allows for the loading&#xD;
and saving of configuration files. If an invalid or non-existant file is passed, the&#xD;
default settings are used.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eFL5wKh1EeK3d6i6ttnN5Q" name="rows" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFMg0Kh1EeK3d6i6ttnN5Q" name="columns" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFNH4Kh1EeK3d6i6ttnN5Q" name="leaderboard">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGCOUqh1EeK3d6i6ttnN5Q" name="SettingsManager" specification="_d80A4Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGCOU6h1EeK3d6i6ttnN5Q" type="_d8yLsKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>// Set to default&#xD;
		setDefault();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGC1YKh1EeK3d6i6ttnN5Q" name="SettingsManager" specification="_d80n8Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGC1Yah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eGC1Yqh1EeK3d6i6ttnN5Q" type="_d8yLsKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this();&#xD;
		&#xD;
		// Set to 'erroneous' values first&#xD;
		rows = 0;&#xD;
		columns = 0;&#xD;
		leaderboard = null;&#xD;
&#xD;
		// Load settings from file&#xD;
		try {&#xD;
			load(path);&#xD;
		}&#xD;
		catch(IOException e) {&#xD;
			System.out.println(e.getMessage());&#xD;
			System.out.println(&quot;Note: Using default settings instead&quot;);&#xD;
			setDefault();&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGC1Y6h1EeK3d6i6ttnN5Q" name="setDefault" specification="_d81PAqh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>rows = 7;&#xD;
		columns = 7;&#xD;
		leaderboard = System.getProperty(&quot;user.dir&quot;) + &quot;\\leaderboards\\leaderboard.txt&quot;;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGDccKh1EeK3d6i6ttnN5Q" name="load" specification="_d812EKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGDccah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>try {&#xD;
			BufferedReader reader = new BufferedReader(new FileReader(path));&#xD;
			Scanner scanner = null;&#xD;
&#xD;
			String line = reader.readLine();&#xD;
&#xD;
			while(line != null) {&#xD;
				scanner = new Scanner(line);&#xD;
				String[] entry = null;&#xD;
				&#xD;
				try {&#xD;
					entry = scanner.nextLine().split(&quot; &quot;);&#xD;
				} catch(NoSuchElementException e) {&#xD;
					// Empty line, just skip&#xD;
					line = reader.readLine();&#xD;
					continue;&#xD;
				}&#xD;
				&#xD;
				if(entry.length &lt; 2) {&#xD;
					scanner.close();&#xD;
					reader.close();&#xD;
					throw new IOException(&quot;Invalid entry in settings file!&quot;);&#xD;
				}&#xD;
&#xD;
				if(entry[0].equals(&quot;ROWS&quot;)) {&#xD;
					// Line contains ROWS value&#xD;
					int r;&#xD;
&#xD;
					try {&#xD;
						r = Integer.parseInt(entry[1]);&#xD;
						&#xD;
						if((r % 2 == 0) || (r &lt; 5) || (r > 15)) {&#xD;
							// Violates row rules&#xD;
							scanner.close();&#xD;
							reader.close();&#xD;
							throw new IOException(&quot;Rows must be odd, and between 5 and 15 (inclusive)&quot;);&#xD;
						}&#xD;
					}&#xD;
					catch(NumberFormatException e) {&#xD;
						scanner.close();&#xD;
						reader.close();&#xD;
						throw new IOException(&quot;Settings file is invalid: '&quot; + entry[0] + &quot;' contains invalid value.&quot;);&#xD;
					}&#xD;
&#xD;
					// Set rows to that specified in settings file&#xD;
					this.rows = r;&#xD;
				}&#xD;
				else if(entry[0].equals(&quot;COLUMNS&quot;)) {&#xD;
					// Line contains ROWS value&#xD;
					int c;&#xD;
&#xD;
					try {&#xD;
						c = Integer.parseInt(entry[1]);&#xD;
						&#xD;
						if((c % 2 == 0) || (c &lt; 5) || (c > 15)) {&#xD;
							// Violates row rules&#xD;
							scanner.close();&#xD;
							reader.close();&#xD;
							throw new IOException(&quot;Columns must be odd, and between 5 and 15 (inclusive)&quot;);&#xD;
						}&#xD;
					}&#xD;
					catch(NumberFormatException e) {&#xD;
						scanner.close();&#xD;
						reader.close();&#xD;
						throw new IOException(&quot;Settings file is invalid: '&quot; + entry[0] + &quot;' contains invalid value.&quot;);&#xD;
					}&#xD;
&#xD;
					// Set columns to that specified in settings file&#xD;
					this.columns = c;&#xD;
				}&#xD;
				else if(entry[0].equals(&quot;LEADERBOARD&quot;)) {&#xD;
					// Set leaderboard to that specified in settings file&#xD;
					this.leaderboard = System.getProperty(&quot;user.dir&quot;) + entry[1];&#xD;
				}&#xD;
				else {&#xD;
					// Invalid type?&#xD;
					scanner.close();&#xD;
					reader.close();&#xD;
					throw new IOException(&quot;Settings file is invalid: '&quot; + entry[0] + &quot;' is an invalid type.&quot;);&#xD;
				}&#xD;
&#xD;
				line = reader.readLine();&#xD;
			}&#xD;
&#xD;
			scanner.close();&#xD;
			reader.close();&#xD;
		}&#xD;
		catch(FileNotFoundException e) {&#xD;
			throw new IOException(&quot;Settings file not found: path = &quot; + path);&#xD;
		}&#xD;
&#xD;
		// Check if any values remain unset, if so set to default value(s)&#xD;
		if(rows == 0) {&#xD;
			rows = 7;&#xD;
		}&#xD;
		if(columns == 0) {&#xD;
			columns = 7;&#xD;
		}&#xD;
		if(leaderboard == null) {&#xD;
			leaderboard = System.getProperty(&quot;user.dir&quot;) + &quot;\\leaderboards\\leaderboard.txt&quot;;&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGDccqh1EeK3d6i6ttnN5Q" name="save" specification="_d83EMKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGDcc6h1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>BufferedWriter writer = new BufferedWriter(new FileWriter(path));&#xD;
&#xD;
		// Save the settings&#xD;
		writer.write(&quot;ROWS &quot; + rows);&#xD;
		writer.newLine();&#xD;
		writer.write(&quot;COLUMNS &quot; + columns);&#xD;
		writer.newLine();&#xD;
		writer.write(&quot;LEADERBOARD &quot; + leaderboard);&#xD;
		writer.newLine();&#xD;
&#xD;
		writer.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGDcdKh1EeK3d6i6ttnN5Q" name="getColumns" specification="_d83rQKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGDcdah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>return columns;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGEDgKh1EeK3d6i6ttnN5Q" name="setRows" specification="_d84SUKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGEDgah1EeK3d6i6ttnN5Q" name="rows">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>this.rows = rows;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGEDgqh1EeK3d6i6ttnN5Q" name="setColumns" specification="_d845YKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGEDg6h1EeK3d6i6ttnN5Q" name="columns">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>this.columns = columns;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d80A4Kh1EeK3d6i6ttnN5Q" name="SettingsManager" method="_eGCOUqh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d80A4ah1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d80A4qh1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGikoah1EeK3d6i6ttnN5Q">
                <body>Construct a SettingsManager with default settings.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d80A46h1EeK3d6i6ttnN5Q" type="_d8yLsKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d80n8Kh1EeK3d6i6ttnN5Q" name="SettingsManager" method="_eGC1YKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d80n8qh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d81PAKh1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGikoqh1EeK3d6i6ttnN5Q">
                <body>Construct a SettingsManager with predefined settings. If the file&#xD;
	 * is invalid or does not exist, then default settings are used.&#xD;
	 * The user is notified of this via the standard output.&#xD;
	 * &#xD;
	 * @param path The path to the settings file.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d80n8ah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d81PAah1EeK3d6i6ttnN5Q" type="_d8yLsKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d81PAqh1EeK3d6i6ttnN5Q" name="setDefault" method="_eGC1Y6h1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGiko6h1EeK3d6i6ttnN5Q">
                <body>Set all the values in the settings to their default values.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d812EKh1EeK3d6i6ttnN5Q" name="load" method="_eGDccKh1EeK3d6i6ttnN5Q" raisedException="_eDdbcah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGikpKh1EeK3d6i6ttnN5Q">
                <body>Explicitly load settings in from a specified file path. Must be in the format:&#xD;
	 * &#xD;
	 * ROWS &lt;no_rows>&#xD;
	 * COLUMNS &lt;no_columns>&#xD;
	 * LEADERBOARD &lt;leaderboard_path>&#xD;
	 * &#xD;
	 * @param path The path to the settings file.&#xD;
	 * @throws IOException Thrown when the file is not found or invalid.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d812Eah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d83EMKh1EeK3d6i6ttnN5Q" name="save" method="_eGDccqh1EeK3d6i6ttnN5Q" raisedException="_eDdbcah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGikpah1EeK3d6i6ttnN5Q">
                <body>Save the current defined settings to a specified settings file. Will be in&#xD;
	 * the format of:&#xD;
	 * &#xD;
	 * ROWS &lt;no_rows>&#xD;
	 * COLUMNS &lt;no_columns>&#xD;
	 * LEADERBOARD &lt;leaderboard_path>&#xD;
	 * &#xD;
	 * @param path The path to the settings file.&#xD;
	 * @throws IOException Thrown when can't write to file.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d83EMah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d83rQKh1EeK3d6i6ttnN5Q" name="getColumns" method="_eGDcdKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGjLsKh1EeK3d6i6ttnN5Q">
                <body>Get the number of columns.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d83rQah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d84SUKh1EeK3d6i6ttnN5Q" name="setRows" method="_eGEDgKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGjLsah1EeK3d6i6ttnN5Q">
                <body>Set the number of rows.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d84SUah1EeK3d6i6ttnN5Q" name="rows">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d845YKh1EeK3d6i6ttnN5Q" name="setColumns" method="_eGEDgqh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGjLsqh1EeK3d6i6ttnN5Q">
                <body>Set the number of columns.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d845Yah1EeK3d6i6ttnN5Q" name="columns">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d89K0Kh1EeK3d6i6ttnN5Q" name="Tile">
            <ownedComment xmi:id="_eGjLs6h1EeK3d6i6ttnN5Q">
              <body>Represents a tile for use within a board.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.24032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eFOWAKh1EeK3d6i6ttnN5Q" name="type" type="_d-L54Kh1EeK3d6i6ttnN5Q" isReadOnly="true"/>
            <ownedAttribute xmi:id="_eFOWAah1EeK3d6i6ttnN5Q" name="rotation" type="_d8uhUKh1EeK3d6i6ttnN5Q" isReadOnly="true"/>
            <ownedAttribute xmi:id="_eFO9EKh1EeK3d6i6ttnN5Q" name="treasure" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFPkIKh1EeK3d6i6ttnN5Q" name="token" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFQLMKh1EeK3d6i6ttnN5Q" name="movable" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFQLMah1EeK3d6i6ttnN5Q" name="tileString" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eFQLMqh1EeK3d6i6ttnN5Q" value="*"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFQyQah1EeK3d6i6ttnN5Q" name="north" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFRZUah1EeK3d6i6ttnN5Q" name="east" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFSncah1EeK3d6i6ttnN5Q" name="south" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFTOgah1EeK3d6i6ttnN5Q" name="west" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGF4sKh1EeK3d6i6ttnN5Q" name="Tile" specification="_eDnMcKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGF4sah1EeK3d6i6ttnN5Q" name="type" type="_d-L54Kh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eGF4sqh1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this.type = type;&#xD;
		this.rotation = RotationAngle.DEFAULT;&#xD;
		this.treasure = false;&#xD;
		this.token = false;&#xD;
		this.movable = true;&#xD;
		this.tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGF4s6h1EeK3d6i6ttnN5Q" name="Tile" specification="_eDnzgKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGF4tKh1EeK3d6i6ttnN5Q" name="type" type="_d-L54Kh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eGF4tah1EeK3d6i6ttnN5Q" name="rotation" type="_d8uhUKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eGF4tqh1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this(type);&#xD;
		this.rotation = rotation;&#xD;
		this.tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGGfwKh1EeK3d6i6ttnN5Q" name="Tile" specification="_eDoakKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGGfwah1EeK3d6i6ttnN5Q" name="type" type="_d-L54Kh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eGGfwqh1EeK3d6i6ttnN5Q" name="rotation" type="_d8uhUKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eGGfw6h1EeK3d6i6ttnN5Q" name="movable">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eGGfxKh1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this(type, rotation);&#xD;
		this.movable = movable;&#xD;
		this.tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGGfxah1EeK3d6i6ttnN5Q" name="setType" specification="_eDpBoqh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGGfxqh1EeK3d6i6ttnN5Q" name="newType" type="_d-L54Kh1EeK3d6i6ttnN5Q"/>
              <language>java</language>
              <body>type = newType;&#xD;
		&#xD;
		// Type has been altered, reform tile string&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGHG0Kh1EeK3d6i6ttnN5Q" name="hasTreasure" specification="_d9D4gKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGHG0ah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>return treasure;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGHG0qh1EeK3d6i6ttnN5Q" name="setTreasure" specification="_d9EfkKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGHG06h1EeK3d6i6ttnN5Q" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>treasure = state;&#xD;
		&#xD;
		// Treasure has been altered, re-form the tile string&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGHt4Kh1EeK3d6i6ttnN5Q" name="setRotation" specification="_eDposKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGHt4ah1EeK3d6i6ttnN5Q" name="newRotation" type="_d8uhUKh1EeK3d6i6ttnN5Q"/>
              <language>java</language>
              <body>if(!isMovable())&#xD;
			return;&#xD;
		&#xD;
		rotation = newRotation;&#xD;
		&#xD;
		// Rotation has been altered, reform the tile string&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGHt4qh1EeK3d6i6ttnN5Q" name="hasToken" specification="_d9FtsKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGHt46h1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>return token;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGIU8Kh1EeK3d6i6ttnN5Q" name="setToken" specification="_d9GUwKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGIU8ah1EeK3d6i6ttnN5Q" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>token = state;&#xD;
		&#xD;
		// Token has been altered, reform the tile string&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGIU8qh1EeK3d6i6ttnN5Q" name="setMovable" specification="_d9G70Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGIU86h1EeK3d6i6ttnN5Q" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>movable = state;&#xD;
		&#xD;
		// Reform tile string to reflect new state&#xD;
		tileString = formTileString();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGI8AKh1EeK3d6i6ttnN5Q" name="convertFromPattern" specification="_d9IJ8Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGI8Aah1EeK3d6i6ttnN5Q" name="pattern">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eGI8Aqh1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eGI8A6h1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eGI8BKh1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>for(int i = 0; i &lt; pattern.length; i++) {&#xD;
			pattern[i] = pattern[i].replace('1', CharacterElements.charBlock);&#xD;
			pattern[i] = pattern[i].replace('0', ' ');&#xD;
		}&#xD;
		&#xD;
		return pattern;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGI8Bah1EeK3d6i6ttnN5Q" name="formTileString" specification="_d9JYEKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGI8Bqh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eGI8B6h1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>String[] tile = new String[5];&#xD;
		&#xD;
		switch(type) {&#xD;
		case CROSS:&#xD;
			tile[0] = &quot;1100011&quot;;&#xD;
			tile[1] = &quot;1100011&quot;;&#xD;
			tile[2] = &quot;0000000&quot;;&#xD;
			tile[3] = &quot;1100011&quot;;&#xD;
			tile[4] = &quot;1100011&quot;;&#xD;
			&#xD;
			// Set entry points&#xD;
			north = true;&#xD;
			east = true;&#xD;
			south = true;&#xD;
			west = true;&#xD;
			&#xD;
			break;&#xD;
		case TSHAPE:&#xD;
			if(rotation == RotationAngle.DEFAULT) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;1100000&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = true;&#xD;
				south = true;&#xD;
				west = false;&#xD;
			} else if(rotation == RotationAngle.NINETY) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;0000000&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = true;&#xD;
				south = true;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.HUNDREDANDEIGHTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;0000011&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = false;&#xD;
				south = true;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.TWOHUNDREDANDSEVENTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;0000000&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = true;&#xD;
				south = false;&#xD;
				west = true;&#xD;
			}&#xD;
			&#xD;
			break;&#xD;
		case LINE:&#xD;
			if(rotation == RotationAngle.DEFAULT) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;1100011&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = false;&#xD;
				south = true;&#xD;
				west = false;&#xD;
			} else if(rotation == RotationAngle.NINETY) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;0000000&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = true;&#xD;
				south = false;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.HUNDREDANDEIGHTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;1100011&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = false;&#xD;
				south = true;&#xD;
				west = false;&#xD;
			} else if(rotation == RotationAngle.TWOHUNDREDANDSEVENTY) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;0000000&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = true;&#xD;
				south = false;&#xD;
				west = true;&#xD;
			}&#xD;
			&#xD;
			break;&#xD;
		case CORNER:&#xD;
			if(rotation == RotationAngle.DEFAULT) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;1100000&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = true;&#xD;
				south = true;&#xD;
				west = false;&#xD;
			} else if(rotation == RotationAngle.NINETY) {&#xD;
				tile[0] = &quot;1111111&quot;;&#xD;
				tile[1] = &quot;1111111&quot;;&#xD;
				tile[2] = &quot;0000011&quot;;&#xD;
				tile[3] = &quot;1100011&quot;;&#xD;
				tile[4] = &quot;1100011&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = false;&#xD;
				east = false;&#xD;
				south = true;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.HUNDREDANDEIGHTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;0000011&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = false;&#xD;
				south = false;&#xD;
				west = true;&#xD;
			} else if(rotation == RotationAngle.TWOHUNDREDANDSEVENTY) {&#xD;
				tile[0] = &quot;1100011&quot;;&#xD;
				tile[1] = &quot;1100011&quot;;&#xD;
				tile[2] = &quot;1100000&quot;;&#xD;
				tile[3] = &quot;1111111&quot;;&#xD;
				tile[4] = &quot;1111111&quot;;&#xD;
				&#xD;
				// Set entry points&#xD;
				north = true;&#xD;
				east = true;&#xD;
				south = false;&#xD;
				west = false;&#xD;
			}&#xD;
			&#xD;
			break;&#xD;
		case EMPTY:&#xD;
			tile[0] = &quot;0000000&quot;;&#xD;
			tile[1] = &quot;0000000&quot;;&#xD;
			tile[2] = &quot;0000000&quot;;&#xD;
			tile[3] = &quot;0000000&quot;;&#xD;
			tile[4] = &quot;0000000&quot;;&#xD;
			&#xD;
			// Set entry points&#xD;
			north = true;&#xD;
			east = true;&#xD;
			south = true;&#xD;
			west = true;&#xD;
			&#xD;
			break;&#xD;
		}&#xD;
		&#xD;
		// Convert pattern to appropriate characters&#xD;
		tile = convertFromPattern(tile);&#xD;
		&#xD;
		// Check if tile contains treasure or token&#xD;
		if(hasToken()) {&#xD;
			// Change middle section, middle element to token&#xD;
			char[] tileMiddle = tile[2].toCharArray();&#xD;
			tileMiddle[3] = CharacterElements.charToken; // Set to token&#xD;
			tile[2] = new String(tileMiddle);&#xD;
		}&#xD;
		else if(hasTreasure()) {&#xD;
			// Change middle section, middle element to treasure&#xD;
			char[] tileMiddle = tile[2].toCharArray();&#xD;
			tileMiddle[3] = CharacterElements.charTreasure; // Set to token&#xD;
			tile[2] = new String(tileMiddle);&#xD;
		}&#xD;
		&#xD;
		// Check if tile is immovable&#xD;
		if(!isMovable()) {&#xD;
			// Change tile string to fixed representation&#xD;
			for(int i = 0; i &lt; 5; i++)&#xD;
				tile[i] = tile[i].replace(' ', CharacterElements.charImmovable);&#xD;
		}&#xD;
		&#xD;
		return tile;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGJjEKh1EeK3d6i6ttnN5Q" name="getNorth" specification="_d9J_IKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGJjEah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>return north;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGJjEqh1EeK3d6i6ttnN5Q" name="getSouth" specification="_d9KmMKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGJjE6h1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>return south;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d9D4gKh1EeK3d6i6ttnN5Q" name="hasTreasure" method="_eGHG0Kh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGjywqh1EeK3d6i6ttnN5Q">
                <body>Check whether or not the tile contains treasure.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9D4gah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d9EfkKh1EeK3d6i6ttnN5Q" name="setTreasure" method="_eGHG0qh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGjyw6h1EeK3d6i6ttnN5Q">
                <body>Set whether or not the tile contains treasure.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9Efkah1EeK3d6i6ttnN5Q" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d9FtsKh1EeK3d6i6ttnN5Q" name="hasToken" method="_eGHt4qh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGjyxah1EeK3d6i6ttnN5Q">
                <body>Check whether or not the tile contains the token.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9Ftsah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d9GUwKh1EeK3d6i6ttnN5Q" name="setToken" method="_eGIU8Kh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGkZ0Kh1EeK3d6i6ttnN5Q">
                <body>Set whether or not the tile contains the token.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9GUwah1EeK3d6i6ttnN5Q" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d9G70Kh1EeK3d6i6ttnN5Q" name="setMovable" method="_eGIU8qh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGkZ0ah1EeK3d6i6ttnN5Q">
                <body>Set whether or not the tile is movable.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9G70ah1EeK3d6i6ttnN5Q" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d9IJ8Kh1EeK3d6i6ttnN5Q" name="convertFromPattern" visibility="private" method="_eGI8AKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGkZ0qh1EeK3d6i6ttnN5Q">
                <body>Convert a tile pattern to its final string representation.&#xD;
	 * &#xD;
	 * @param pattern The tile pattern. For example, a cross:&#xD;
	 * &#xD;
	 * pattern[0] = &quot;1100011&quot;&#xD;
	 * pattern[1] = &quot;1100011&quot;&#xD;
	 * pattern[2] = &quot;0000000&quot;&#xD;
	 * pattern[3] = &quot;1100011&quot;&#xD;
	 * pattern[4] = &quot;1100011&quot;&#xD;
	 * &#xD;
	 * @return The converted string equivalent.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9IJ8ah1EeK3d6i6ttnN5Q" name="pattern">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_d9IxAKh1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d9IJ8qh1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_d9IJ86h1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d9JYEKh1EeK3d6i6ttnN5Q" name="formTileString" visibility="private" method="_eGI8Bah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGkZ06h1EeK3d6i6ttnN5Q">
                <body>Form the tile string array in accordance to the tile type.&#xD;
	 * &#xD;
	 * @return The string array formation of the tile split up into top, top-middle,&#xD;
	 * middle, middle-bottom and bottom respectively.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9JYEah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_d9JYEqh1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d9J_IKh1EeK3d6i6ttnN5Q" name="getNorth" method="_eGJjEKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGkZ1Kh1EeK3d6i6ttnN5Q">
                <body>Check whether or not the north access point is available.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9J_Iah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d9KmMKh1EeK3d6i6ttnN5Q" name="getSouth" method="_eGJjEqh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGkZ1ah1EeK3d6i6ttnN5Q">
                <body>Check whether or not the south access point is available.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d9KmMah1EeK3d6i6ttnN5Q" direction="return">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_eDnMcKh1EeK3d6i6ttnN5Q" name="Tile" method="_eGF4sKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_eDnMcqh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_eDnMc6h1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGjLtKh1EeK3d6i6ttnN5Q">
                <body>Construct a tile of a particular type.&#xD;
	 * &#xD;
	 * @param type The type of tile to construct.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eDnMcah1EeK3d6i6ttnN5Q" name="type" type="_d-L54Kh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eDnMdKh1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_eDnzgKh1EeK3d6i6ttnN5Q" name="Tile" method="_eGF4s6h1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_eDnzg6h1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_eDnzhKh1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGjywKh1EeK3d6i6ttnN5Q">
                <body>Construct a tile of a particular type and rotation.&#xD;
	 * &#xD;
	 * @param type The type of tile to construct.&#xD;
	 * @param rotation The rotation of the tile to construct.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eDnzgah1EeK3d6i6ttnN5Q" name="type" type="_d-L54Kh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eDnzgqh1EeK3d6i6ttnN5Q" name="rotation" type="_d8uhUKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eDnzhah1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_eDoakKh1EeK3d6i6ttnN5Q" name="Tile" method="_eGGfwKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_eDoalKh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_eDpBoKh1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedParameter xmi:id="_eDoakah1EeK3d6i6ttnN5Q" name="type" type="_d-L54Kh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eDoakqh1EeK3d6i6ttnN5Q" name="rotation" type="_d8uhUKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eDoak6h1EeK3d6i6ttnN5Q" name="movable">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eDpBoah1EeK3d6i6ttnN5Q" type="_d89K0Kh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_eDpBoqh1EeK3d6i6ttnN5Q" name="setType" method="_eGGfxah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGjywah1EeK3d6i6ttnN5Q">
                <body>Set the tile type.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eDpBo6h1EeK3d6i6ttnN5Q" name="newType" type="_d-L54Kh1EeK3d6i6ttnN5Q"/>
            </ownedOperation>
            <ownedOperation xmi:id="_eDposKh1EeK3d6i6ttnN5Q" name="setRotation" method="_eGHt4Kh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGjyxKh1EeK3d6i6ttnN5Q">
                <body>Set the rotation of the tile.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eDposah1EeK3d6i6ttnN5Q" name="newRotation" type="_d8uhUKh1EeK3d6i6ttnN5Q"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Enumeration" xmi:id="_d-L54Kh1EeK3d6i6ttnN5Q" name="TileType">
            <ownedLiteral xmi:id="_d-Mg8ah1EeK3d6i6ttnN5Q" name="CORNER"/>
            <ownedLiteral xmi:id="_d-NIAKh1EeK3d6i6ttnN5Q" name="LINE"/>
            <ownedLiteral xmi:id="_d-NIAah1EeK3d6i6ttnN5Q" name="TSHAPE"/>
            <ownedLiteral xmi:id="_d-NIAqh1EeK3d6i6ttnN5Q" name="CROSS"/>
            <ownedLiteral xmi:id="_d-NIA6h1EeK3d6i6ttnN5Q" name="EMPTY"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eGhWgKh1EeK3d6i6ttnN5Q" name="" memberEnd="_eFKroah1EeK3d6i6ttnN5Q _eGh9kKh1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eGh9kKh1EeK3d6i6ttnN5Q" name="" type="_d8qP4Kh1EeK3d6i6ttnN5Q" association="_eGhWgKh1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eG9bYah1EeK3d6i6ttnN5Q" name="" memberEnd="_eG9bYqh1EeK3d6i6ttnN5Q _eE4-0Kh1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eG9bYqh1EeK3d6i6ttnN5Q" name="" type="_d7qKUKh1EeK3d6i6ttnN5Q" association="_eG9bYah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eG_Qkah1EeK3d6i6ttnN5Q" name="" memberEnd="_eG_Qkqh1EeK3d6i6ttnN5Q _eE7bE6h1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eG_Qkqh1EeK3d6i6ttnN5Q" name="" type="_d7qKUKh1EeK3d6i6ttnN5Q" association="_eG_Qkah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHAesah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHAesqh1EeK3d6i6ttnN5Q _eE9QQKh1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHAesqh1EeK3d6i6ttnN5Q" name="" type="_d8FoIKh1EeK3d6i6ttnN5Q" association="_eHAesah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHCT4Kh1EeK3d6i6ttnN5Q" name="" memberEnd="_eHCT4ah1EeK3d6i6ttnN5Q _eE_Fcah1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHCT4ah1EeK3d6i6ttnN5Q" name="" type="_d8FoIKh1EeK3d6i6ttnN5Q" association="_eHCT4Kh1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHDiAah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHDiAqh1EeK3d6i6ttnN5Q _eFA6oah1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHDiAqh1EeK3d6i6ttnN5Q" name="" type="_d8FoIKh1EeK3d6i6ttnN5Q" association="_eHDiAah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHFXMKh1EeK3d6i6ttnN5Q" name="" memberEnd="_eHFXMah1EeK3d6i6ttnN5Q _eFFzIah1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHFXMah1EeK3d6i6ttnN5Q" name="" type="_d8htAKh1EeK3d6i6ttnN5Q" association="_eHFXMKh1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHGlUah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHGlUqh1EeK3d6i6ttnN5Q _eFHoUKh1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHGlUqh1EeK3d6i6ttnN5Q" name="" type="_d8htAKh1EeK3d6i6ttnN5Q" association="_eHGlUah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
        </packagedElement>
        <packagedElement xmi:type="uml:Package" xmi:id="_d2sx0Kh1EeK3d6i6ttnN5Q" name="ui">
          <packagedElement xmi:type="uml:Class" xmi:id="_d_BnYKh1EeK3d6i6ttnN5Q" name="CharacterElements">
            <ownedComment xmi:id="_eGoEMah1EeK3d6i6ttnN5Q">
              <body>Represents all the available character elements for use within&#xD;
the text-based user interface. The characters are initialised in&#xD;
relation to the in use character set so as to ensure compatibility.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.17032013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eFcYcKh1EeK3d6i6ttnN5Q" name="charSet" isLeaf="true" isStatic="true" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              <defaultValue xmi:type="uml:LiteralString" xmi:id="_eFcYcah1EeK3d6i6ttnN5Q" value="Charset.defaultCharset().toString().toLowerCase()"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFcYcqh1EeK3d6i6ttnN5Q" name="charBlock" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFc_gah1EeK3d6i6ttnN5Q" name="charImmovable" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFdmkah1EeK3d6i6ttnN5Q" name="charToken" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFeNoah1EeK3d6i6ttnN5Q" name="charTreasure" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFe0sah1EeK3d6i6ttnN5Q" name="charBorderVertical" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFfbwah1EeK3d6i6ttnN5Q" name="charBorderHorizontal" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFgC0ah1EeK3d6i6ttnN5Q" name="charBorderCornerTopLeft" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFgp4Kh1EeK3d6i6ttnN5Q" name="charBorderCornerTopRight" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFhQ8Kh1EeK3d6i6ttnN5Q" name="charBorderCornerBottomLeft" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFhQ8qh1EeK3d6i6ttnN5Q" name="charBorderCornerBottomRight" isStatic="true" type="_eEtYoKh1EeK3d6i6ttnN5Q"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGRe4Kh1EeK3d6i6ttnN5Q" name="initCharacters" specification="_d_F40Kh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>// Initialise the tile characters in accordance to the charset&#xD;
		if(charSet.contains(&quot;utf&quot;)) {&#xD;
			// UTF charset available&#xD;
			charBlock = '\u2588'; // Solid block&#xD;
			charImmovable = '\u2592'; // Light black block&#xD;
			charToken = 'O';&#xD;
			charTreasure = 'T';&#xD;
			charBorderVertical = '\u2551';&#xD;
			charBorderHorizontal = '\u2550';&#xD;
			charBorderCornerTopLeft = '\u2554';&#xD;
			charBorderCornerTopRight = '\u2557';&#xD;
			charBorderCornerBottomLeft = '\u255A';&#xD;
			charBorderCornerBottomRight = '\u255D';&#xD;
		} else {&#xD;
			// Most likely ASCII on Windows CMD&#xD;
			charBlock = (char) 219; // Solid block&#xD;
			charImmovable = (char) 177; // Light black block&#xD;
			charToken = 'O';&#xD;
			charTreasure = 'T';&#xD;
			charBorderVertical = (char) 186;&#xD;
			charBorderHorizontal = (char) 205;&#xD;
			charBorderCornerTopLeft = (char) 201;&#xD;
			charBorderCornerTopRight = (char) 187;&#xD;
			charBorderCornerBottomLeft = (char) 200;&#xD;
			charBorderCornerBottomRight = (char) 188;&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d_F40Kh1EeK3d6i6ttnN5Q" name="initCharacters" isStatic="true" method="_eGRe4Kh1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d_JjMKh1EeK3d6i6ttnN5Q" name="UserInterface">
            <ownedComment xmi:id="_eGoEMqh1EeK3d6i6ttnN5Q">
              <body>Represents a text based user interface for use as a front-end for the Labyrinth game.&#xD;
This user interface works with a valid conforming GameMode object (e.g. TreasureChase).&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.01042013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eFifEKh1EeK3d6i6ttnN5Q" name="game" visibility="private" type="_d-PkQKh1EeK3d6i6ttnN5Q" association="_eHSLgKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFjGIah1EeK3d6i6ttnN5Q" name="running" isReadOnly="true">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFjtMKh1EeK3d6i6ttnN5Q" name="input" visibility="private" type="_eDf3sah1EeK3d6i6ttnN5Q" association="_eHTZoah1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFjtMqh1EeK3d6i6ttnN5Q" name="manager" visibility="private" type="_d8Wt4qh1EeK3d6i6ttnN5Q" association="_eHVO0ah1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFkUQah1EeK3d6i6ttnN5Q" name="menuWindow" visibility="package" type="_d_dsQKh1EeK3d6i6ttnN5Q" association="_eHXEAah1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFk7Uah1EeK3d6i6ttnN5Q" name="loadWindow" visibility="package" type="_d_dsQKh1EeK3d6i6ttnN5Q" association="_eHY5MKh1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFliYah1EeK3d6i6ttnN5Q" name="optionsWindow" visibility="package" type="_d_dsQKh1EeK3d6i6ttnN5Q" association="_eHaHUah1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFmJcah1EeK3d6i6ttnN5Q" name="helpWindow" visibility="package" type="_d_dsQKh1EeK3d6i6ttnN5Q" association="_eHb8gah1EeK3d6i6ttnN5Q"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGSF8Kh1EeK3d6i6ttnN5Q" name="UserInterface" specification="_eEU-IKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGSF8ah1EeK3d6i6ttnN5Q" name="game" type="_d-PkQKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eGSF8qh1EeK3d6i6ttnN5Q" type="_d_JjMKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this.game = game;&#xD;
		this.input = new Scanner(System.in);&#xD;
		this.running = true;&#xD;
		this.manager = new GameManager();&#xD;
		&#xD;
		// Set up windows&#xD;
		makeMenuWindow();&#xD;
		makeLoadWindow();&#xD;
		makeOptionsWindow();&#xD;
		makeHelpWindow();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGStAKh1EeK3d6i6ttnN5Q" name="makeMenuWindow" specification="_d_L_cKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>menuWindow = new Window();&#xD;
		menuWindow.setLayoutPath(&quot;media/window_menu&quot;);&#xD;
		&#xD;
		menuWindow.addContent(&quot;1. Play game&quot;);&#xD;
		menuWindow.addContent(&quot;2. Load game&quot;);&#xD;
		menuWindow.addContent(&quot;3. Options&quot;);&#xD;
		menuWindow.addContent(&quot;4. Help&quot;);&#xD;
		menuWindow.addContent(&quot;5. Quit&quot;);&#xD;
		&#xD;
		try {&#xD;
			menuWindow.refresh();&#xD;
		} catch (Exception e) {&#xD;
			System.out.println(&quot;Error: makeMenuWindow(): Couldn't process layout file.&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGStAah1EeK3d6i6ttnN5Q" name="makeLoadWindow" specification="_d_MmgKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>LinkedList&lt;String> loadFile = null;&#xD;
		loadWindow = new Window(&quot;LOAD GAME&quot;);&#xD;
		&#xD;
		loadWindow.addContent(&quot;Available saved games to choose from:&quot;);&#xD;
		loadWindow.addContent(&quot;&quot;);&#xD;
		&#xD;
		try {&#xD;
			loadFile = processFile(Labyrinth.LOAD_PATH);&#xD;
		} catch(Exception e) {&#xD;
			loadWindow.addContent(&quot;    No saved games available&quot;);&#xD;
		}&#xD;
		&#xD;
		// Add the available saved games to the window&#xD;
		if(loadFile.isEmpty()) {&#xD;
			loadWindow.addContent(&quot;    No saved games available&quot;);&#xD;
		} else {&#xD;
			for(String line : loadFile) {&#xD;
				loadWindow.addContent(&quot;    * &quot; + line);&#xD;
			}&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGStAqh1EeK3d6i6ttnN5Q" name="makeOptionsWindow" specification="_d_Mmgah1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>LinkedList&lt;String> optionsFile = null;&#xD;
		optionsWindow = new Window(&quot;OPTIONS&quot;);&#xD;
		&#xD;
		optionsWindow.addContent(&quot;To alter an option, type &lt;option_name> &lt;new_value>. Current options:&quot;);&#xD;
		optionsWindow.addContent(&quot;&quot;);&#xD;
		&#xD;
		try {&#xD;
			optionsFile = processFile(Labyrinth.SETTINGS_PATH);&#xD;
		} catch(Exception e) {&#xD;
			optionsWindow.addContent(&quot;    No options available&quot;);&#xD;
		}&#xD;
		&#xD;
		// Add the available saved games to the window&#xD;
		if(optionsFile.isEmpty()) {&#xD;
			optionsWindow.addContent(&quot;    No options available&quot;);&#xD;
		} else {&#xD;
			for(String line : optionsFile) {&#xD;
				optionsWindow.addContent(&quot;    * &quot; + line);&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		optionsWindow.addContent(&quot;&quot;);&#xD;
		optionsWindow.addContent(&quot;Labyrinth v0.1.18042013    Charset: &quot; + CharacterElements.charSet);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGTUEKh1EeK3d6i6ttnN5Q" name="makeHelpWindow" specification="_d_NNkKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>LinkedList&lt;String> helpFile = null;&#xD;
		helpWindow = new Window(&quot;HELP&quot;);&#xD;
		&#xD;
		try {&#xD;
			helpFile = processFile(Labyrinth.HELP_PATH);&#xD;
		} catch(Exception e) {&#xD;
			helpWindow.addContent(&quot;Help file not available, sorry!&quot;);&#xD;
		}&#xD;
		&#xD;
		// Add the help file to the window&#xD;
		for(String line : helpFile) {&#xD;
			helpWindow.addContent(line);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGTUEah1EeK3d6i6ttnN5Q" name="run" specification="_d_NNkah1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>while(running) {&#xD;
			// Main game loop&#xD;
			update();&#xD;
			&#xD;
			if(game.hasWon()) {&#xD;
				// Check if win condition has been satisfied before continuing&#xD;
				onTreasureChaseWin();&#xD;
				return;&#xD;
			} else {&#xD;
				// Process player tile move&#xD;
				while(true) {&#xD;
					try {&#xD;
						promptTileMove();&#xD;
						break;&#xD;
					} catch(IllegalArgumentException e ) {&#xD;
						System.out.println(e.getMessage());&#xD;
						enterPrompt();&#xD;
						continue;&#xD;
					}&#xD;
				}&#xD;
				&#xD;
				// Update interface to reflect move&#xD;
				update();&#xD;
				&#xD;
				// Process player token move&#xD;
				while(true) {&#xD;
					try {&#xD;
						promptTokenMove();&#xD;
						break;&#xD;
					} catch(IllegalArgumentException e) {&#xD;
						// Invalid command passed, reset loop&#xD;
						System.out.println(e.getMessage());&#xD;
						enterPrompt();&#xD;
						continue;&#xD;
					}&#xD;
				}&#xD;
				&#xD;
				// Advance to next round by checking win, processing computer move, etc.&#xD;
				game.nextRound();&#xD;
			}&#xD;
		}&#xD;
		&#xD;
		// Game loop closed, call clean up code&#xD;
		input.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGTUEqh1EeK3d6i6ttnN5Q" name="promptTileMove" specification="_d_NNkqh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>System.out.println(&quot;Tile Move Commands:&quot;);&#xD;
		System.out.println(&quot;\trotate &lt;degrees>&quot;);&#xD;
		System.out.println(&quot;\tinsert row &lt;left/right> &lt;no>&quot;);&#xD;
		System.out.println(&quot;\tinsert column &lt;top/bottom> &lt;no>&quot;);&#xD;
		System.out.print(&quot;\nTile Move > &quot;);&#xD;
		&#xD;
		String in = input.nextLine();&#xD;
		String[] tokens = in.split(&quot; &quot;);&#xD;
		&#xD;
		// A tile move is either rotate, insert, save or exit&#xD;
		if(tokens[0].equals(&quot;rotate&quot;)) {&#xD;
			// When the player does a rotation, it does not count as a move, so ask for another tile move&#xD;
			parse(tokens);&#xD;
			update();&#xD;
			promptTileMove();&#xD;
		} else if(tokens[0].equals(&quot;insert&quot;) || tokens[0].equals(&quot;save&quot;) || tokens[0].equals(&quot;exit&quot;)) {&#xD;
			parse(tokens);&#xD;
		} else {&#xD;
			throw new IllegalArgumentException(&quot;Invalid tile move command: only rotate and insert allowed&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGT7IKh1EeK3d6i6ttnN5Q" name="promptTokenMove" specification="_d_N0oKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>System.out.println(&quot;Token Move Commands:&quot;);&#xD;
		System.out.println(&quot;\tmove &lt;up/down/left/right>&quot;);&#xD;
		System.out.print(&quot;\nToken Move > &quot;);&#xD;
		&#xD;
		String in = input.nextLine();&#xD;
		String[] tokens = in.split(&quot; &quot;);&#xD;
		&#xD;
		// A token move is move, save or exit&#xD;
		if(tokens[0].equals(&quot;move&quot;) || tokens[0].equals(&quot;save&quot;) || tokens[0].equals(&quot;exit&quot;)) {&#xD;
			parse(tokens);&#xD;
		} else {&#xD;
			throw new IllegalArgumentException(&quot;Invalid token move command: only move allowed&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGT7Iah1EeK3d6i6ttnN5Q" name="parse" specification="_d_ObsKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGT7Iqh1EeK3d6i6ttnN5Q" name="inputArgs">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_eGT7I6h1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
              <language>java</language>
              <body>if(inputArgs[0].toLowerCase().equals(&quot;insert&quot;)) {&#xD;
			// Insertion command called&#xD;
			if(inputArgs.length &lt; 4) {&#xD;
				throw new IllegalArgumentException(&quot;Usage:\tinsert column &lt;top/bottom> &lt;no>\n\tinsert row &lt;left/right> &lt;no>&quot;);&#xD;
			}&#xD;
			&#xD;
			// Check if insertion into row or column&#xD;
			if(inputArgs[1].equals(&quot;column&quot;)) {&#xD;
				int column_no = 0;&#xD;
				&#xD;
				try {&#xD;
					column_no = Integer.parseInt(inputArgs[3]);&#xD;
				} catch(NumberFormatException e) {&#xD;
					throw new IllegalArgumentException(&quot;Invalid column number entered&quot;);&#xD;
				}&#xD;
				&#xD;
				// Check whether to push in from top or bottom&#xD;
				try {&#xD;
					if(inputArgs[2].equals(&quot;top&quot;)) {&#xD;
						game.updatePlayer(game.insertColumn(column_no, Direction.TOP, game.getPlayer()));&#xD;
					} else if(inputArgs[2].equals(&quot;bottom&quot;)) {&#xD;
						game.updatePlayer(game.insertColumn(column_no, Direction.BOTTOM, game.getPlayer()));&#xD;
					}&#xD;
				} catch(IllegalMoveException e) {&#xD;
					throw new IllegalArgumentException(e.getMessage());&#xD;
				}&#xD;
			} else if(inputArgs[1].equals(&quot;row&quot;)) {&#xD;
				int row_no = 0;&#xD;
				&#xD;
				try {&#xD;
					row_no = Integer.parseInt(inputArgs[3]);&#xD;
				} catch(NumberFormatException e) {&#xD;
					throw new IllegalArgumentException(&quot;Invalid row number entered&quot;);&#xD;
				}&#xD;
				&#xD;
				// Check whether to push in from left or right&#xD;
				try {&#xD;
					if(inputArgs[2].equals(&quot;left&quot;)) {&#xD;
						game.updatePlayer(game.insertRow(row_no, Direction.LEFT, game.getPlayer()));&#xD;
					} else if(inputArgs[2].equals(&quot;right&quot;)) {&#xD;
						game.updatePlayer(game.insertRow(row_no, Direction.RIGHT, game.getPlayer()));&#xD;
					}&#xD;
				} catch(IllegalMoveException e) {&#xD;
					throw new IllegalArgumentException(e.getMessage());&#xD;
				}&#xD;
			} else {&#xD;
				// Invalid argument passed&#xD;
				throw new IllegalArgumentException(&quot;Usage:\tinsert column &lt;top/bottom> &lt;no>\n\tinsert row &lt;left/right> &lt;no>&quot;);&#xD;
			}&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;rotate&quot;)) {&#xD;
			// Rotation command called&#xD;
			if(inputArgs.length == 2) {&#xD;
				// Rotate spare tile&#xD;
				try {&#xD;
					game.rotateTile(Integer.parseInt(inputArgs[1]));&#xD;
				} catch(NumberFormatException e) {&#xD;
					System.out.println(e.getMessage());&#xD;
					enterPrompt();&#xD;
				}&#xD;
			} else {&#xD;
				throw new IllegalArgumentException(&quot;Usage: rotate &lt;degrees>, where degrees is 90, 180 or 270&quot;);&#xD;
			}&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;move&quot;)) {&#xD;
			// Move command called&#xD;
			if(inputArgs.length &lt; 2) {&#xD;
				System.out.println(&quot;Usage: move &lt;up/down/left/right>&quot;);&#xD;
				enterPrompt();&#xD;
			} else {&#xD;
				try {&#xD;
					if(inputArgs[1].equals(&quot;up&quot;)) {&#xD;
						// Move up&#xD;
						game.moveTokenUp();&#xD;
					} else if(inputArgs[1].equals(&quot;down&quot;)) {&#xD;
						// Move down&#xD;
						game.moveTokenDown();&#xD;
					} else if(inputArgs[1].equals(&quot;left&quot;)) {&#xD;
						// Move left&#xD;
						game.moveTokenLeft();&#xD;
					} else if(inputArgs[1].equals(&quot;right&quot;)) {&#xD;
						// Move token right&#xD;
						game.moveTokenRight();&#xD;
					} else {&#xD;
						throw new IllegalArgumentException(&quot;Usage: move &lt;up/down/left/right>&quot;);&#xD;
					}&#xD;
				} catch(IllegalMoveException e) {&#xD;
					throw new IllegalArgumentException(e.getMessage());&#xD;
				}&#xD;
			}&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;save&quot;)) {&#xD;
			String gameName = inputArgs[1];&#xD;
			&#xD;
			try {&#xD;
				manager.save(System.getProperty(&quot;user.dir&quot;) + &quot;/saves/&quot; + gameName + &quot;.txt&quot;, game);&#xD;
				manager.addGameEntry(gameName);&#xD;
			} catch(IOException e) {&#xD;
				System.out.println(&quot;Couldn't save file: &quot; + e.getMessage());&#xD;
				enterPrompt();&#xD;
			}&#xD;
		} else if(inputArgs[0].toLowerCase().equals(&quot;exit&quot;)) {&#xD;
			// Exit command called&#xD;
			setRunning(false);&#xD;
			input.close();&#xD;
			System.exit(0);&#xD;
		} else {&#xD;
			throw new IllegalArgumentException(&quot;Invalid command passed: &quot; + inputArgs[0]);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGT7JKh1EeK3d6i6ttnN5Q" name="setRunning" specification="_d_Pp0Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGT7Jah1EeK3d6i6ttnN5Q" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
              <language>java</language>
              <body>running = state;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGUiMKh1EeK3d6i6ttnN5Q" name="displayHelp" specification="_d_Pp0qh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>helpWindow.display();&#xD;
		enterPrompt();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGUiMah1EeK3d6i6ttnN5Q" name="parseMenu" specification="_d_QQ4Kh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGUiMqh1EeK3d6i6ttnN5Q" name="choice">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>switch(choice) {&#xD;
		case 1:&#xD;
			// Play game&#xD;
			System.out.println(&quot;\nStarting new Treasure Chase game...\n&quot;);&#xD;
			run();&#xD;
			break;&#xD;
		case 2:&#xD;
			// Load game&#xD;
			System.out.println();&#xD;
			promptLoad();&#xD;
			break;&#xD;
		case 3:&#xD;
			// Options&#xD;
			System.out.println();&#xD;
			displayOptions();&#xD;
			break;&#xD;
		case 4:&#xD;
			// Help&#xD;
			System.out.println();&#xD;
			displayHelp();&#xD;
			break;&#xD;
		case 5:&#xD;
			// Exit&#xD;
			setRunning(false);&#xD;
			System.exit(0);&#xD;
		default:&#xD;
			throw new IllegalArgumentException(&quot;Please enter an option between 1-5 (inclusive).&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGUiM6h1EeK3d6i6ttnN5Q" name="promptLoad" specification="_d_Q38Kh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>String option;&#xD;
		&#xD;
		while(running) {&#xD;
			displayLoad();&#xD;
			System.out.print(&quot;\n    Load Game: &quot;);&#xD;
			&#xD;
			try {&#xD;
				option = input.nextLine();&#xD;
			} catch(Exception e) {&#xD;
				System.out.println(&quot;Please enter a valid game name.&quot;);&#xD;
				enterPrompt();&#xD;
				continue;&#xD;
			}&#xD;
		&#xD;
			// Process option&#xD;
			GameMode newGame = null;&#xD;
			&#xD;
			try {&#xD;
				newGame = manager.load(System.getProperty(&quot;user.dir&quot;) + &quot;/saves/&quot; + option + &quot;.txt&quot;);&#xD;
			} catch(FileNotFoundException e) {&#xD;
				System.out.println(&quot;Couldn't find: &quot; + System.getProperty(&quot;user.dir&quot;) + &quot;/saves/&quot; + option + &quot;.txt&quot;);&#xD;
				enterPrompt();&#xD;
				continue;&#xD;
			} catch(IOException e) {&#xD;
				System.out.println(&quot;Error parsing: &quot; + System.getProperty(&quot;user.dir&quot;) + &quot;/saves/&quot; + option + &quot;.txt&quot;);&#xD;
				System.out.println(e.getMessage());&#xD;
				e.printStackTrace();&#xD;
				enterPrompt();&#xD;
				continue;&#xD;
			}&#xD;
			&#xD;
			// Assign the saved game to the active game&#xD;
			if(newGame != null) {&#xD;
				this.game = newGame;&#xD;
				run();&#xD;
			} else {&#xD;
				System.out.println(&quot;Something went horribly wrong processing the save. Try again?&quot;);&#xD;
				enterPrompt();&#xD;
			}&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGVJQKh1EeK3d6i6ttnN5Q" name="displayLoad" specification="_d_Q38ah1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>loadWindow.display();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGVJQah1EeK3d6i6ttnN5Q" name="displayMenu" specification="_d_RfAKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>menuWindow.display();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGVJQqh1EeK3d6i6ttnN5Q" name="displayOptions" specification="_d_RfAah1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>optionsWindow.display();&#xD;
		enterPrompt();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGVJQ6h1EeK3d6i6ttnN5Q" name="runMenu" specification="_d_SGEKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>while(running) {&#xD;
			displayMenu();&#xD;
			&#xD;
			System.out.print(&quot;\n    Option: &quot;);&#xD;
			int option = 0;&#xD;
			&#xD;
			try {&#xD;
				option = Integer.parseInt(input.nextLine());&#xD;
			} catch(NumberFormatException e) {&#xD;
				System.out.println(&quot;Please enter a valid menu option.&quot;);&#xD;
				continue;&#xD;
			}&#xD;
			&#xD;
			try {&#xD;
				parseMenu(option);&#xD;
			} catch(IllegalArgumentException e) {&#xD;
				System.out.println(e.getMessage());&#xD;
				continue;&#xD;
			}&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGVwUKh1EeK3d6i6ttnN5Q" name="enterPrompt" specification="_d_SGEah1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>System.out.print(&quot;\nPlease press [ENTER] to continue... &quot;);&#xD;
		&#xD;
		input.nextLine();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGVwUah1EeK3d6i6ttnN5Q" name="displayGameBoard" specification="_d_SGEqh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>// Get board details from game&#xD;
		int width = game.getBoard().getWidth();&#xD;
		int height = game.getBoard().getHeight();&#xD;
		&#xD;
		// Get the tiles from the board&#xD;
		Tile[][] tiles = game.getBoard().getTiles();&#xD;
		&#xD;
		// Form horizontal top border&#xD;
		String borderTop = &quot;   &quot; + Character.toString(CharacterElements.charBorderCornerTopLeft) +&#xD;
				new String(new char[9]).replace('\0', CharacterElements.charBorderHorizontal);&#xD;
		&#xD;
		for(int i = 1; i &lt; width; i++)&#xD;
			borderTop += new String(new char[7]).replace('\0', CharacterElements.charBorderHorizontal);&#xD;
		&#xD;
		borderTop += Character.toString(CharacterElements.charBorderCornerTopRight);&#xD;
		&#xD;
		// Display top border&#xD;
		System.out.println(borderTop);&#xD;
		&#xD;
		// Display each tile&#xD;
		for(int i = 0; i &lt; height; i++) {&#xD;
			// Form the row by concatenating each tile on the row together&#xD;
			// A tile is 7x5, so therefore consists of 5 row sections&#xD;
			&#xD;
			String number = &quot;&quot;;&#xD;
			&#xD;
			if((height - i) &lt; 10) {&#xD;
				number = Integer.toString(height - i) + &quot; &quot;;&#xD;
			}&#xD;
			else {&#xD;
				number = Integer.toString(height - i);&#xD;
			}&#xD;
			&#xD;
			String rowTop    = &quot;   &quot; + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			String rowTM     = &quot;   &quot; + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			String rowMiddle = &quot; &quot; + number + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			String rowMB     = &quot;   &quot; + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			String rowBottom = &quot;   &quot; + Character.toString(CharacterElements.charBorderVertical) + &quot; &quot;;&#xD;
			&#xD;
			for(int j = 0; j &lt; width; j++) {&#xD;
				// Split the tile up into its relevant sections&#xD;
				// tile[0] = top, tile[1] = top-middle&#xD;
				// tile[2] = middle, tile[3] = middle-bottom&#xD;
				// tile[4] = bottom&#xD;
				&#xD;
				String[] tile = tiles[i][j].getTileString();&#xD;
				&#xD;
				// Check which tile it is for correct border placement&#xD;
				if(j == (width - 1)) {&#xD;
					// Last tile on row requires a border&#xD;
					rowTop    += tile[0] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
					rowTM     += tile[1] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
					rowMiddle += tile[2] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
					rowMB     += tile[3] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
					rowBottom += tile[4] + &quot; &quot; + Character.toString(CharacterElements.charBorderVertical);&#xD;
				}&#xD;
				else {&#xD;
					// A tile will be placed to the right of this tile, so skip border&#xD;
					rowTop    += tile[0];&#xD;
					rowTM     += tile[1];&#xD;
					rowMiddle += tile[2];&#xD;
					rowMB     += tile[3];&#xD;
					rowBottom += tile[4];&#xD;
				}&#xD;
			}&#xD;
			&#xD;
			// Output full row now&#xD;
			System.out.println(rowTop);&#xD;
			System.out.println(rowTM);&#xD;
			System.out.println(rowMiddle);&#xD;
			System.out.println(rowMB);&#xD;
			System.out.println(rowBottom);&#xD;
		}&#xD;
		&#xD;
		// Display bottom border&#xD;
		String numberBottom = &quot;        &quot;;&#xD;
		&#xD;
		for(int i = 0; i &lt; width; i++)&#xD;
			if((i + 1) &lt; 10)&#xD;
				numberBottom += Integer.toString(i + 1) + &quot;      &quot;;&#xD;
			else&#xD;
				numberBottom += Integer.toString(i + 1) + &quot;     &quot;;&#xD;
		&#xD;
		String borderBottom = borderTop.replace(CharacterElements.charBorderCornerTopLeft, CharacterElements.charBorderCornerBottomLeft);&#xD;
		borderBottom = borderBottom.replace(CharacterElements.charBorderCornerTopRight, CharacterElements.charBorderCornerBottomRight);&#xD;
		&#xD;
		System.out.println(borderBottom);&#xD;
		System.out.println(numberBottom);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGVwUqh1EeK3d6i6ttnN5Q" name="displayHUB" specification="_d_StIKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>Tile spareTile = game.getPlayer().getSpareTile();&#xD;
		String[] tileRows = spareTile.getTileString();&#xD;
		&#xD;
		String roundString = Integer.toString(game.getRound());&#xD;
		&#xD;
		// Determine rounding padding&#xD;
		if(game.getRound() &lt; 10)&#xD;
			// Prepend 4 zeros&#xD;
			roundString = &quot;0000&quot; + roundString;&#xD;
		else if(game.getRound() &lt; 100)&#xD;
			// Prepend 3 zeros&#xD;
			roundString = &quot;000&quot; + roundString;&#xD;
		else if(game.getRound() &lt; 1000)&#xD;
			// Prepend 2 zeros&#xD;
			roundString = &quot;00&quot; + roundString;&#xD;
		&#xD;
		// Score in Treasure Chase is rounds&#xD;
		System.out.println();&#xD;
		System.out.println(&quot;    ------------------- --------------- ---------------&quot;);&#xD;
		System.out.println(&quot;   |    SPARE  TILE    |     ROUND     |     SCORE     |&quot;);&#xD;
		System.out.println(&quot;   |===================|===============|===============|&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[0] + &quot;      |               |               |&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[1] + &quot;      |               |               |&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[2] + &quot;      |     &quot; + roundString + &quot;     |     &quot; + roundString + &quot;     |&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[3] + &quot;      |               |               |&quot;);&#xD;
		System.out.println(&quot;   |      &quot; + tileRows[4] + &quot;      |               |               |&quot;);&#xD;
		System.out.println(&quot;    ------------------- --------------- ---------------&quot;);&#xD;
		System.out.println(&quot;   |    LAST COMPUTER MOVE                             |&quot;);&#xD;
		System.out.println(&quot;   |===================================================|&quot;);&#xD;
		System.out.println(&quot;     &quot; + game.getComputerPlayer().getLastMove());&#xD;
		System.out.println(&quot;   |___________________________________________________|&quot;);&#xD;
		System.out.println();&#xD;
		&#xD;
		&#xD;
		System.out.println(&quot;DEBUG INFO:&quot;);&#xD;
		System.out.println(&quot;\tToken Position: (&quot; + game.getBoard().getTokenPos()[0] + &quot;,&quot; + game.getBoard().getTokenPos()[1] + &quot;)&quot;);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGWXYKh1EeK3d6i6ttnN5Q" name="update" specification="_d_StIah1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>// Display the game board&#xD;
		displayGameBoard();&#xD;
		&#xD;
		// Display the HUB&#xD;
		displayHUB();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGWXYah1EeK3d6i6ttnN5Q" name="onTreasureChaseWin" specification="_d_StIqh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>System.out.println(&quot;__   __             __                      _   _   _            _                                              \n&quot; +&#xD;
                        &quot;\\ \\ / /            / _|                    | | | | | |          | |                                           \n&quot; +&#xD;
                        &quot; \\ V /___  _   _  | |_ ___  _   _ _ __   __| | | |_| |__   ___  | |_ _ __ ___  __ _ ___ _   _ _ __ ___         \n&quot; +&#xD;
                        &quot;  \\ // _ \\| | | | |  _/ _ \\| | | | '_ \\ / _` | | __| '_ \\ / _ \\ | __| '__/ _ \\/ _` / __| | | | '__/ _ \\ \n&quot; +&#xD;
                        &quot;  | | (_) | |_| | | || (_) | |_| | | | | (_| | | |_| | | |  __/ | |_| | |  __/ (_| \\__ \\ |_| | | |  __/_ _ _  \n&quot; +&#xD;
                        &quot;  \\_/\\___/ \\__,_| |_| \\___/ \\__,_|_| |_|\\__,_|  \\__|_| |_|\\___|  \\__|_|  \\___|\\__,_|___/\\__,_|_|  \\___(_|_|_) \n&quot;);&#xD;
                                                                                                          &#xD;
                                                                                                          &#xD;
		&#xD;
		// Wait 2 seconds before final congratulation message&#xD;
		try { Thread.sleep(2000); } catch(InterruptedException e) {}&#xD;
		&#xD;
		System.out.println(&quot;     _____ _____ _   _ _____ ______  ___ _____ _   _ _       ___ _____ _____ _____ _   _  _____ _ _           \n&quot; +&#xD;
                        &quot;    /  __ \\  _  | \\ | |  __ \\| ___ \\/ _ \\_   _| | | | |     / _ \\_   _|_   _|  _  | \\ | |/  ___| | |   \n&quot; +&#xD;
                        &quot;    | /  \\/ | | |  \\| | |  \\/| |_/ / /_\\ \\| | | | | | |    / /_\\ \\| |   | | | | | |  \\| |\\ `--.| | | \n&quot; +&#xD;
                        &quot;    | |   | | | | . ` | | __ |    /|  _  || | | | | | |    |  _  || |   | | | | | | . ` | `--. \\ | |         \n&quot; +&#xD;
                        &quot;    | \\__/\\ \\_/ / |\\  | |_\\ \\| |\\ \\| | | || | | |_| | |____| | | || |  _| |_\\ \\_/ / |\\  |/\\__/ /_|_| \n&quot; +&#xD;
                        &quot;     \\____/\\___/\\_| \\_/\\____/\\_| \\_\\_| |_/\\_/  \\___/\\_____/\\_| |_/\\_/  \\___/ \\___/\\_| \\_/\\____/(_|_)  \n&quot;);&#xD;
                                                                                             &#xD;
                                                                                             &#xD;
		&#xD;
		System.out.println();&#xD;
		System.out.println(&quot;Your final score: &quot; + game.getPlayer().getScore());&#xD;
		System.out.println();&#xD;
		&#xD;
		// Leaderboard code&#xD;
		promptLeaderboard();&#xD;
		enterPrompt();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGWXYqh1EeK3d6i6ttnN5Q" name="promptLeaderboard" specification="_d_TUMKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>String name;&#xD;
		String choice;&#xD;
		&#xD;
		System.out.print(&quot;Do you want to submit score (Y/N)? &quot;);&#xD;
		choice = input.nextLine().toLowerCase();&#xD;
		&#xD;
		if(choice.equals(&quot;y&quot;)) {&#xD;
			System.out.print(&quot;Enter name: &quot;);&#xD;
			name = input.nextLine();&#xD;
			&#xD;
			while(name.length() > 14) {&#xD;
				System.out.println(&quot;Name must not exceed 14 characters!&quot;);&#xD;
				System.out.print(&quot;Enter name: &quot;);&#xD;
				name = input.nextLine();&#xD;
			}&#xD;
			&#xD;
			game.getLeaderboard().submit(name, game.getPlayer().getScore());&#xD;
			System.out.println(&quot;Score submitted! Here is the current top 10 now: \n&quot;);&#xD;
			&#xD;
			displayLeaderboard(10);&#xD;
			&#xD;
			try {&#xD;
				game.getLeaderboard().save();&#xD;
			} catch(Exception e) {&#xD;
				System.out.println(&quot;Couldn't save score to leaderboard file. Score will NOT be saved.&quot;);&#xD;
			}&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGW-cKh1EeK3d6i6ttnN5Q" name="displayLeaderboard" specification="_d_T7QKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGW-cah1EeK3d6i6ttnN5Q" name="entries">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
              <language>java</language>
              <body>Leaderboard l = game.getLeaderboard();&#xD;
		ArrayList&lt;String> names = l.getNames();&#xD;
		ArrayList&lt;Integer> scores = l.getScores();&#xD;
		&#xD;
		System.out.println(&quot; -------------------- ------------- &quot;);&#xD;
		System.out.println(&quot;|        NAME        |    SCORE    |&quot;);&#xD;
		System.out.println(&quot;|====================|=============|&quot;);&#xD;
		&#xD;
		if(names.size() &lt; entries)&#xD;
			entries = names.size();&#xD;
		&#xD;
		for(int i = 0; i &lt; entries; i++) {&#xD;
			// Form name entry&#xD;
			String entry = &quot;| &quot; + (i + 1) + &quot;. &quot; + names.get(i);&#xD;
			&#xD;
			while(entry.length() &lt; 21) {&#xD;
				// Pad the name out to 21 characters to fit in field&#xD;
				entry += &quot; &quot;;&#xD;
			}&#xD;
			&#xD;
			entry += &quot;|&quot;;&#xD;
			&#xD;
			// Form score entry&#xD;
			entry += &quot; &quot; + scores.get(i);&#xD;
			&#xD;
			while(entry.length() &lt; (21 + 14)) {&#xD;
				// Pad the score out to 21 further characters to fit in field&#xD;
				entry += &quot; &quot;;&#xD;
			}&#xD;
			&#xD;
			entry += &quot;|&quot;;&#xD;
			&#xD;
			System.out.println(entry);&#xD;
		}&#xD;
		&#xD;
		// Form bottom&#xD;
		System.out.println(&quot; -------------------- ------------- &quot;);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGW-cqh1EeK3d6i6ttnN5Q" name="processFile" specification="_d_UiUKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGW-c6h1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eGW-dKh1EeK3d6i6ttnN5Q" type="_eESh4Kh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>LinkedList&lt;String> lines = new LinkedList&lt;String>();&#xD;
		BufferedReader reader = new BufferedReader(new FileReader(path));&#xD;
		String line = reader.readLine();&#xD;
			&#xD;
		while(line != null) {&#xD;
			lines.add(line);&#xD;
			line = reader.readLine();&#xD;
		}&#xD;
		reader.close();&#xD;
		&#xD;
		return lines;&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d_L_cKh1EeK3d6i6ttnN5Q" name="makeMenuWindow" visibility="private" method="_eGStAKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGoENKh1EeK3d6i6ttnN5Q">
                <body>Initialise the main menu window.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_MmgKh1EeK3d6i6ttnN5Q" name="makeLoadWindow" visibility="private" method="_eGStAah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGorQKh1EeK3d6i6ttnN5Q">
                <body>Initialise the load game window.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_Mmgah1EeK3d6i6ttnN5Q" name="makeOptionsWindow" visibility="private" method="_eGStAqh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGorQah1EeK3d6i6ttnN5Q">
                <body>Initialise the options window.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_NNkKh1EeK3d6i6ttnN5Q" name="makeHelpWindow" visibility="private" method="_eGTUEKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGorQqh1EeK3d6i6ttnN5Q">
                <body>Initialise the help window.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_NNkah1EeK3d6i6ttnN5Q" name="run" method="_eGTUEah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGorQ6h1EeK3d6i6ttnN5Q">
                <body>Run the user interface.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_NNkqh1EeK3d6i6ttnN5Q" name="promptTileMove" method="_eGTUEqh1EeK3d6i6ttnN5Q" raisedException="_eEhycKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGorRKh1EeK3d6i6ttnN5Q">
                <body>Prompt the user for their tile move input.&#xD;
	 * &#xD;
	 * @throws IllegalArgumentException Thrown when an invalid command is passed as a value.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_N0oKh1EeK3d6i6ttnN5Q" name="promptTokenMove" method="_eGT7IKh1EeK3d6i6ttnN5Q" raisedException="_eEhycKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGorRah1EeK3d6i6ttnN5Q">
                <body>Prompt the user for their token move input.&#xD;
	 * &#xD;
	 * @throws IllegalArgumentException Thrown when an invalid command is passed as a value.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_ObsKh1EeK3d6i6ttnN5Q" name="parse" method="_eGT7Iah1EeK3d6i6ttnN5Q" raisedException="_eEhycKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGorRqh1EeK3d6i6ttnN5Q">
                <body>Parse user input and perform appropriate operation(s).&#xD;
	 * &#xD;
	 * @param inputArgs The list of arguments the user passed.&#xD;
	 * @throws IllegalArgumentException Thrown when an invalid argument is passed with a command.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_Obsah1EeK3d6i6ttnN5Q" name="inputArgs">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
                <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_d_PCwKh1EeK3d6i6ttnN5Q" value="*"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d_Pp0Kh1EeK3d6i6ttnN5Q" name="setRunning" method="_eGT7JKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGpSUKh1EeK3d6i6ttnN5Q">
                <body>Set whether or not the user interface is running.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_Pp0ah1EeK3d6i6ttnN5Q" name="state">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d_Pp0qh1EeK3d6i6ttnN5Q" name="displayHelp" method="_eGUiMKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGpSUah1EeK3d6i6ttnN5Q">
                <body>Display the help file.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_QQ4Kh1EeK3d6i6ttnN5Q" name="parseMenu" method="_eGUiMah1EeK3d6i6ttnN5Q" raisedException="_eEhycKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGpSUqh1EeK3d6i6ttnN5Q">
                <body>Parse a menu option.&#xD;
	 * &#xD;
	 * 1 - Play game&#xD;
	 * 2 - Load game&#xD;
	 * 3 - Options&#xD;
	 * 4 - Help&#xD;
	 * 5 - Exit&#xD;
	 * &#xD;
	 * @param choice The menu option.&#xD;
	 * @throws IllegalArgumentException When an invalid menu option is passed.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_QQ4ah1EeK3d6i6ttnN5Q" name="choice">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d_Q38Kh1EeK3d6i6ttnN5Q" name="promptLoad" method="_eGUiM6h1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGpSU6h1EeK3d6i6ttnN5Q">
                <body>Display the load screen and prompt the user for their option.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_Q38ah1EeK3d6i6ttnN5Q" name="displayLoad" method="_eGVJQKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGpSVKh1EeK3d6i6ttnN5Q">
                <body>Display the load screen.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_RfAKh1EeK3d6i6ttnN5Q" name="displayMenu" method="_eGVJQah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGpSVah1EeK3d6i6ttnN5Q">
                <body>Display the menu.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_RfAah1EeK3d6i6ttnN5Q" name="displayOptions" method="_eGVJQqh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGpSVqh1EeK3d6i6ttnN5Q">
                <body>Display the options window.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_SGEKh1EeK3d6i6ttnN5Q" name="runMenu" method="_eGVJQ6h1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGpSV6h1EeK3d6i6ttnN5Q">
                <body>Display and run the main menu.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_SGEah1EeK3d6i6ttnN5Q" name="enterPrompt" method="_eGVwUKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGp5YKh1EeK3d6i6ttnN5Q">
                <body>Display and wait for enter. Useful to pause states until user is ready.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_SGEqh1EeK3d6i6ttnN5Q" name="displayGameBoard" method="_eGVwUah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGp5Yah1EeK3d6i6ttnN5Q">
                <body>Draw the game board.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_StIKh1EeK3d6i6ttnN5Q" name="displayHUB" method="_eGVwUqh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGp5Yqh1EeK3d6i6ttnN5Q">
                <body>Display the game HUB.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_StIah1EeK3d6i6ttnN5Q" name="update" method="_eGWXYKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGp5Y6h1EeK3d6i6ttnN5Q">
                <body>Update the interface.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_StIqh1EeK3d6i6ttnN5Q" name="onTreasureChaseWin" method="_eGWXYah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGp5ZKh1EeK3d6i6ttnN5Q">
                <body>Called in the event the player has won (i.e. completed the game mode objective(s)).</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_TUMKh1EeK3d6i6ttnN5Q" name="promptLeaderboard" method="_eGWXYqh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGp5Zah1EeK3d6i6ttnN5Q">
                <body>Prompt the user for leaderboard entry.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_T7QKh1EeK3d6i6ttnN5Q" name="displayLeaderboard" method="_eGW-cKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGp5Zqh1EeK3d6i6ttnN5Q">
                <body>Display the leaderboard.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_T7Qah1EeK3d6i6ttnN5Q" name="entries">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d_UiUKh1EeK3d6i6ttnN5Q" name="processFile" visibility="private" method="_eGW-cqh1EeK3d6i6ttnN5Q" raisedException="_eDZxEah1EeK3d6i6ttnN5Q _eDdbcah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGp5Z6h1EeK3d6i6ttnN5Q">
                <body>Retrieve the contents of a file line by line.&#xD;
	 * &#xD;
	 * @param path The path to the file.&#xD;
	 * @returns The lines of the processed file.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_UiUah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eEyRIKh1EeK3d6i6ttnN5Q" type="_eESh4Kh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_eEU-IKh1EeK3d6i6ttnN5Q" name="UserInterface" method="_eGSF8Kh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_eEU-Iqh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_eEU-I6h1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGoEM6h1EeK3d6i6ttnN5Q">
                <body>Construct a new user interface to interface with a valid&#xD;
	 * game mode.&#xD;
	 * &#xD;
	 * @param game The game mode object to manipulate.</body>
              </ownedComment>
              <ownedParameter xmi:id="_eEU-Iah1EeK3d6i6ttnN5Q" name="game" type="_d-PkQKh1EeK3d6i6ttnN5Q"/>
              <ownedParameter xmi:id="_eEU-JKh1EeK3d6i6ttnN5Q" type="_d_JjMKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Class" xmi:id="_d_dsQKh1EeK3d6i6ttnN5Q" name="Window">
            <ownedComment xmi:id="_eGqgcKh1EeK3d6i6ttnN5Q">
              <body>Represents a basic text-based graphical window.&#xD;
&#xD;
@author Gareth Gill&#xD;
@author John Meikle&#xD;
@version 0.1.17042013&#xD;
 *</body>
            </ownedComment>
            <ownedAttribute xmi:id="_eFpMwKh1EeK3d6i6ttnN5Q" name="title" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFpz0ah1EeK3d6i6ttnN5Q" name="layoutPath" visibility="private">
              <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
            </ownedAttribute>
            <ownedAttribute xmi:id="_eFqa4ah1EeK3d6i6ttnN5Q" name="window" visibility="private" type="_eESh4Kh1EeK3d6i6ttnN5Q" association="_eHdxsah1EeK3d6i6ttnN5Q"/>
            <ownedAttribute xmi:id="_eFsQEKh1EeK3d6i6ttnN5Q" name="contents" visibility="protected" type="_eESh4Kh1EeK3d6i6ttnN5Q" association="_eHfm4Kh1EeK3d6i6ttnN5Q"/>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGYMkKh1EeK3d6i6ttnN5Q" name="Window" specification="_d_e6YKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGYMkah1EeK3d6i6ttnN5Q" type="_d_dsQKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>title = &quot;&quot;;&#xD;
		layoutPath = System.getProperty(&quot;user.dir&quot;) + &quot;/media/window_default&quot;;&#xD;
		window = new LinkedList&lt;String>();&#xD;
		contents = new LinkedList&lt;String>();&#xD;
		&#xD;
		try {&#xD;
			refresh();&#xD;
		} catch(Exception e) {&#xD;
			System.out.println(&quot;Fatal Error: Couldn't load default window layout.&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGYzoKh1EeK3d6i6ttnN5Q" name="Window" specification="_d_fhcqh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGYzoah1EeK3d6i6ttnN5Q" name="title">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_eGYzoqh1EeK3d6i6ttnN5Q" type="_d_dsQKh1EeK3d6i6ttnN5Q" direction="return"/>
              <language>java</language>
              <body>this();&#xD;
		this.title = title;&#xD;
		clearContents();&#xD;
		&#xD;
		try {&#xD;
			refresh();&#xD;
		} catch(Exception e) {&#xD;
			System.out.println(&quot;Fatal Error: Couldn't load default window layout.&quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGYzo6h1EeK3d6i6ttnN5Q" name="display" specification="_d_gIg6h1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>for(String line : window) {&#xD;
			if(line.contains(&quot;%&quot;)) {&#xD;
				// Content starts wherever the % symbol is&#xD;
				for(String content : contents) {&#xD;
					// Add each entry in content to the window by adding it into the line&#xD;
					String[] split = line.split(&quot;%&quot;);&#xD;
					&#xD;
					int offset = content.length() - 1;&#xD;
					String newLine = split[0] + content + split[1].substring(offset, split[1].length());&#xD;
					System.out.println(newLine);&#xD;
				}&#xD;
			} else {&#xD;
				System.out.println(line);&#xD;
			}&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGZasKh1EeK3d6i6ttnN5Q" name="setLayoutPath" specification="_d_gvkKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGZasah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>layoutPath = path;&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGZasqh1EeK3d6i6ttnN5Q" name="refresh" specification="_d_hWoKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>BufferedReader reader = new BufferedReader(new FileReader(layoutPath));&#xD;
		String line = reader.readLine();&#xD;
		window = new LinkedList&lt;String>();&#xD;
		&#xD;
		while(line != null) {&#xD;
			// Do some replacements&#xD;
			// [W] = wall block&#xD;
			line = line.replace(&quot;[W]&quot;, Character.toString(CharacterElements.charBlock));&#xD;
			window.add(line);&#xD;
			&#xD;
			line = reader.readLine();&#xD;
		}&#xD;
		reader.close();&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGZas6h1EeK3d6i6ttnN5Q" name="addContent" specification="_d_h9sKh1EeK3d6i6ttnN5Q">
              <ownedParameter xmi:id="_eGZatKh1EeK3d6i6ttnN5Q" name="content">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <language>java</language>
              <body>if(content.length() > 72)&#xD;
			throw new IllegalArgumentException(&quot;Content must not exceed 72 characters.&quot;);&#xD;
		&#xD;
		if(content.isEmpty())&#xD;
			contents.add(&quot; &quot;);&#xD;
		else&#xD;
			contents.add(content);&#xD;
	</body>
            </ownedBehavior>
            <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_eGaBwKh1EeK3d6i6ttnN5Q" name="clearContents" specification="_d_ikwKh1EeK3d6i6ttnN5Q">
              <language>java</language>
              <body>contents = new LinkedList&lt;String>();&#xD;
		&#xD;
		// Add title to contents&#xD;
		if(!title.isEmpty()) {&#xD;
			contents.add(title);&#xD;
			contents.add(&quot;------------------------------------------------------------------------&quot;);&#xD;
			contents.add(&quot; &quot;);&#xD;
		}&#xD;
	</body>
            </ownedBehavior>
            <ownedOperation xmi:id="_d_e6YKh1EeK3d6i6ttnN5Q" name="Window" method="_eGYMkKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d_e6Yah1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d_fhcKh1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGqgcah1EeK3d6i6ttnN5Q">
                <body>Construct a default window.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_fhcah1EeK3d6i6ttnN5Q" type="_d_dsQKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d_fhcqh1EeK3d6i6ttnN5Q" name="Window" method="_eGYzoKh1EeK3d6i6ttnN5Q">
              <eAnnotations xmi:id="_d_gIgKh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
                <details xmi:id="_d_gIgah1EeK3d6i6ttnN5Q" key="create"/>
              </eAnnotations>
              <ownedComment xmi:id="_eGqgcqh1EeK3d6i6ttnN5Q">
                <body>Construct a window with a custom title.&#xD;
	 * &#xD;
	 * @param title The title of the window.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_fhc6h1EeK3d6i6ttnN5Q" name="title">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
              <ownedParameter xmi:id="_d_gIgqh1EeK3d6i6ttnN5Q" type="_d_dsQKh1EeK3d6i6ttnN5Q" direction="return"/>
            </ownedOperation>
            <ownedOperation xmi:id="_d_gIg6h1EeK3d6i6ttnN5Q" name="display" method="_eGYzo6h1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGqgc6h1EeK3d6i6ttnN5Q">
                <body>Displays the contents of the window.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_gvkKh1EeK3d6i6ttnN5Q" name="setLayoutPath" method="_eGZasKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGqgdKh1EeK3d6i6ttnN5Q">
                <body>Set the layout path to a new (custom) layout file. Custom elements include:&#xD;
	 * &#xD;
	 * 	[W] = Black block&#xD;
	 * &#xD;
	 * @param path The path to the new layout.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_gvkah1EeK3d6i6ttnN5Q" name="path">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d_hWoKh1EeK3d6i6ttnN5Q" name="refresh" method="_eGZasqh1EeK3d6i6ttnN5Q" raisedException="_eDZxEah1EeK3d6i6ttnN5Q _eDdbcah1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGqgdah1EeK3d6i6ttnN5Q">
                <body>Refresh the window contents by internally redrawing the window.&#xD;
	 * This should be called after setting a new layout path.</body>
              </ownedComment>
            </ownedOperation>
            <ownedOperation xmi:id="_d_h9sKh1EeK3d6i6ttnN5Q" name="addContent" method="_eGZas6h1EeK3d6i6ttnN5Q" raisedException="_eEhycKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGrHgKh1EeK3d6i6ttnN5Q">
                <body>Add a line of content to the window. Maximum length should be 72 characters to ensure &#xD;
	 * consistency.&#xD;
	 * &#xD;
	 * @param content The line of content to add to the window.&#xD;
	 * @throws IllegalArgumentException If the content passed is greater than 80 characters.</body>
              </ownedComment>
              <ownedParameter xmi:id="_d_h9sah1EeK3d6i6ttnN5Q" name="content">
                <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
              </ownedParameter>
            </ownedOperation>
            <ownedOperation xmi:id="_d_ikwKh1EeK3d6i6ttnN5Q" name="clearContents" method="_eGaBwKh1EeK3d6i6ttnN5Q">
              <ownedComment xmi:id="_eGrHgah1EeK3d6i6ttnN5Q">
                <body>Clear the contents of the window.</body>
              </ownedComment>
            </ownedOperation>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHSLgKh1EeK3d6i6ttnN5Q" name="" memberEnd="_eHSLgah1EeK3d6i6ttnN5Q _eFifEKh1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHSLgah1EeK3d6i6ttnN5Q" name="" type="_d_JjMKh1EeK3d6i6ttnN5Q" association="_eHSLgKh1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHTZoah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHTZoqh1EeK3d6i6ttnN5Q _eFjtMKh1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHTZoqh1EeK3d6i6ttnN5Q" name="" type="_d_JjMKh1EeK3d6i6ttnN5Q" association="_eHTZoah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHVO0ah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHVO0qh1EeK3d6i6ttnN5Q _eFjtMqh1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHVO0qh1EeK3d6i6ttnN5Q" name="" type="_d_JjMKh1EeK3d6i6ttnN5Q" association="_eHVO0ah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHXEAah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHXEAqh1EeK3d6i6ttnN5Q _eFkUQah1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHXEAqh1EeK3d6i6ttnN5Q" name="" type="_d_JjMKh1EeK3d6i6ttnN5Q" association="_eHXEAah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHY5MKh1EeK3d6i6ttnN5Q" name="" memberEnd="_eHY5Mah1EeK3d6i6ttnN5Q _eFk7Uah1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHY5Mah1EeK3d6i6ttnN5Q" name="" type="_d_JjMKh1EeK3d6i6ttnN5Q" association="_eHY5MKh1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHaHUah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHaHUqh1EeK3d6i6ttnN5Q _eFliYah1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHaHUqh1EeK3d6i6ttnN5Q" name="" type="_d_JjMKh1EeK3d6i6ttnN5Q" association="_eHaHUah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHb8gah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHb8gqh1EeK3d6i6ttnN5Q _eFmJcah1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHb8gqh1EeK3d6i6ttnN5Q" name="" type="_d_JjMKh1EeK3d6i6ttnN5Q" association="_eHb8gah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHdxsah1EeK3d6i6ttnN5Q" name="" memberEnd="_eHdxsqh1EeK3d6i6ttnN5Q _eFqa4ah1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHdxsqh1EeK3d6i6ttnN5Q" name="" type="_d_dsQKh1EeK3d6i6ttnN5Q" association="_eHdxsah1EeK3d6i6ttnN5Q"/>
          </packagedElement>
          <packagedElement xmi:type="uml:Association" xmi:id="_eHfm4Kh1EeK3d6i6ttnN5Q" name="" memberEnd="_eHfm4ah1EeK3d6i6ttnN5Q _eFsQEKh1EeK3d6i6ttnN5Q">
            <ownedEnd xmi:id="_eHfm4ah1EeK3d6i6ttnN5Q" name="" type="_d_dsQKh1EeK3d6i6ttnN5Q" association="_eHfm4Kh1EeK3d6i6ttnN5Q"/>
          </packagedElement>
        </packagedElement>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_d2NpoKh1EeK3d6i6ttnN5Q" name="java">
      <packagedElement xmi:type="uml:Package" xmi:id="_d2Npoah1EeK3d6i6ttnN5Q" name="util">
        <packagedElement xmi:type="uml:Class" xmi:id="_eDNj0Kh1EeK3d6i6ttnN5Q" name="Random"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eDR1QKh1EeK3d6i6ttnN5Q" name="ArrayList"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eDepkah1EeK3d6i6ttnN5Q" name="NoSuchElementException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eDf3sah1EeK3d6i6ttnN5Q" name="Scanner"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eESh4Kh1EeK3d6i6ttnN5Q" name="LinkedList"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_d2hysKh1EeK3d6i6ttnN5Q" name="io">
        <packagedElement xmi:type="uml:Class" xmi:id="_eDX74Kh1EeK3d6i6ttnN5Q" name="BufferedReader"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eDZKAah1EeK3d6i6ttnN5Q" name="BufferedWriter"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eDZxEah1EeK3d6i6ttnN5Q" name="FileNotFoundException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eDa_Mah1EeK3d6i6ttnN5Q" name="FileReader"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eDcNUah1EeK3d6i6ttnN5Q" name="FileWriter"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eDdbcah1EeK3d6i6ttnN5Q" name="IOException"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_d4s88Kh1EeK3d6i6ttnN5Q" name="nio">
        <packagedElement xmi:type="uml:Package" xmi:id="_d4s88ah1EeK3d6i6ttnN5Q" name="charset">
          <packagedElement xmi:type="uml:Class" xmi:id="_eD78kKh1EeK3d6i6ttnN5Q" name="Charset"/>
        </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package" xmi:id="_eEhLYKh1EeK3d6i6ttnN5Q" name="lang">
        <packagedElement xmi:type="uml:Class" xmi:id="_eEhycKh1EeK3d6i6ttnN5Q" name="IllegalArgumentException"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eElc0Kh1EeK3d6i6ttnN5Q" name="Exception"/>
        <packagedElement xmi:type="uml:Class" xmi:id="_eEpuQKh1EeK3d6i6ttnN5Q" name="NumberFormatException"/>
        <packagedElement xmi:type="uml:DataType" xmi:id="_eEtYoKh1EeK3d6i6ttnN5Q" name="Character"/>
      </packagedElement>
    </packagedElement>
    <profileApplication xmi:id="_dZeDQKh1EeK3d6i6ttnN5Q">
      <eAnnotations xmi:id="_dZeqUKh1EeK3d6i6ttnN5Q" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile-Annotation_2-UMLLabProfile"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLLAB_PROFILES/UMLLab.profile.uml#UMLLabProfile"/>
    </profileApplication>
  </uml:Model>
  <UMLLabProfile:TargetLanguage xmi:id="_dZhtoKh1EeK3d6i6ttnN5Q" base_Package="_dPm8oKh1EeK3d6i6ttnN5Q">
    <languageName>java</languageName>
  </UMLLabProfile:TargetLanguage>
  <UMLLabProfile:LegacyStyledElement xmi:id="_d8VfwKh1EeK3d6i6ttnN5Q" base_Element="_d8U4sKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_d9IJ9Kh1EeK3d6i6ttnN5Q" dimensions="1" base_Element="_d9IJ8Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_d9IxAah1EeK3d6i6ttnN5Q" dimensions="1" base_Element="_d9IJ8ah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_d9JYE6h1EeK3d6i6ttnN5Q" base_Element="_d9JYEKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_d-Mg8Kh1EeK3d6i6ttnN5Q" base_Element="_d-L54Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Generics xmi:id="_d_VwcKh1EeK3d6i6ttnN5Q" genericsValue="String" base_Element="_d_UiUKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDOx8Kh1EeK3d6i6ttnN5Q" base_Element="_eDNj0Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDTDYKh1EeK3d6i6ttnN5Q" base_Element="_eDR1QKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDZKAKh1EeK3d6i6ttnN5Q" base_Element="_eDX74Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDZxEKh1EeK3d6i6ttnN5Q" base_Element="_eDZKAah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDa_MKh1EeK3d6i6ttnN5Q" base_Element="_eDZxEah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDcNUKh1EeK3d6i6ttnN5Q" base_Element="_eDa_Mah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDdbcKh1EeK3d6i6ttnN5Q" base_Element="_eDcNUah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDepkKh1EeK3d6i6ttnN5Q" base_Element="_eDdbcah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDf3sKh1EeK3d6i6ttnN5Q" base_Element="_eDepkah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eDhF0Kh1EeK3d6i6ttnN5Q" base_Element="_eDf3sah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eD9KsKh1EeK3d6i6ttnN5Q" base_Element="_eD78kKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eETwAKh1EeK3d6i6ttnN5Q" base_Element="_eESh4Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eEiZgKh1EeK3d6i6ttnN5Q" base_Element="_eEhycKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eEmq8Kh1EeK3d6i6ttnN5Q" base_Element="_eElc0Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eEq8YKh1EeK3d6i6ttnN5Q" base_Element="_eEpuQKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eEumwKh1EeK3d6i6ttnN5Q" base_Element="_eEtYoKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_eE5l4Kh1EeK3d6i6ttnN5Q" dimensions="2" base_Element="_eE4-0Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eE6M8ah1EeK3d6i6ttnN5Q" base_Element="_eE6M8Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_eE60Aqh1EeK3d6i6ttnN5Q" base_Element="_eE60AKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_eE7bEqh1EeK3d6i6ttnN5Q" base_Element="_eE7bEKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eE8CIKh1EeK3d6i6ttnN5Q" base_Element="_eE7bE6h1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Generics xmi:id="_eE-eYKh1EeK3d6i6ttnN5Q" genericsValue="Integer" base_Element="_eE9QQKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eE_FcKh1EeK3d6i6ttnN5Q" base_Element="_eE9QQKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Generics xmi:id="_eFATkKh1EeK3d6i6ttnN5Q" genericsValue="Integer" base_Element="_eE_Fcah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFA6oKh1EeK3d6i6ttnN5Q" base_Element="_eE_Fcah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFBhsKh1EeK3d6i6ttnN5Q" base_Element="_eFA6oah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_eFCIwKh1EeK3d6i6ttnN5Q" base_Element="_eFBhsah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFCIwah1EeK3d6i6ttnN5Q" base_Element="_eFBhsah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_eFCv0qh1EeK3d6i6ttnN5Q" dimensions="1" base_Element="_eFCv0Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFDW4Kh1EeK3d6i6ttnN5Q" base_Element="_eFCv0Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Generics xmi:id="_eFHBQKh1EeK3d6i6ttnN5Q" genericsValue="String" base_Element="_eFFzIah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Generics xmi:id="_eFI2cKh1EeK3d6i6ttnN5Q" genericsValue="Integer" base_Element="_eFHoUKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFJdgKh1EeK3d6i6ttnN5Q" base_Element="_eFI2cah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFMg0ah1EeK3d6i6ttnN5Q" base_Element="_eFMg0Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFO9Eah1EeK3d6i6ttnN5Q" base_Element="_eFO9EKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFPkIah1EeK3d6i6ttnN5Q" base_Element="_eFPkIKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Array xmi:id="_eFQyQKh1EeK3d6i6ttnN5Q" base_Element="_eFQLMah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFRZUKh1EeK3d6i6ttnN5Q" base_Element="_eFQyQah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFSAYKh1EeK3d6i6ttnN5Q" base_Element="_eFRZUah1EeK3d6i6ttnN5Q">
    <associatedElement xmi:type="uml:Operation" xmi:id="_eFSAYah1EeK3d6i6ttnN5Q" name="getEast" method="_eGFRoKh1EeK3d6i6ttnN5Q">
      <ownedParameter xmi:id="_eFSncKh1EeK3d6i6ttnN5Q" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFTOgKh1EeK3d6i6ttnN5Q" base_Element="_eFSncah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFT1kKh1EeK3d6i6ttnN5Q" base_Element="_eFTOgah1EeK3d6i6ttnN5Q">
    <associatedElement xmi:type="uml:Operation" xmi:id="_eFT1kah1EeK3d6i6ttnN5Q" name="getWest" method="_eGFRoqh1EeK3d6i6ttnN5Q">
      <ownedParameter xmi:id="_eFUcoKh1EeK3d6i6ttnN5Q" direction="return">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
      </ownedParameter>
    </associatedElement>
  </UMLLabProfile:LegacyStyledElement>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFYHAah1EeK3d6i6ttnN5Q" base_Element="_eFYHAKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFZVIKh1EeK3d6i6ttnN5Q" base_Element="_eFYuEqh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFZ8MKh1EeK3d6i6ttnN5Q" base_Element="_eFZVIah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFc_gKh1EeK3d6i6ttnN5Q" base_Element="_eFcYcqh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFdmkKh1EeK3d6i6ttnN5Q" base_Element="_eFc_gah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFeNoKh1EeK3d6i6ttnN5Q" base_Element="_eFdmkah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFe0sKh1EeK3d6i6ttnN5Q" base_Element="_eFeNoah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFfbwKh1EeK3d6i6ttnN5Q" base_Element="_eFe0sah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFgC0Kh1EeK3d6i6ttnN5Q" base_Element="_eFfbwah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFgC0qh1EeK3d6i6ttnN5Q" base_Element="_eFgC0ah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFgp4ah1EeK3d6i6ttnN5Q" base_Element="_eFgp4Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFhQ8ah1EeK3d6i6ttnN5Q" base_Element="_eFhQ8Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFh4AKh1EeK3d6i6ttnN5Q" base_Element="_eFhQ8qh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFjGIKh1EeK3d6i6ttnN5Q" base_Element="_eFifEKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFjtMah1EeK3d6i6ttnN5Q" base_Element="_eFjtMKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFkUQKh1EeK3d6i6ttnN5Q" base_Element="_eFjtMqh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFk7UKh1EeK3d6i6ttnN5Q" base_Element="_eFkUQah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFliYKh1EeK3d6i6ttnN5Q" base_Element="_eFk7Uah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFmJcKh1EeK3d6i6ttnN5Q" base_Element="_eFliYah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFmwgKh1EeK3d6i6ttnN5Q" base_Element="_eFmJcah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFpz0Kh1EeK3d6i6ttnN5Q" base_Element="_eFpMwKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFqa4Kh1EeK3d6i6ttnN5Q" base_Element="_eFpz0ah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Generics xmi:id="_eFrpAKh1EeK3d6i6ttnN5Q" genericsValue="String" base_Element="_eFqa4ah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFrpAah1EeK3d6i6ttnN5Q" base_Element="_eFqa4ah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Generics xmi:id="_eFteMKh1EeK3d6i6ttnN5Q" genericsValue="String" base_Element="_eFsQEKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:LegacyStyledElement xmi:id="_eFuFQKh1EeK3d6i6ttnN5Q" base_Element="_eFsQEKh1EeK3d6i6ttnN5Q"/>
  <uml:OpaqueBehavior xmi:id="_eGBnQKh1EeK3d6i6ttnN5Q" name="convertToInt" specification="_eDkJIKh1EeK3d6i6ttnN5Q">
    <ownedParameter xmi:id="_eGBnQah1EeK3d6i6ttnN5Q" name="ra" type="_d8uhUKh1EeK3d6i6ttnN5Q"/>
    <ownedParameter xmi:id="_eGBnQqh1EeK3d6i6ttnN5Q" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <language>java</language>
    <body>switch(ra) {&#xD;
			case DEFAULT:&#xD;
				return 0;&#xD;
			case NINETY:&#xD;
				return 90;&#xD;
			case HUNDREDANDEIGHTY:&#xD;
				return 180;&#xD;
			case TWOHUNDREDANDSEVENTY:&#xD;
				return 270;&#xD;
			default:&#xD;
					return 0;&#xD;
		}&#xD;
	</body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_eGBnQ6h1EeK3d6i6ttnN5Q" name="convertFromInt" specification="_d8vvcKh1EeK3d6i6ttnN5Q">
    <ownedParameter xmi:id="_eGCOUKh1EeK3d6i6ttnN5Q" name="angle">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#int"/>
    </ownedParameter>
    <ownedParameter xmi:id="_eGCOUah1EeK3d6i6ttnN5Q" type="_d8uhUKh1EeK3d6i6ttnN5Q" direction="return"/>
    <language>java</language>
    <body>if(angle == 90)&#xD;
			return NINETY;&#xD;
		else if(angle == 180)&#xD;
			return HUNDREDANDEIGHTY;&#xD;
		else if(angle == 270)&#xD;
			return TWOHUNDREDANDSEVENTY;&#xD;
		else&#xD;
			return DEFAULT;&#xD;
	</body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_eGFRoKh1EeK3d6i6ttnN5Q" name="getEast" specification="_eFSAYah1EeK3d6i6ttnN5Q">
    <ownedParameter xmi:id="_eGFRoah1EeK3d6i6ttnN5Q" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </ownedParameter>
    <language>java</language>
    <body>return east;&#xD;
	</body>
  </uml:OpaqueBehavior>
  <uml:OpaqueBehavior xmi:id="_eGFRoqh1EeK3d6i6ttnN5Q" name="getWest" specification="_eFT1kah1EeK3d6i6ttnN5Q">
    <ownedParameter xmi:id="_eGFRo6h1EeK3d6i6ttnN5Q" direction="return">
      <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#boolean"/>
    </ownedParameter>
    <language>java</language>
    <body>return west;&#xD;
	</body>
  </uml:OpaqueBehavior>
  <UMLLabProfile:Reference xmi:id="_eG6_IKh1EeK3d6i6ttnN5Q" base_Element="_eG5J8Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eG8NQKh1EeK3d6i6ttnN5Q" base_Element="_eG6_Iah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eG9bYKh1EeK3d6i6ttnN5Q" base_Element="_eG8NQah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eG_QkKh1EeK3d6i6ttnN5Q" base_Element="_eG9bYah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHAesKh1EeK3d6i6ttnN5Q" base_Element="_eG_Qkah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHBs0Kh1EeK3d6i6ttnN5Q" base_Element="_eHAesah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHDiAKh1EeK3d6i6ttnN5Q" base_Element="_eHCT4Kh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHEwIKh1EeK3d6i6ttnN5Q" base_Element="_eHDiAah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHGlUKh1EeK3d6i6ttnN5Q" base_Element="_eHFXMKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHHzcKh1EeK3d6i6ttnN5Q" base_Element="_eHGlUah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHJooKh1EeK3d6i6ttnN5Q" base_Element="_eHIagKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHLd0Kh1EeK3d6i6ttnN5Q" base_Element="_eHJooah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHMr8Kh1EeK3d6i6ttnN5Q" base_Element="_eHLd0ah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHOhIKh1EeK3d6i6ttnN5Q" base_Element="_eHNTAKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHQWUKh1EeK3d6i6ttnN5Q" base_Element="_eHOhIah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHRkcKh1EeK3d6i6ttnN5Q" base_Element="_eHQWUah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHTZoKh1EeK3d6i6ttnN5Q" base_Element="_eHSLgKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHVO0Kh1EeK3d6i6ttnN5Q" base_Element="_eHTZoah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHXEAKh1EeK3d6i6ttnN5Q" base_Element="_eHVO0ah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHYSIKh1EeK3d6i6ttnN5Q" base_Element="_eHXEAah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHaHUKh1EeK3d6i6ttnN5Q" base_Element="_eHY5MKh1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHb8gKh1EeK3d6i6ttnN5Q" base_Element="_eHaHUah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHdxsKh1EeK3d6i6ttnN5Q" base_Element="_eHb8gah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHe_0Kh1EeK3d6i6ttnN5Q" base_Element="_eHdxsah1EeK3d6i6ttnN5Q"/>
  <UMLLabProfile:Reference xmi:id="_eHg1AKh1EeK3d6i6ttnN5Q" base_Element="_eHfm4Kh1EeK3d6i6ttnN5Q"/>
</xmi:XMI>
